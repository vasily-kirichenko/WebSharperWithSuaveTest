{
"version": 3,
"sourceRoot": "FSharpSource",
"sources": ["WebSharper.Control/Disposable.fs", "WebSharper.Control/Event.fs", "WebSharper.Control/EventModule.fs", "WebSharper.Control/FSharpEvent.fs", "WebSharper.Control/HotStream.fs", "WebSharper.Control/MailboxProcessor.fs", "WebSharper.Control/Observable.fs", "WebSharper.Control/ObservableModule.fs", "WebSharper.Control/Observer.fs"],
"sourcesContent": ["// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal Disposable =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    let Of (dispose: unit -> unit) : IDisposable =\n        New [\"Dispose\" => dispose]\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal Event =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    type Event<'T> = private { Handlers : ResizeArray<Handler<'T>> } with\n\n        [<JavaScript>]\n        member this.Trigger(x: 'T) =\n            for h in this.Handlers.ToArray() do\n                (As<'T -> unit> h) x\n\n        [<JavaScript>]\n        member this.AddHandler(h: Handler<'T>) =\n            this.Handlers.Add h\n\n        [<JavaScript>]\n        member this.RemoveHandler(h: Handler<'T>) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        [<JavaScript>]\n        member this.Subscribe(observer: IObserver<'T>) =\n            let h = new Handler<'T>(fun _ x -> observer.OnNext x)\n            this.AddHandler h\n            Disposable.Of (fun () -> this.RemoveHandler h)\n\n        interface IDisposable with\n            member this.Dispose() = X<unit>\n\n        interface IObservable<'T> with\n            member this.Subscribe observer = X<IDisposable>\n\n        interface IDelegateEvent<Handler<'T>> with\n            member this.AddHandler x = X<unit>\n            member this.RemoveHandler x = X<unit>\n\n        interface IEvent<'T>\n\n    [<Inline>]\n    [<JavaScript>]\n    let New () = { Handlers = ResizeArray() }\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.EventModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private EventModule =\n\n    [<Inline>]\n    [<JavaScript>]\n    let Add f (e: IEvent<_,_>) = e.Add f\n\n    [<JavaScript>]\n    let Choose c (e: IEvent<_,_>) : IEvent<_> =\n        // let r = Event.New ()\n        let r = Event<_>()\n        e.Add (fun x ->\n            match c x with\n            | Some y    -> r.Trigger y\n            | None      -> ())\n        r.Publish :> _\n\n    [<JavaScript>]\n    let Filter ok (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> if ok x then r.Trigger x)\n        r :> _\n\n    [<JavaScript>]\n    let Map f (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> r.Trigger (f x))\n        r :> _\n\n    [<JavaScript>]\n    let Merge<'D1,'T,'D2 when 'D1 :> Delegate\n                          and 'D1 :  delegate<'T,unit>\n                          and 'D2 :> Delegate\n                          and 'D2 :  delegate<'T,unit>>\n            (e1: IEvent<'D1,'T>) (e2: IEvent<'D2,'T>) : IEvent<_> =\n        let r = Event.New ()\n        e1.Add r.Trigger\n        e2.Add r.Trigger\n        r :> _\n\n    [<JavaScript>]\n    let Pairwise (e: IEvent<_,_>) : IEvent<_> =\n        let buf = ref None\n        let ev  = Event.New ()\n        e.Add (fun x ->\n            match buf.Value with\n            | None ->\n                buf := Some x\n            | Some old ->\n                buf := Some x\n                ev.Trigger(old, x))\n        ev :> _\n\n    [<JavaScript>]\n    let Partition f e =\n        (Event.filter f e, Event.filter (f >> not) e)\n\n    [<JavaScript>]\n    let Scan fold seed e =\n        let state = ref seed\n        let f value =\n            state := fold !state value\n            !state\n        Event.map f e\n\n    [<JavaScript>]\n    let Split (f: 'T -> Choice<'U1,'U2>) (e: IEvent<'Del,'T>) =\n        (\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _                 -> None),\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _                 -> None)\n        )\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\n[<Proxy(typeof<Event<_>>)>]\ntype private FSharpEvent<'T> [<JavaScript>] () =\n    let event = Event.New ()\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Trigger(x: 'T) = event.Trigger x\n\n    [<JavaScript>]\n    member this.Publish with [<Inline>] get () = event :> IEvent<_>\n\n[<Proxy(typeof<IDelegateEvent<_>>)>]\ntype private IDelegateEventProxy<'D> =\n    abstract AddHandler : 'D -> unit\n    abstract RemoveHandler : 'D -> unit\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal HotStream =\n    open System\n\n    /// Implementation for \"hot stream\".\n    /// Subscribers to hot streams will only observe the latest\n    /// and future values.\n    type HotStream<'T> =\n        internal\n            {\n                Latest  : ref<option<'T>>\n                Event   : Event<'T>\n            }\n        interface IObservable<'T> with\n            [<ReflectedDefinition>]\n            member this.Subscribe(o) =\n                if this.Latest.Value.IsSome then\n                    o.OnNext this.Latest.Value.Value\n                let disp =\n                    this.Event.Publish.Subscribe(fun v ->\n                        o.OnNext(v)\n                    )\n                disp\n\n        [<ReflectedDefinition>]\n        member this.Trigger(v) =\n            this.Latest := Some v\n            this.Event.Trigger v\n\n        [<ReflectedDefinition>]\n        static member New<'U>() : HotStream<'U> =\n            {\n                Latest = ref None\n                Event = Event<_>()\n            }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Threading\n\n[<Proxy(typeof<AsyncReplyChannel<_>>)>]\ntype private ChannelProxy<'T> =\n    [<Inline \"$this($res)\">]\n    member this.Reply(res: 'T) = X<unit>\n\n[<Proxy(typeof<System.TimeoutException>)>]\ntype TimeoutExceptionProxy =\n    [<Inline \"new Error(\\\"TimeoutException\\\")\">]\n    new () = {}\n\n[<JavaScript>]\n[<Proxy(typeof<MailboxProcessor<_>>)>]\n[<Name \"MailboxProcessor\">]\ntype private MailboxProcessorProxy<'T> (initial, ?token: CancellationToken) =\n    let mutable started = false\n    let errorEvent = Event<exn>()\n    let mailbox = LinkedList<'T>()\n    let mutable savedCont = None\n\n    let startAsync a =\n        Async.Start(a, ?cancellationToken = token)\n\n    let resume() =\n        match savedCont with\n        | None -> ()\n        | Some c ->\n            savedCont <- None\n            c |> startAsync\n\n    do  match token with\n        | Some ct -> \n            ct.Register(fun () -> resume()) |> ignore\n        | None -> ()\n\n    let dequeue() =\n        let f = mailbox.First.Value\n        mailbox.RemoveFirst()\n        f\n\n    [<Inline>]\n    member this.Error = errorEvent.Publish\n    [<Inline>]\n    member this.add_Error handler = this.Error.AddHandler handler\n    [<Inline>]\n    member this.remove_Error handler = this.Error.RemoveHandler handler\n\n    member val DefaultTimeout = -1 with get, set    \n\n    member this.Start() =\n        if started then\n            failwith \"The MailboxProcessor has already been started.\"\n        else\n            started <- true\n            async {\n                try do! initial (As<MailboxProcessor<'T>> this)\n                with err -> errorEvent.Trigger err\n            } |> startAsync\n\n    static member Start(initial, ?token: CancellationToken) =\n        let mb = new MailboxProcessor<'T>(initial, ?cancellationToken = token)\n        mb.Start()\n        mb\n\n    [<Inline>]\n    member this.Post(msg: 'T) =\n        mailbox.AddLast msg |> ignore\n        resume()\n\n    member this.TryReceive(?timeout: int) =        \n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if mailbox.First = null then\n                if timeout < 0 then\n                    savedCont <- Some <| async { dequeue() |> Some |> ok }\n                else  \n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout \n                    savedCont <- Some <| async { \n                        if !waiting then do\n                            waiting := false  \n                            JS.ClearTimeout pending\n                            dequeue() |> Some |> ok \n                    }\n            else dequeue() |> Some |> ok\n\n    member this.Receive(?timeout: int) =\n        async {\n            let! x = this.TryReceive(?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n                              \n    member this.CurrentQueueLength = mailbox.Count\n\n    member this.PostAndTryAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R option> =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if timeout < 0 then\n                As (Some >> ok) |> msgf |> this.Post\n            else\n                let waiting = ref true\n                As (fun res ->\n                    if !waiting then\n                        waiting := false\n                        ok (Some res)\n                ) |> msgf |> this.Post\n                JS.SetTimeout (fun () ->\n                    if !waiting then\n                        waiting := false\n                        ok None        \n                ) timeout |> ignore               \n\n    member this.PostAndAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R> =\n        async {\n            let! x = this.PostAndTryAsyncReply(msgf, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n\n    member this.TryScan(scanner, ?timeout: int) =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        async {\n            let scanInbox() =\n                let mutable m = mailbox.First\n                let mutable found = None\n                while m <> null do \n                    match scanner m.Value with\n                    | None ->\n                        m <- m.Next\n                    | _ as a ->\n                        mailbox.Remove m\n                        m <- null\n                        found <- a\n                found\n            match scanInbox() with\n            | Some found -> \n                let! res = found\n                return Some res\n            | _ -> return! Async.FromContinuations <| fun (ok, _, _) -> \n                if timeout < 0 then\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                ok (Some res)\n                        }\n                    scanNext()\n                else\n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                if !waiting then do\n                                    waiting := false\n                                    JS.ClearTimeout pending\n                                    ok (Some res)\n                        }\n                    scanNext()\n        }\n        \n    member this.Scan(scanner, ?timeout: int) =\n        async {\n            let! x = this.TryScan(scanner, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule internal WebSharper.Control.Observable\n\nopen System\nopen WebSharper\n\ntype private Observable<'T> =\n    internal {\n        Subscribe : IObserver<'T> -> IDisposable\n    }\n\n    interface IObservable<'T> with\n\n        [<JavaScript>]\n        member this.Subscribe observer =\n            this.Subscribe observer\n\n[<JavaScript>]\nlet New f : IObservable<_> = upcast { Subscribe = f }\n\n[<JavaScript>]\nlet Of (f: ('T -> unit) -> (unit -> unit)) : IObservable<_> =\n    New (fun o -> Disposable.Of (f (fun x -> o.OnNext x)))\n\n[<JavaScript>]\nlet Return<'T> (x: 'T) : IObservable<'T> =\n    let f (o : IObserver<'T>) =\n        o.OnNext x\n        o.OnCompleted ()\n        Disposable.Of ignore\n    New f\n\n[<JavaScript>]\nlet Never<'T> () : IObservable<'T> =\n    New(fun _ ->\n        Disposable.Of ignore\n    )\n\n[<JavaScript>]\nlet Protect f succeed fail =\n    match (try Choice1Of2 (f ()) with e -> Choice2Of2 e) with\n    | Choice1Of2 x -> (succeed x)\n    | Choice2Of2 e -> (fail e)\n\n[<JavaScript>]\nlet Map (f: 'T -> 'U) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) o1.OnNext o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n\n[<JavaScript>]\nlet Filter (f: 'T -> bool) (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let on v = \n            Protect (fun () -> if f v then Some v else None)\n                (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <|  Observer.New(on, o1.OnError, o1.OnCompleted)\n\n[<JavaScript>]\nlet Choose  (f: 'T -> option<'U>) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n[<JavaScript>]\nlet Drop count (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let index = ref 0\n        let on v =\n            incr index\n            if index.Value > count then\n                o1.OnNext v\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n[<JavaScript>]\nlet Merge (io1: IObservable<'T>) (io2: IObservable<'T>) : IObservable<'T> =\n    New <| fun o ->\n        let completed1 = ref false\n        let completed2 = ref false\n        let disp1 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed1 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io1.Subscribe\n        let disp2 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed2 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io2.Subscribe\n        Disposable.Of (fun () -> disp1.Dispose(); disp2.Dispose())\n\n[<JavaScript>]\nlet Concat (io1: IObservable<'T>) (io2: IObservable<'T>) =\n    New <| fun o ->\n        let innerDisp = ref None\n        let outerDisp =\n            io1.Subscribe(\n                Observer.New(o.OnNext, ignore, fun () ->\n                    innerDisp := Some <| io2.Subscribe(o)\n                )\n            )\n        Disposable.Of <| fun () ->\n            if innerDisp.Value.IsSome then\n                innerDisp.Value.Value.Dispose ()\n            outerDisp.Dispose()\n\n\n[<JavaScript>]\nlet Range (start: int , count: int) : IObservable<int> =\n    New <| fun o ->\n        for i = start to start + count do\n            o.OnNext i\n        Disposable.Of ignore\n\n\n[<JavaScript>]\nlet CombineLatest   (io1 : IObservable<'T>)\n                    (io2: IObservable<'U>)\n                    (f: 'T -> 'U -> 'S) : IObservable<'S> =\n    New <| fun o ->\n        let lv1 = ref None\n        let lv2 = ref None\n        let update () =\n            match !lv1, !lv2 with\n            | Some v1, Some v2  ->\n                Protect (fun () -> f v1 v2) o.OnNext o.OnError\n            | _                 ->\n                ()\n        let o1 =\n            let onNext x =\n                lv1 := Some x\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let o2 =\n            let onNext y =\n                lv2 := Some y\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let d1 = io1.Subscribe(o1)\n        let d2 = io2.Subscribe(o2)\n        Disposable.Of (fun () -> d1.Dispose() ; d2.Dispose())\n\n[<JavaScript>]\nlet Switch (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp =\n            let index = ref 0\n            let disp : option<IDisposable> ref = ref None\n\n            // Subscribe to outer stream\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Update counter\n                incr index\n\n                // Dispose old observer\n                if disp.Value.IsSome then\n                    disp.Value.Value.Dispose ()\n\n                let currentIndex = index.Value\n                let d =\n                    o1.Subscribe (fun v ->\n                        if currentIndex = index.Value then\n                            o.OnNext(v)\n                    ) |> Some\n                // Update dispose\n                disp := d\n            )\n        disp\n    )\n\n[<JavaScript>]\nlet SelectMany (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp = ref ignore\n        // Subscribe to outer stream\n        let d =\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Subscribe to inner stream\n                let d =\n                    o1.Subscribe (fun v ->\n                        o.OnNext v\n                    )\n                disp := fun () ->\n                    disp.Value ()\n                    d.Dispose ()\n            )\n        Disposable.Of (fun () ->\n            disp.Value ()\n            d.Dispose ()\n        )\n    )\n\n[<JavaScript>]\nlet Aggregate (io: IObservable<'T>) (seed: 'S) (fold: 'S -> 'T -> 'S) =\n    New <| fun o1 ->\n        let state = ref seed\n        let on v = \n            Protect (fun () -> fold !state v) \n                (fun s -> state := s; o1.OnNext s) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n//    [<JavaScript>]\n//    let CollectLatest (outer: IObservable<IObservable<'T>>) : IObservable<seq<'T>> =\n//        New (fun o ->\n//            let dict = System.Collections.Generic.Dictionary<int, 'T>()\n//            let index = ref 0\n//\n//            // Outer subscription\n//            outer.Subscribe(fun (inner: IObservable<'T>) ->\n//                incr index\n//                let currentIndex = index.Value\n//\n//                // Inner subscription\n//                inner.Subscribe(fun value ->\n//                    dict.[currentIndex] <- value\n//                    seq {for pair in dict do yield pair.Value}\n//                    |> o.OnNext\n//                )|> ignore\n//            )\n//        )\n\n[<JavaScript>]\nlet Sequence (ios: seq<IObservable<'T>>) : IObservable<List<'T>> =\n    let rec sequence (ios: list<IObservable<'T>>) =\n        match ios with\n        | []        ->\n            Return []\n        | x::xs  ->\n            let rest = sequence xs\n            CombineLatest x rest  (fun x y -> x :: y)\n    sequence (List.ofSeq ios)\n\n\n[<Inline>]\n[<JavaScript>]\nlet Heat (io: IObservable<'T>) : IObservable<'T> =\n    let formStream = HotStream.HotStream<_>.New()\n    let disp =\n        io.Subscribe formStream.Trigger\n    formStream :> IObservable<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.ObservableModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private ObservableModule =\n\n    [<JavaScript>]\n    [<Inline>]\n    let Add (f: 'T -> unit) (o: IObservable<'T>) =\n        ignore (o.Subscribe (Observer.Of f))\n\n    [<JavaScript>]\n    [<Inline>]\n    let Choose (c: 'T -> option<'U>) (e: IObservable<'T>) =\n        Observable.Choose c e\n\n    [<JavaScript>]\n    [<Inline>]\n    let Filter (ok: 'T -> bool) (e: IObservable<'T>) : IObservable<'T> =\n        Observable.Filter ok e\n\n    [<JavaScript>]\n    [<Inline>]\n    let Map (f: 'T -> 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.Map f e\n\n    [<JavaScript>]\n    [<Inline>]\n    let Merge (e1: IObservable<'T>) (e2: IObservable<'T>) =\n        Observable.Merge e1 e2\n\n    [<JavaScript>]\n    let Pairwise (e: IObservable<'T>) : IObservable<'T * 'T> =\n        Observable.New <| fun o1 ->\n            let last = ref None\n            let on v =\n                match !last with\n                | None -> ()\n                | Some l -> o1.OnNext(l, v)\n                last := Some v\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    [<JavaScript>]\n    let Partition (f: 'T -> bool) (e: IObservable<'T>) :\n            IObservable<'T> * IObservable<'T> =\n        (Observable.Filter f e, Observable.filter (f >> not) e)\n\n    [<JavaScript>]\n    let Scan (fold: 'U -> 'T -> 'U) (seed: 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.New <| fun o1 ->\n            let state = ref seed\n            let on v = \n                Observable.Protect (fun () -> fold !state v) \n                    (fun s -> state := s; o1.OnNext s) o1.OnError\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    [<JavaScript>]\n    let Split (f: 'T -> Core.Choice<'U1,'U2>) (e: IObservable<'T>) :\n            IObservable<'U1> * IObservable<'U2> =\n        let left =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _ -> None)\n        let right =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _ -> None)\n        (left, right)\n\n    [<JavaScript>]\n    [<Inline>]\n    let Subscribe (f: 'T -> unit) (e: IObservable<'T>) =\n        e.Subscribe f\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<JavaScript>]\nmodule internal Observer =\n\n    type Message<'T> =\n        | Message of 'T\n        | Error of exn\n        | Completed\n\n    type private Observer<'T> =\n        {\n            onNext : 'T -> unit\n            onError : exn -> unit\n            onCompleted : unit -> unit\n        }\n\n        interface IObserver<'T> with\n            member __.OnNext x = __.onNext x\n            member __.OnError e = __.onError e\n            member __.OnCompleted() = __.onCompleted ()\n\n    let Of f : IObserver<_> =\n        upcast {\n            onNext = fun x -> f x\n            onError = fun x -> raise x\n            onCompleted = fun () -> ()\n        }\n\n    let New (f, e, c) : IObserver<_> =\n        upcast {\n            onNext = f\n            onError = e\n            onCompleted = c\n        }\n"],
"names": ["this", "x", "chooser", "timeout", "arg00", "arg0", "matchValue", "found", "_arg6", "scanNext", "f", "onNext", "e", "d", "ios", "disp"],
"mappings": "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"
}
