{
"version": 3,
"sourceRoot": "FSharpSource",
"sources": ["WebSharper.Collections/BalancedTree.fs", "WebSharper.Collections/Dictionary.fs", "WebSharper.Collections/Map.fs", "WebSharper.Collections/Set.fs", "WebSharper.Collections/HashSet.fs", "WebSharper.Collections/LinkedList.fs", "WebSharper.Collections/MapModule.fs", "WebSharper.Collections/Pair.fs", "WebSharper.Collections/ResizeArray.fs", "WebSharper.Collections/SetModule.fs"],
"sourcesContent": ["// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper.JavaScript\n\n/// Provides balanced binary search tree operations.\nmodule internal BalancedTree =\n    open WebSharper\n\n    /// Represents a binary balanced search tree, preserving the balance\n    /// invariant: the heights of the branches differ by at most 1.\n    type Tree<'T when 'T : comparison> =\n        private {\n            Node    : 'T\n            Left    : Tree<'T>\n            Right   : Tree<'T>\n            Height  : int\n            Count   : int\n        }\n\n    [<Inline \"null\">]\n    let Empty<'T when 'T : comparison> = X<Tree<'T>>\n\n    [<Inline \"$tree == null\">]\n    let IsEmpty (tree: Tree<'T>) = X<bool>\n\n    [<Inline \"$tree == null ? 0 : $tree.Height\">]\n    let Height (tree: Tree<'T>) = X<int>\n            \n    [<Inline \"$tree == null ? 0 : $tree.Count\">]\n    let Count (tree: Tree<'T>) = X<int>\n\n    [<Inline \"$t.Left\">]\n    let Left (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Right\">]\n    let Right (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Node\">]\n    let Node (t: Tree<'T>) = X<'T>\n\n    [<JavaScript>]\n    let Branch node left right =\n        {\n            Node    = node\n            Left    = left\n            Right   = right\n            Height  = 1 + max (Height left) (Height right)\n            Count   = 1 + Count left + Count right\n        }\n\n    [<JavaScript>]\n    let Enumerate flip (t: Tree<'T>) : seq<'T> =\n        let rec gen (t, spine: list<'T * Tree<'T>>) =\n            if IsEmpty t then\n                match spine with\n                | []                    -> None\n                | (t, other) :: spine   -> Some (t, (other, spine))\n            else\n                if flip\n                then gen (Right t, (Node t, Left t) :: spine)\n                else gen (Left t, (Node t, Right t) :: spine)\n        Seq.unfold gen (t, [])\n\n    /// Traverses the tree in ascending order.\n    [<Inline>]\n    [<JavaScript>]\n    let Ascend t = Enumerate false t\n\n    /// Traverses the tree in descending order.\n    [<Inline>]\n    [<JavaScript>]\n    let Descend t = Enumerate true t\n\n    /// Builds a tree from sorted input and the indices of the\n    /// first and the last elements to include.\n    [<JavaScript>]\n    let rec private Build (data: 'T []) min max : Tree<'T> =\n        let sz = max - min + 1\n        if sz <= 0 then\n            Empty\n        else\n            let center = (min + max) / 2\n            let left   = Build data min (center - 1)\n            let right  = Build data (center + 1) max\n            Branch data.[center] left right\n\n    /// Quickly constructs a tree from a sorted, distinct array.\n    [<Inline>]\n    [<JavaScript>]\n    let OfSorted (data: 'T []) : Tree<'T> =\n        Build data 0 (Array.length data - 1)\n\n    [<JavaScript>]\n    let OfSeq (data: seq<'T>) : Tree<'T> =\n        OfSorted (Array.sort (Seq.toArray (Seq.distinct data)))\n\n    [<Inline \"$x.unshift($y)\">]\n    let private unshift (x: 'T) y = X<unit>\n\n    /// Unzips a tree into a matching node and a spine.\n    [<JavaScript>]\n    let Lookup (k: 'T) (t: Tree<'T>) =\n        let mutable spine = [||]\n        let mutable t = t\n        let mutable loop = true\n        while loop do\n            if IsEmpty t then loop <- false else\n                match compare k t.Node with\n                | 0 -> loop <- false\n                | 1 ->\n                    unshift spine (true, t.Node, t.Left)\n                    t <- t.Right\n                | _ ->\n                    unshift spine (false, t.Node, t.Right)\n                    t <- t.Left\n        (t, spine)\n\n    /// Rebuilds an unzipped tree by going up the spine and performing\n    /// rotations where necessary for balance.\n    [<JavaScript>]\n    let private Rebuild<'T when 'T : comparison>\n            (spine: (bool * 'T * Tree<'T>) []) (t: Tree<'T>) : Tree<'T> =\n        let h (x: Tree<'T>) = Height x\n        let mutable t = t\n        for i = 0 to spine.Length - 1 do\n            t <- (\n                match spine.[i] with\n                | false, x, r ->\n                    if h t > h r + 1 then\n                        if h t.Right = h t.Left + 1 then\n                            // Double rotation:\n                            let m = t.Right\n                            Branch  m.Node\n                                    (Branch t.Node t.Left m.Left)\n                                    (Branch x m.Right r)\n                        else\n                            // Single rotation:\n                            Branch  t.Node\n                                    t.Left\n                                    (Branch x t.Right r)\n                    else\n                        // No rotation:\n                        Branch x t r\n                | true, x, l ->\n                    if h t > h l + 1 then\n                        if h t.Left = h t.Right + 1 then\n                            // Double rotation:\n                            let m = t.Left\n                            Branch m.Node\n                                    (Branch x l m.Left)\n                                    (Branch t.Node m.Right t.Right)\n                        else\n                            // Single rotation:\n                            Branch t.Node\n                                    (Branch x l t.Left)\n                                    t.Right\n                    else\n                        // No rotation:\n                        Branch x l t\n            )\n        t\n\n    /// Inserts or updates a node in the tree. If a matching node is found,\n    /// it is replaced with the value of \"combine old new\".\n    [<JavaScript>]\n    let Put<'T when 'T : comparison> combine k (t: Tree<'T>) : Tree<'T> =\n        let (t, spine) = Lookup k t\n        if IsEmpty t then\n            Rebuild spine (Branch k Empty Empty)\n        else\n            Rebuild spine (Branch (combine t.Node k) t.Left t.Right)\n\n    /// Removes a node from the tree.\n    [<JavaScript>]\n    let Remove k (src: Tree<'T>) =\n        let (t, spine) = Lookup k src\n        if IsEmpty t then\n            src\n        else\n            if IsEmpty t.Right then\n                Rebuild spine t.Left\n            elif IsEmpty t.Left then\n                Rebuild spine t.Right\n            else\n                Seq.append (Ascend t.Left) (Ascend t.Right)\n                |> Seq.toArray\n                |> OfSorted\n                |> Rebuild spine\n\n    /// Adds a node into the tree, replacing an existing one if found.\n    [<JavaScript>]\n    let Add<'T when 'T : comparison> (x: 'T) (t: Tree<'T>) : Tree<'T> =\n        Put (fun _ x -> x) x t\n\n    /// Checks if a tree contains a given key.\n    [<JavaScript>]\n    let rec Contains (v: 'T) (t: Tree<'T>) : bool =\n        not (IsEmpty (fst (Lookup v t)))\n\n    /// Looks up a node by key.\n    [<JavaScript>]\n    let TryFind (v: 'T) (t: Tree<'T>) =\n        let x = fst (Lookup v t)\n        if IsEmpty x then None else Some x.Node\n\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Collections.Generic\n\ntype private KVP<'K,'V> = KeyValuePair<'K,'V>\ntype private D<'K,'V> = Dictionary<'K,'V>\n\nmodule internal DictionaryUtil =\n\n    [<JavaScript>]\n    let notPresent () =\n        failwith \"The given key was not present in the dictionary.\"\n\n    [<Inline \"$c.Equals($x, $y)\">]\n    let equals (c: IEqualityComparer<'T>) x y =\n        c.Equals(x, y)\n\n    [<Inline \"$c.GetHashCode($x)\">]\n    let getHashCode (c: IEqualityComparer<'T>) x =\n        c.GetHashCode x\n\nopen DictionaryUtil\n\n/// Implements a proxy for the .NET dictionary.\n[<Name \"Dictionary\">]\n[<Proxy(typeof<D<_,_>>)>]\ntype internal Dictionary<'K,'V when 'K : equality>\n\n    [<JavaScript>]\n    private (init   : seq<KVP<'K,'V>>,\n             equals : 'K -> 'K -> bool,\n             hash   : 'K -> int) =\n\n        let mutable count = 0\n        let mutable data  = obj ()\n\n        [<Inline>]\n        [<JavaScript>]\n        let h x = As<string> (hash x)\n\n        do for x in init do\n            (?<-) data (h x.Key) x.Value\n\n        [<JavaScript>]\n        new () = new Dictionary<'K,'V>([||], (=), hash)\n\n        [<JavaScript>]\n        new (capacity: int) = new Dictionary<'K,'V>()\n\n        [<JavaScript>]\n        new (comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>([||], equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        new (capacity: int, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(comparer)\n\n        [<JavaScript>]\n        new (dictionary: IDictionary<'K,'V>) =\n            new Dictionary<'K,'V>(dictionary, (=), hash)\n\n        [<JavaScript>]\n        new (dictionary: IDictionary<'K,'V>, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(\n                dictionary,\n                equals comparer,\n                getHashCode comparer\n            )\n\n        [<JavaScript>]\n        member this.Add(k: 'K, v: 'V) =\n            let h = h k\n            if JS.HasOwnProperty data h then\n                failwith \"An item with the same key has already been added.\"\n            else\n                (?<-) data h (new KVP<'K,'V>(k, v))\n                count <- count + 1\n\n        [<JavaScript>]\n        member this.Clear() =\n            data <- obj ()\n            count <- 0\n\n        [<JavaScript>]\n        member this.ContainsKey(k: 'K) =\n            JS.HasOwnProperty data (h k)\n\n        [<JavaScript>]\n        member this.Count with [<Inline>] get () = count\n\n        [<JavaScript>]\n        member this.Item\n            with get (k: 'K) : 'V =\n                let k = h k\n                if JS.HasOwnProperty data k then\n                    let x : KVP<'K, 'V> = (?) data k\n                    x.Value\n                else\n                    notPresent ()\n            and set (k: 'K) (v: 'V) =\n                let h = h k\n                if not (JS.HasOwnProperty data h) then\n                    count <- count + 1\n                (?<-) data h (new KVP<'K,'V>(k, v))\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            let s = JS.GetFieldValues data\n            (As<seq<obj>> s).GetEnumerator()\n\n        [<JavaScript>]\n        member this.Remove(k: 'K) =\n            let h = h k\n            if JS.HasOwnProperty data h then\n                JS.Delete data h\n                count <- count - 1\n                true\n            else\n                false\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Collections\nmodule T = BalancedTree\n\n[<AutoOpen>]\nmodule private MapUtil =\n\n    [<JavaScript>]\n    let fromSeq(s: seq<_>) =\n        let a : Pair<_,_> [] =\n            [| for (k, v) in Seq.distinctBy fst s ->\n                { Key = k; Value = v } |]\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Map type.\n[<Proxy(typeof<Map<_,_>>)>]\ntype internal FSharpMap<'K,'V when 'K : comparison>\n\n    [<JavaScript>]\n    (tree: T.Tree<Pair<'K,'V>>) =\n\n        [<JavaScript>]\n        new (s: seq<_>) = new FSharpMap<_,_>(fromSeq s)\n\n        [<JavaScript>]\n        member this.Tree = tree\n\n        [<JavaScript>]\n        member this.Add(k: 'K, v: 'V) : Map<'K,'V> =\n            As (FSharpMap<'K,'V>(tree |> T.Add {Key=k; Value=v}))\n\n        [<JavaScript>]\n        member this.ContainsKey k = \n            tree |> T.Contains {Key=k; Value = JS.Undefined}\n\n        [<JavaScript>]\n        member this.Count = T.Count tree\n\n        [<JavaScript>]\n        member this.IsEmpty = T.IsEmpty tree\n\n        [<JavaScript>]\n        member this.Item \n            with get (k: 'K) : 'V =\n                match this.TryFind k with\n                | Some v    ->v\n                | None      ->\n                    failwith \"The given key was not present in the dictionary.\"\n\n        [<JavaScript>]\n        member this.Remove(k: 'K) : Map<'K,'V> =\n            As (FSharpMap(tree |> T.Remove {Key=k; Value=JS.Undefined}))\n\n        [<JavaScript>]\n        member this.TryFind(k: 'K) =\n            tree\n            |> T.TryFind {Key=k; Value=JS.Undefined}\n            |> Option.map (fun kv -> kv.Value)\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            let s =\n                T.Ascend tree\n                |> Seq.map (fun kv ->\n                    new KeyValuePair<_,_>(kv.Key, kv.Value))\n            s.GetEnumerator()\n\n        [<JavaScript>]\n        override this.GetHashCode() =\n            hash (Seq.toArray this)\n\n        [<JavaScript>]\n        override this.Equals(other) =\n            let other = As<FSharpMap<'K,'V>> other\n            this.Count = other.Count\n            && Seq.forall2 ( = ) this other\n\n        interface System.IComparable with\n            [<JavaScript>]\n            member this.CompareTo other =\n                Seq.compareWith (fun x y ->\n                    compare (As<Pair<'K,'V>> x) (As<Pair<'K,'V>> y))\n                    this\n                    (As<Map<'K,'V>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<_>\n\n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = X<_>\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nmodule T = BalancedTree\n\n[<AutoOpen>]\nmodule private SetUtil =\n\n    [<JavaScript>]\n    let ofSeq(s: seq<_>) =\n        let a = Seq.toArray s\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Set type.\n[<Proxy(typeof<Set<_>>)>]\ntype private FSharpSet<'T when 'T : comparison>\n\n    [<JavaScript>]\n    internal (tree: T.Tree<'T>) =\n\n        [<JavaScript>]\n        new (s: seq<'T>) = new FSharpSet<'T>(ofSeq s)\n\n        [<JavaScript>]\n        member this.add(x: Set<'T>) =\n            Set.union (As this) x\n\n        [<JavaScript>]\n        member this.sub(x: Set<'T>) =\n            Set.difference (As this) x\n\n        [<JavaScript>]\n        member this.Add x : Set<'T> =\n            As (FSharpSet<'T>(T.Add x tree))\n\n        [<JavaScript>]\n        member this.Contains v = T.Contains v tree\n\n        [<JavaScript>]\n        member this.Count = T.Count tree\n\n        [<JavaScript>]\n        member this.IsEmpty = T.IsEmpty tree\n\n        [<JavaScript>]\n        member internal this.Tree = tree\n\n        [<JavaScript>]\n        member this.IsProperSubsetOf(s: Set<'T>) =\n            this.IsSubsetOf s && this.Count < s.Count\n\n        [<JavaScript>]\n        member this.IsProperSupersetOf(s: Set<'T>) =\n            this.IsSupersetOf s && this.Count > s.Count\n\n        [<JavaScript>]\n        member this.IsSubsetOf(s: Set<'T>) =\n            Seq.forall s.Contains this\n\n        [<JavaScript>]\n        member this.IsSupersetOf(s: Set<'T>) =\n            Seq.forall this.Contains s\n\n        [<JavaScript>]\n        member this.MaximumElement = Seq.head (T.Descend tree)\n\n        [<JavaScript>]\n        member this.MinimumElement = Seq.head (T.Ascend tree)\n\n        [<JavaScript>]\n        member this.Remove v : Set<'T> =\n            As (FSharpSet<'T>(T.Remove v tree))\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            (T.Ascend tree).GetEnumerator()\n\n        [<JavaScript>]\n        override this.GetHashCode() =\n            -1741749453 + ((Seq.toArray this).GetHashCode())\n\n        [<JavaScript>]\n        override this.Equals(other: obj) =\n            this.Count = (As<FSharpSet<'T>> other).Count\n            && Seq.forall2 ( = ) this (As<FSharpSet<'T>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<_>\n\n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = X<_>\n\n        interface System.IComparable with\n            [<JavaScript>]\n            member this.CompareTo other =\n                Seq.compareWith compare this (As<FSharpSet<'T>> other)\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule private HashSetUtil =\n    [<Direct \"var r=[]; for(var k in $o) { r.push.apply(r, $o[k]) }; return r\">]\n    let concat (o: Array<Array<'T>>) = X<Array<'T>>\n    \nopen DictionaryUtil\n\n[<Proxy(typeof<HashSet<_>>)>]\ntype HashSetProxy<'T when 'T : equality>\n\n    [<JavaScript>]\n    private (init   : seq<'T>,\n             equals : 'T -> 'T -> bool,\n             hash   : 'T -> int) =\n\n        let mutable data  = Array<Array<'T>>()\n        let mutable count = 0\n\n        [<JavaScript>]\n        let arrContains (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals arr.[i] item then\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        [<JavaScript>]\n        let arrRemove (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals arr.[i] item then\n                    arr.Splice(i, 1) |> ignore\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        [<JavaScript>]\n        let add (item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then\n                data.[h] <- As [| item |]\n                count <- count + 1\n                true\n            else\n                if arrContains item arr then false else    \n                    arr.Push item |> ignore\n                    count <- count + 1\n                    true\n\n        do for x in init do add x |> ignore\n\n        [<JavaScript>]\n        new () = HashSetProxy<'T>(Seq.empty, (=), hash)\n\n        [<JavaScript>]\n        new (init: seq<'T>) = new HashSetProxy<'T>(init, (=), hash)\n\n        [<JavaScript>]\n        new (comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(Seq.empty, equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        new (init: seq<'T>, comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(init, equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        member this.Add(item: 'T) = add item\n\n        [<JavaScript>]\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        [<JavaScript>]\n        member x.Contains(item: 'T) =\n            let arr = data.[hash item]\n            if arr ==. null then false else arrContains item arr\n\n        [<JavaScript>]\n        member x.CopyTo(arr: 'T[]) =\n            let mutable i = 0\n            let all = concat data \n            for i = 0 to all.Length - 1 do \n                arr.[i] <- all.[i]\n\n        [<JavaScript>]\n        member x.Count = count\n\n        [<JavaScript>]\n        member x.ExceptWith(xs: seq<'T>) =\n            for item in xs do\n                x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n           (As<seq<'T>>(concat data)).GetEnumerator()\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<IEnumerator>\n        \n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = X<IEnumerator<'T>>\n\n        // TODO: optimize methods by checking if other collection\n        // is a HashSet with the same IEqualityComparer\n        \n        [<JavaScript>]\n        member x.IntersectWith(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash) \n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if other.Contains(item) |> not then\n                    x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member x.IsProperSubsetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count < other.Length && x.IsSubsetOf(other)\n\n        [<JavaScript>]\n        member x.IsProperSupersetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count > other.Length && x.IsSupersetOf(other)\n\n        [<JavaScript>]\n        member x.IsSubsetOf(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            As<_[]>(concat data) |> Array.forall other.Contains\n\n        [<JavaScript>]\n        member x.IsSupersetOf(xs: seq<'T>) =\n            xs |> Seq.forall x.Contains\n\n        [<JavaScript>]\n        member x.Overlaps(xs: seq<'T>) =\n            xs |> Seq.exists x.Contains\n\n        [<JavaScript>]\n        member x.Remove(item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then false else\n                if arrRemove item arr then\n                    count <- count - 1\n                    true\n                else false\n\n        [<JavaScript>]\n        member x.RemoveWhere(cond: 'T -> bool) =\n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if cond item then\n                    x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member x.SetEquals(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            x.Count = other.Count && x.IsSupersetOf(other)\n\n        [<JavaScript>]\n        member x.SymmetricExceptWith(xs: seq<'T>) =\n            for item in xs do\n                if x.Contains item then\n                    x.Remove(item) |> ignore\n                else\n                    x.Add(item) |> ignore\n\n        [<JavaScript>]\n        member x.UnionWith(xs: seq<'T>) =\n            for item in xs do\n                x.Add(item) |> ignore\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.LinkedList\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype LL<'T> = LinkedList<'T>\ntype LLN<'T> = LinkedListNode<'T>\ntype LLE<'T> = LinkedList<'T>.Enumerator\n\n[<Proxy(typeof<LLN<_>>)>]\n[<Name \"N\">]\ntype NodeProxy<'T> =\n    member this.Previous with [<Inline \"$this.p\">] get () = X<LLN<'T>>\n    member this.Next     with [<Inline \"$this.n\">] get () = X<LLN<'T>>\n    member this.Value    with [<Inline \"$this.v\">] get () = X<'T>\n\n[<Inline \"{p: $p, n: $n, v: $v}\">]\nlet newNode<'T> (p: LLN<'T>) (n: LLN<'T>) (v: 'T) = X<LLN<'T>>\n\n[<Inline \"$node.p = $p\" >]\nlet setPrev (node: LLN<'T>) (p: LLN<'T>) = ()\n\n[<Inline \"$node.n = $n\" >]\nlet setNext (node: LLN<'T>) (n: LLN<'T>) = ()\n\n[<Proxy(typeof<LLE<_>>)>]\n[<Name \"E\">]\ntype EnumeratorProxy<'T> [<JavaScript>] (l: LLN<'T>) =\n    let mutable c = l\n\n    [<JavaScript>]\n    member this.Current = c.Value\n\n    [<JavaScript>]\n    member this.MoveNext() =\n        c <- c.Next\n        c <> null\n\n    [<JavaScript>]\n    member this.Dispose() = ()\n\n[<Proxy(typeof<LL<_>>)>]\n[<Name \"T\">]\ntype ListProxy<'T> [<JavaScript>] (coll: 'T seq) =\n    let mutable c = 0\n    let mutable n = null\n    let mutable p = null\n\n    do  let ie = coll.GetEnumerator()\n        if ie.MoveNext() then\n            n <- newNode null null ie.Current\n            p <- n\n            c <- 1\n        while ie.MoveNext() do\n            let node = newNode p null ie.Current\n            setNext p node\n            p <- node\n            c <- c + 1\n            \n    [<JavaScript>]\n    new () = ListProxy(Seq.empty)          \n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Count = c\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.First = n\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Last = p\n\n    [<JavaScript>]\n    member this.AddAfter(after: LLN<'T>, value) =\n        let before = after.Next\n        let node = newNode after before value\n        if after.Next = null then p <- node\n        setNext after node\n        if before <> null then setPrev before node\n        c <- c + 1\n        node\n\n    [<JavaScript>]\n    member this.AddBefore(before: LLN<'T>, value) =\n        let after = before.Previous\n        let node = newNode after before value\n        if before.Previous = null then n <- node \n        setPrev before node\n        if after <> null then setNext after node\n        c <- c + 1\n        node\n\n    [<JavaScript>]\n    member this.AddFirst(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddBefore(n, value)\n\n    [<JavaScript>]\n    member this.AddLast(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddAfter(p, value)\n\n    [<JavaScript>]\n    member this.Clear() =\n        c <- 0\n        n <- null\n        p <- null\n\n    [<JavaScript>]\n    member this.Contains(value: 'T) =\n        let mutable found = false\n        let mutable node = n\n        while node <> null && not found do\n            if node.Value ==. value then found <- true \n            else node <- node.Next\n        found\n            \n    [<JavaScript>]\n    member this.Find(value: 'T) =\n        let mutable node = n\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Next\n        if notFound then null else node\n\n    [<JavaScript>]\n    member this.FindLast(value: 'T) = \n        let mutable node = p\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Previous\n        if notFound then null else node\n                \n    [<JavaScript>]\n    member this.GetEnumerator(): LinkedList<'T>.Enumerator =\n        As (EnumeratorProxy(As this))\n\n    [<JavaScript>]\n    member this.Remove(node: LLN<'T>) =\n        let before = node.Previous\n        let after = node.Next\n        if before = null then n <- after else setNext before after\n        if after = null then p <- before else setPrev after before\n        c <- c - 1\n        \n    [<JavaScript>]\n    member this.Remove(value) = \n        let node = this.Find(value)\n        if node = null then false\n        else\n            this.Remove(node)\n            true\n\n    [<JavaScript>]\n    member this.RemoveFirst() = this.Remove(n)\n\n    [<JavaScript>]\n    member this.RemoveLast() = this.Remove(p)\n               \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Map module.\n[<Proxy \"Microsoft.FSharp.Collections.MapModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule internal MapModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private ToTree (m: Map<'K,'V>) =\n        (As<FSharpMap<'K,'V>> m).Tree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private OfTree (t: T.Tree<_>) : Map<'K,'V> =\n        As (new FSharpMap<'K,'V>(t))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Add k v (m: Map<'K,'V>) : Map<'K,'V> = m.Add(k, v)\n\n    [<Inline>]\n    [<JavaScript>]\n    let ContainsKey k (m: Map<'K,'V>) : bool = m.ContainsKey k\n\n    [<Inline>]\n    [<JavaScript>]\n    let Empty<'K,'V when 'K : comparison> : Map<'K,'V> = new Map<_,_>([||])\n\n    [<JavaScript>]\n    let Exists (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : bool =\n        m |> Seq.exists (fun kv -> f kv.Key kv.Value)\n\n    [<JavaScript>]\n    let Filter (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> =\n        T.Ascend (ToTree m)\n        |> Seq.filter (fun kv -> f kv.Key kv.Value)\n        |> Seq.toArray\n        |> T.OfSorted\n        |> OfTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let Find (k: 'K) (m: Map<'K,'V>) : 'V = m.[k]\n\n    [<JavaScript>]\n    let FindKey (f: 'K -> 'T -> bool) (m: Map<'K,'T>) : 'K =\n        m \n        |> Seq.pick (fun kv -> \n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    [<JavaScript>]\n    let rec Fold<'K,'V,'S when 'K : comparison>\n        (f: 'S -> 'K -> 'V -> 'S) (s: 'S) (m: Map<'K,'V>) : 'S =\n            T.Ascend (ToTree m)\n            |> Seq.fold (fun s kv -> f s kv.Key kv.Value) s\n\n    [<JavaScript>]\n    let rec FoldBack (f: 'K -> 'V -> 'S -> 'S) (m: Map<'K,'V>) (s: 'S) : 'S =\n        T.Descend (ToTree m)\n        |> Seq.fold (fun s kv -> f kv.Key kv.Value s) s\n\n    [<JavaScript>]\n    let rec ForAll (f: 'K -> 'V -> bool) (m: Map<'K, 'V>) : bool =\n        m |> Seq.forall (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsEmpty (m: Map<'K, 'V>) : bool = m.IsEmpty\n\n    [<JavaScript>]\n    let rec Iterate (f: 'K -> 'V -> unit) (m: Map<'K, 'V>) : unit =\n        m |> Seq.iter (fun kv -> f kv.Key kv.Value)\n\n    [<JavaScript>]\n    let OfArray (a: ('K * 'V) []) : Map<'K,'V> =\n        a\n        |> Seq.map (fun (k, v) -> {Key = k; Value = v} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfList (kvs: list<'K * 'V>) : Map<'K,'V> = Map.ofSeq kvs\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfSeq (s: seq<'K * 'V>) : Map<'K, 'V> =\n        Map.ofArray (Seq.toArray s)\n\n    [<JavaScript>]\n    let Partition (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> * Map<'K,'V> =\n        let (x, y) =\n            Seq.toArray (T.Ascend (ToTree m))\n            |> Array.partition (fun kv -> f kv.Key kv.Value)\n        (OfTree (T.OfSorted x), OfTree (T.OfSorted y))\n\n    [<JavaScript>]\n    let Pick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : 'T =\n        m |> Seq.pick (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    [<JavaScript>]\n    let Remove (k: 'K) (m: Map<'K, 'V>) : Map<'K, 'V> = m.Remove k\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToArray (m: Map<'K, 'V>) : array<'K * 'V> = Seq.toArray (Map.toSeq m)\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToList (m: Map<'K, 'V>) : list<'K * 'V> = Seq.toList (Map.toSeq m)\n\n    [<JavaScript>]\n    let ToSeq (m: Map<'K, 'V>) : seq<'K * 'V> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> (kv.Key, kv.Value))\n\n    [<JavaScript>]\n    let TryFind (k: 'K) (m: Map<'K, 'V>) : option<'V> = m.TryFind k\n\n    [<JavaScript>]\n    let TryFindKey (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : option<'K> =\n        m |> Seq.tryPick (fun kv ->\n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    [<JavaScript>]\n    let rec TryPick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : option<'T> =\n        m |> Seq.tryPick (fun kv -> f kv.Key kv.Value)\n         \n    [<JavaScript>]\n    let rec Map (f: 'K -> 'V -> 'T) (m: Map<'K,'V>) : Map<'K,'T> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> \n            {Key = kv.Key; Value = f kv.Key kv.Value} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\n\n/// Represents a key-value pair with comparison and equality\n/// ignoring the value and using only the key.\n[<CustomComparison>]\n[<CustomEquality>]\ntype internal Pair<'K,'V when 'K : comparison> =\n    {\n        Key     : 'K\n        Value   : 'V\n    }\n\n    [<JavaScript>]\n    override this.GetHashCode() = hash this.Key\n\n    [<JavaScript>]\n    override this.Equals(other: obj) =\n        this.Key = (other :?> Pair<'K,'V>).Key\n\n    interface System.IComparable with\n        [<JavaScript>]\n        member this.CompareTo(other: obj) =\n            compare this.Key (other :?> Pair<'K,'V>).Key\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.ResizeArray\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.push($x)\">]\nlet push (arr: 'T []) (x: 'T) = ()\n\n[<Direct \"Array.prototype.splice.apply($arr, [$index, $howMany].concat($items))\">]\nlet splice (arr: 'T []) (index: int) (howMany: int) (items: 'T[]) : 'T [] = items\n\n[<WebSharper.Pervasives.ProxyAttribute(typeof<System.Collections.Generic.List<_>>)>]\ntype ResizeArrayProxy<'T> [<JavaScript>] (arr: 'T []) =\n\n    [<JavaScript>]\n    new () =\n        new ResizeArrayProxy<'T>([||])\n\n    [<JavaScript>]\n    new (size: int) =\n        new ResizeArrayProxy<'T>([||])\n\n    [<JavaScript>]\n    new (el: seq<'T>) =\n        new ResizeArrayProxy<'T>(Seq.toArray el)\n\n    [<JavaScript>]\n    member this.GetEnumerator() =\n        (As<seq<obj>> arr).GetEnumerator()\n\n    [<JavaScript>]\n    member this.Add(x: 'T) : unit =\n        push arr x\n\n    [<JavaScript>]\n    member this.AddRange(x: seq<'T>) : unit =\n        Seq.iter this.Add x\n\n    [<JavaScript>]\n    member this.Clear() : unit =\n        splice arr 0 arr.Length [||] |> ignore\n\n    [<JavaScript>]\n    member this.CopyTo(arr: 'T[]) : unit =\n        this.CopyTo(arr, 0)\n\n    [<JavaScript>]\n    member this.CopyTo(arr: 'T[], offset: int) : unit =\n        this.CopyTo(0, arr, offset, this.Count)\n\n    [<JavaScript>]\n    member this.CopyTo(index: int, target: 'T[], offset: int, count: int) : unit =\n        Array.blit arr index target offset count\n\n    [<JavaScript>]\n    member this.Count : int = arr.Length\n\n    [<JavaScript>]\n    member this.GetRange(index: int, count: int) : ResizeArray<'T> =\n        As (ResizeArrayProxy<'T>(Array.sub arr index count))\n\n    [<JavaScript>]\n    member this.Insert(index: int, items: 'T) : unit =\n        splice arr index 0 [| items |] |> ignore\n\n    [<JavaScript>]\n    member this.InsertRange(index: int, items: seq<'T>) : unit =\n        splice arr index 0 (Seq.toArray items) |> ignore\n\n    member this.Item\n        with [<JavaScript>] get (x: int) : 'T = arr.[x]\n        and [<JavaScript>] set (x: int) (v: 'T) = arr.[x] <- v\n\n    [<JavaScript>]\n    member this.RemoveAt(x: int) : unit =\n        splice arr x 1 [||] |> ignore\n\n    [<JavaScript>]\n    member this.RemoveRange(index: int, count: int) : unit =\n        splice arr index count [||] |> ignore\n\n    [<JavaScript>]\n    member this.Reverse() : unit =\n        System.Array.Reverse(arr)\n\n    [<JavaScript>]\n    member this.Reverse(index: int, count: int) : unit =\n        System.Array.Reverse(arr, index, count)\n\n    [<JavaScript>]\n    member this.ToArray() : 'T [] =\n        Array.copy arr\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Set module.\n[<Proxy \"Microsoft.FSharp.Collections.SetModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule internal SetModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private ToTree (s: Set<'T>) =\n        (As<FSharpSet<'T>> s).Tree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private OfTree (t: T.Tree<'T>) =\n        As<Set<'T>> (new FSharpSet<'T>(t))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Add v (s: Set<_>) = s.Add v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Contains v (s: Set<_>) = s.Contains v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Count (s: Set<_>) = s.Count\n\n    [<Inline>]\n    [<JavaScript>]\n    let Difference (s1: Set<_>) (s2: Set<_>) =\n        Set.filter (fun x -> not (s2.Contains x)) s1\n\n    [<Inline>]\n    [<JavaScript>]\n    let Empty<'T when 'T : comparison> : Set<'T> = OfTree T.Empty\n\n    [<Inline>]\n    [<JavaScript>]\n    let Exists f (s: Set<'T>) = Seq.exists f s\n\n    [<JavaScript>]\n    let Filter f (s: Set<'T>) =\n        OfTree (T.OfSorted (Seq.toArray (Seq.filter f s)))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Fold<'T,'S when 'T : comparison>\n        (f: 'S -> 'T -> 'S) (x: 'S) (a: Set<'T>) =\n            Seq.fold f x a\n\n    [<JavaScript>]\n    let FoldBack (f: 'T -> 'S -> 'S) (a: Set<'T>) (s: 'S) : 'S =\n        Seq.fold (fun s x -> f x s) s (T.Descend (ToTree a))\n\n    [<Inline>]\n    [<JavaScript>]\n    let ForAll f (a: Set<_>) = Seq.forall f a\n\n    [<Inline>]\n    [<JavaScript>]\n    let Intersect (s1: Set<'T>) (s2: Set<'T>) = Set.filter s2.Contains s1\n\n    [<Inline>]\n    [<JavaScript>]\n    let IntersectMany (s: seq<Set<_>>) = Seq.reduce Set.intersect s\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsEmpty (a: Set<_>) = a.IsEmpty\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsProperSubset (a: Set<_>) b = a.IsProperSubsetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsProperSuperset (a: Set<_>) b = a.IsProperSupersetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsSubset (a: Set<_>) b = a.IsSubsetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsSuperset (a: Set<_>) b = a.IsSupersetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let Iterate f (s: Set<_>) = Seq.iter f s\n\n    [<Inline>]\n    [<JavaScript>]\n    let Map f (s: Set<_>) = Set.ofSeq (Seq.map f s)\n\n    [<Inline>]\n    [<JavaScript>]\n    let MaxElement (s: Set<_>) = s.MaximumElement\n\n    [<Inline>]\n    [<JavaScript>]\n    let MinElement (s: Set<_>) = s.MinimumElement\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfArray (a: 'T []) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfList (a: list<'T>) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfSeq (a: seq<'T>) = OfTree (T.OfSeq a)\n\n    [<JavaScript>]\n    let Partition f (a: Set<_>) =\n        let (x, y) = Array.partition f (Seq.toArray a)\n        (Set.ofArray x, Set.ofArray y)\n\n    [<Inline>]\n    [<JavaScript>]\n    let Remove v (a: Set<_>) = a.Remove v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Singleton x = Set.add x Set.empty\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToArray (a: Set<_>) = Seq.toArray a\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToList (a: Set<_>) = Seq.toList a\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToSeq (a: Set<_>) : seq<_> = a :> _\n\n    [<Inline>]\n    [<JavaScript>]\n    let Union (s1: Set<_>) (s2: Set<_>) =\n        Set.ofSeq (Seq.append s1 s2)\n\n    [<Inline>]\n    [<JavaScript>]\n    let UnionMany (sets: seq<Set<_>>) =\n        Set.ofSeq (Seq.concat sets)\n\n\n\n\n\n"],
"names": ["x", "t", "spine", "Seq", "m", "k", "this", "i", "value", "T", "source", "s"],
"mappings": ";;;;;;;;;aAoNQ,iBAAK;;cAAA;;eAAWA,EAAC;QAAA;OAAA,CAAE,CAAC,CAAC,CAAC,CAAA;;;;YAtJtB;YACc,IAAI;YACJ,IAAI;aACJ,KAAK;cACL,CAAC,CAAG,cAAY,IAAI,SAAJ,IAAI,QAAU,KAAK,SAAL,KAAK,QAAC;aACpC,CAAC,EAAS,IAAI,SAAJ,IAAI,OAAA,EAAS,KAAK,SAAL,KAAK,OAAA;OACzC;;;;;SA6BQ,GAAG,CAAG,GAAG,CAAG,CAAC;SACnB,EAAE,EAAI,CAAC;;UACN,IAAK;;;;eAEQ,CAAC,GAAG,CAAG,GAAG,EAAI,CAAC,GAAA;aACf,mBAAM,IAAI,CAAC,GAAG,CAAE,MAAM,CAAG,CAAC,CAAC;cAC3B,mBAAM,IAAI,CAAE,MAAM,CAAG,CAAC,CAAE,GAAG,CAAA;UAFpC,oBAGG,WAAA,IAAI,CAAE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAHrB;;aAJV,CAAE;;;;YAwHN,EAAK,CAAc,oBAAO,CAAC,CAAC,CAAC,CAAA,IAAC,MAAC,CAAC;;;;;UAhJ5B;;;UADS,SAAC,GAAA;aAAD,SAAC,GAAA;UACPC,EAAS,MAAA;;YACF,KAAK;;cAEgB,KAFhB,GAEwC,GAAA;kBAAxB,KAFhB,GAEwC;iBAAxB,KAFhB,GAEwC,GAAA;cAAxB;;eAAM,CAAAA,EAAC,CAAG,CAAA,KAAK,CAAEC,MAAK,CAAA,CAAC;YAAC;;;;cADxB;;YAAI;;WADzB,EAAK;;;;WAIX,IAAO,CACF,GAAG,CAAE,CAAAD,EAAO,MAAA,CAAE;;aAAC,CAAAA,EAAM,KAAA,CAAEA,EAAM,KAAA,CAAA;aAAK,KAAK;WAAA,CAAA,CAAC,CACxC,GAAG,CAAE,CAAAA,EAAM,KAAA,CAAE;;aAAC,CAAAA,EAAM,KAAA,CAAEA,EAAO,MAAA,CAAA;aAAK,KAAK;WAAA,CAAA,CAAC;;cARxC,CAAC;OAQuC;aARrD,WASW,GAAG,CAAE,CAAA,CAAC,CAAE;;QAAE,CAAA,CAAC;;;;;YAyCF,EAAI;SACR,CAAC;WACE,IAAI;YACjB,IAAI;;WACHA,EAAS,MAAA;;YAAc,KAAA,KAAK;;;;qBACrB,kBAAQ,CAAC,CAACA,EAAC,KAAK,CAAA;aAAhB,UAAgB,GAAhB,CAAgB;;eACP,KAAA,KAAK;;;;eADd,UAAgB,GAAhB,CAAgB;;cAGlB,KAAa,SAAE,CAAA,IAAI,CAAEA,EAAC,KAAK,CAAEA,EAAC,KAAK,CAAA,CAAC;iBAApCA,GACKA,EAAC,MAAM;;;;cAEZ,KAAa,SAAE,CAAA,KAAK,CAAEA,EAAC,KAAK,CAAEA,EAAC,MAAM,CAAA,CAAC;iBAAtCA,GACKA,EAAC,KAAK;;;YAPT,EAAgB;;;YALlB,CAaXA,EAAC,CAAE,KAAK,CAbQ;;WARjB;;;YAAU,YAAYE,aAAa,aAAa,IAAI,CAAA,CAAC,CAAC;aAAtD,0CAAuD;MAAA;;;;mBAwEtC,oBAAO,CAAC,CAAC,CAAC,CAAA;SAAvB,YAAU,GAAA;YAAV,YAAU,GAAA;aAAVF,EACQ,MAAA,CACR,qBAAQ,KAAK,CAAE,oBAAO,CAAC,CAAC,IAAK,CAAC,IAAK,CAAA,CAAC,CAEpC,qBAAQ,KAAK,CAAE,oBAAQ,CAAA,OAAO,CAACA,EAAC,KAAK,GAAC,CAAC,CAAA,CAAEA,EAAC,KAAK,CAACA,EAAC,MAAM,CAAA,CAJ7C;;;;;QA5CQ;;cAAO,CAAC,SAAD,CAAC;OAAA;SACd,CAAC;YACT,CAAC,IAAI,cAAA,KAAK,CAAO,CAAG,CAAC;kBAEf,WAAA,KAAK,CAAE,CAAC,CAAC;UAAT,UAAS,GAAA;;YAkBX,UAcgB,GAAA;WAdhB,UAcgB,GAAA;YAdb,CAAC,CAACA,EAAC,CAAA,CAAG,CAAC,CAAC,CAAC,CAAA,CAAG,CAAC;;cACT,CAAC,CAACA,EAAC,KAAK,CAAA,GAAG,CAAC,CAACA,EAAC,MAAM,CAAA,CAAG,CAAC;;eAEfA,EAAC,KAAK;gBAAV,oBACG,CAAC,KAAK,CACJ,oBAAOD,EAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA,CACjB,oBAAOC,EAAC,KAAK,CAAC,CAAC,MAAM,CAACA,EAAC,MAAM,CAAA,CAHjC;;;;gBAML,oBAAOA,EAAC,KAAK,CACJ,oBAAOD,EAAC,CAAC,CAAC,CAACC,EAAC,KAAK,CAAA,CAClBA,EAAC,MAAM,CAAA;;cAVnB,EAUmB;;;;cAGnB,oBAAOD,EAAC,CAAC,CAAC,CAACC,EAAC,CAAA;;WAdhB,EAcgB;;;;YA9BhB,UAcgB,GAAA;WAdhB,UAcgB,GAAA;YAdb,CAAC,CAACA,EAAC,CAAA,CAAG,CAAC,CAAC,CAAC,CAAA,CAAG,CAAC;;cACT,CAAC,CAACA,EAAC,MAAM,CAAA,GAAG,CAAC,CAACA,EAAC,KAAK,CAAA,CAAG,CAAC;;gBAEfA,EAAC,MAAM;gBAAX,oBACIG,EAAC,KAAK,CACL,oBAAOH,EAAC,KAAK,CAACA,EAAC,KAAK,CAACG,EAAC,KAAK,CAAA,CAC3B,oBAAOJ,EAAC,CAACI,EAAC,MAAM,CAAC,CAAC,CAAA,CAHtB;;;;gBAML,oBAAQH,EAAC,KAAK,CACNA,EAAC,KAAK,CACL,oBAAOD,EAAC,CAACC,EAAC,MAAM,CAAC,CAAC,CAAA,CAAC;;cAVhC,EAUgC;;;;cAGhC,oBAAOD,EAAC,CAACC,EAAC,CAAC,CAAC,CAAA;;WAdhB,EAcgB;;OAhBdA,GAAA,CAAS;;aAJnBA,EAAe;;;;;mBAqDF,oBAAO,CAAC,CAAC,GAAG,CAAA;QAAzB,YAAU,GAAA;YAAV,YAAU,GAAA;SACX,CAAS,MAAA;;UACR,GAAG;;;;WAEA,CAAS,MAAM,MAAA;;aACd,qBAAQ,KAAK,CAAC,CAAC,KAAK,CAAA;;;;aACnB,CAAS,KAAK,MAAA;;eACf,qBAAQ,KAAK,CAAC,CAAC,MAAM,CAAA;;;;mBAErBE,YAAY,6BAAO,CAAC,KAAK,CAAA,CAAG,6BAAO,CAAC,MAAM,CAAA,CAAC;iBACxCA,aAAA,MAAW,CAAA;eACX,mBAAA,IAAQ,GAAR,IAAQ,UAAA;eAFX,qBAGW,KAAK,CAAbF,EAAa,CAAA;;aANpB,EAMoB;;UARpB,EAQoB;;aAZpB,CAAU;;;;;QA2BN,CAAK,oBAAO,CAAC,CAAC,CAAC,CAAA,IAAC;aAApB,CACQ,MAAA,CAAM;;OAAI,CAAM;;UAAK,CAAC,KAAK;OADlC;;;;;;;QCjIO,IAAG,gBAAD,CAAC,CAAA;SACR,IAAsB,KAAA,gBAAC,CAAC,CAAA;;UACvB,mBAAS,mDAAmD,CAAA;;;;QAEtD,IAAI,KAAA,CAAC,CAAC,EAAE;WAAe,CAAC;WAAE,CAAC;SAAC;UAAjC,KACD,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC,CAAA;;aALlB,CAAC;;;;MASL,IAAc,MAAN,EAAM;MACd,IAAU,OAAD,CAAC;;;;;aAIV,IAAsB,KAAA,gBAAE,IAAG,gBAAD,CAAC,CAAA,CAAC;;;;;QAsBpB,wBAAkB,IAAI,KAAA,CAAA;aAA1B,eACH,CAAc,CADV;;;;;QAKG,IAAG,gBAAD,CAAC,CAAA;SACR,IAAsB,KAAA,gBAAC,CAAC,CAAA;;QACvB,gBAAU,IAAI,KAAA,CAAC,CAAC,CAAA;QAChB,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC;UADlB,IAEI;;;;UAEJ,KAAK;;aANL,CAAC;;;;;SAnBO,IAAG,gBAAD,CAAC,CAAA;SACR,IAAsB,KAAA,gBAACI,EAAC,CAAA;;UACA,IAAO,KAAA,CAACA,EAAC,CAAA;UAA5B,CACH,EADI;;;;UAGL,2BAAa;;aALb,CAAC;;;;;QAOG,IAAG,gBAAD,CAAC,CAAA;MACX,CAAQ,IAAsB,KAAA,gBAAC,CAAC,CAAC,CAC7B,KAAA,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC,CAAA,CADtB,IACsB;MAChB,IAAI,KAAA,CAAC,CAAC,EAAE;SAAe,CAAC;SAAE,CAAC;OAAC;;;;;;8BA5CtC,gBAAsB,UAAU,CAAG;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG;;cAAA,eAAA,GAAI,CAAA;OAAA,CAAC;;;;8BAI5C,gBACI,UAAU,CACV;;cAAA;;eAAA,QAAe,QAAf,CAAe,CAAf,CAAe,CAAA;QAAA;OAAA,CACf;;cAAA,QAAoB,aAApB,CAAoB,CAAA;OAAA,CACvB;;;;8BAZD,gBAAsB,QAAQ,CAAC;;;;8BAX1B,gBAAsB,EAAI,CAAG;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG;;cAAA,eAAA,GAAI,CAAA;OAAA,CAAC;;;;8BAGzB,kBAAuB;;;;8BAIzC,gBAAsB,EAAI,CAAE;;cAAA;;eAAA,QAAe,QAAf,CAAe,CAAf,CAAe,CAAA;QAAA;OAAA,CAAE;;cAAA,QAAoB,aAApB,CAAoB,CAAA;OAAA,CAAC;;;;;yBAzBhE,EAAU;MAKX,CAAI,MAAJ,IAAI;MAET,CAAqB,OAAD,CAAC;MACrB,CAA0B,MAAN,EAAM;iBAMd,eAAA,IAAI,CAAA;;;aAAJ,UAAI,WAAA;;WAAJ,UAAI,cAAA;YACE,CAAC,EAAI;SAAb,CAAI,KAAA,CAAE,CAAO,gBAAPL,EAAO,CAAA,EAAE,CAAC,EAAM;;;;;OAD7B,UAC6B,oBAD7B,UAC6B,UAAA,CAD7B,IAC6B;;;;;;;;aA9BhC,mBAAS,kDAAkD,CAAA;;;;;;;QCsBlC,IAAI,KAAA;SAAU;WAAK,CAAC;aAAQ,CAAC;QAAC;aAAnD,cAAqB,iBAAQA,EAAsB,CAAtB,CAAsB,CAAA,CAAC;;;;aAmDhD,gBAAiB;;cAAA;;eACb,kBAAS,CAAiB,CAAG,CAAiB,CAAC;QAAA;OAAA,CAC/C,IAAI,CACH,KAAoB,CAAA;;;;;QAlD7B,IAAI,KAAA;QAAe;WAAK,CAAC;;QAAuB;aAAhD,sBAAQ,CAAwC,CAAxC,CAAwC,CAAA;;;;aAwC5C,IACA,YAAM,GAAG,KAAK,YAAM,CACrBG,aAAc;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG,IAAI,CAAC,KAAK,CAAA,CAD/B,KADS;;;;;cAVO;;aACR;UAAsB,EAAE,IAAI;UAAE,EAAE,MAAM;QAAC;OAAA;aAF3C,6BAAS,IAAI,KAAA,CAAA;QACVA,SAAA,OACyC,CADzC,MACyC,CAAA;aAH5C,eAIJ,CAAC,CAJI;;;;aAQL,eAAMA,aAAY,IAAI,CAAA,CAAC;;;;;QAlBT,IAAI,KAAA;SAAa;WAAK,CAAC;;QAAqB;aAA1D,cAAc,oBAAQE,EAAoC,CAApC,CAAoC,CAAA,CAAC;;;;;QAI3D,IAAI,KAAA;QACS;WAAK,CAAC;;QAAqB;cACzB;;cAAU,EAAE,MAAM;OAAA;aAD9B,qBAAA,CAAqC,CAArC,CAAqC,CAAA;aADxC,WAEG,OAA+B,CAA/B,MAA+B,CAAA;;;;;WArBV,IAAI,KAAA;aAAZ,uBAAY;;;;aAGV,IAAc,KAAA,MAAA;;;;;iBAKtB,IAAI,SAAS,CAAC,CAAA;SAAd,UAAc;;UAGhB,mBAAS,kDAAkD,CAAA;;;;UAFjD,UADM,GACL;UAAD,CAAC;;aADT,CAAc;;;;aAnBT,IAAI,KAAA;;;;;;yBATjB,EAAS;MAGlB,CAAI,MAAJ,IAAI;;;;;8BAGiB,cAAmB,gBAAQ,CAAC,CAAA,CAAC;;;;;;aCS3C,eAAkB,iBAAM,CAAC,CAAC,IAAI,KAAA,CAAA,CAAC;;;;aA8D3B,gBAAgB;;cAAA;;eAAA,kBAAA,EAAO,CAAP,EAAO,CAAA;QAAA;OAAA,CAAC,IAAI,CAAE,KAAuB,CAAA;;;;aA3DpC,sBAAW,CAAC,CAAC,IAAI,KAAA,CAAA;;;;aA+CtC,IAAI,YAAM,GAAG,KAAwB,YAAO,CACzCF,aAAc;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG,IAAI,CAAE,KAAuB,CAAA,CADlD,KACmD;;;;aATnD,eAAC,6BAAS,IAAI,KAAA,CAAA,CAAiB;;;;YAI/B,WAAW,CAAI,eAACA,aAAY,IAAI,CAAA,CAAgB;;;;aA9BhD,IAAI,YAAY,CAAC,CAAA,CAAI,IAAI,YAAM,CAAG,CAAC,YAAM,CAAzC,KAAyC;;;;aAIzC,IAAI,cAAc,CAAC,CAAA,CAAI,IAAI,YAAM,CAAG,CAAC,YAAM,CAA3C,KAA2C;;;;aAI3CA,YAAW;;cAAA,CAAC,UAAD,KAAU,CAAA;OAAA,CAAC,IAAI,CAAA;;;;;aAI1BA,YAAW;;cAAAG,KAAI,UAAJ,KAAa,CAAA;OAAA,CAAC,CAAC,CAAA;;;;aAU1B,eAAkB,oBAAS,CAAC,CAAC,IAAI,KAAA,CAAA,CAAC;;;;aA9ClC,8CAAW,IAAO,CAAE,CAAC,GAAA;;;;;WAcG,IAAI,KAAA;aAAZ,uBAAY;;;;aAGV,IAAc,KAAA,MAAA;;;;aAsBPH,UAAU,4BAAU,IAAI,KAAA,CAAA,CAAC;;;;aAGzBA,UAAU,6BAAS,IAAI,KAAA,CAAA,CAAC;;;;aAtBzB,IAAI,KAAA;;;;aAhB5B;;cAAyB,CAAC;QAAV,IAAO,CAAG;;;;;8BARX,eAAkB,cAAM,CAAC,CAAA,CAAC;;;;;yBANxC,EAAS;MAGR,CAAI,MAAJ,IAAI;;;;;;;aC4DkB,IAAQ,KAAJ,IAAI,CAAA;;;;MAIhC,IAAe,MAAP,wCAAA,EAAO,CAAA;MACf,IAAU,OAAD,CAAC;;;;;;UAIA,IAAI,KAAA,CAAE,IAAI,gBAAC,IAAI,CAAA,CAAC;aAAtB,GACE,EAAK,IAAI,CAAM,KAAK,CAAM,IAAW,aAAX,IAAW,CAAX,GAAW,CADpC;;;;;QAKS,CAAC;UACP,mBAAO,IAAI,KAAA,CAAA;aACb,CAAC,KAAI,GAAG,OAAO,CAAG,CAAC;OACvB,WAAA,GAAG,CAAEI,EAAC,CAAK,GAAG,CAAEA,EAAC,CAAC,CAAA;;;;;;;iBAOV,eAAA,EAAE,CAAA;;;aAAF,UAAE,WAAA;;cAAF,UAAE,cAAA;eACV,IAAC,QAAQ,IAAI,CAAC;;;;;OADlB,UAC4B,oBAD5B,UAC4B,UAAA,CAD5B,IAC4B;;aADhB,CAAE;;;;aAKf,eAAC,mBAAmB,IAAI,KAAA,CAAA,CAAkB;;;;;YAa7B,kBAAa,EAAE,CAAE,IAAM,OAAA,CAAE,IAAI,KAAA,CAAC;UAChC,mBAAO,IAAI,KAAA,CAAA;YACb,CAAC,IAAI,GAAG,OAAO,CAAG,CAAC;YACZ,GAAG,CAAE,CAAC,CAAC;aACf,KAAK,UAAU,IAAI,CAAC;UAAI,CAAA,KAAG;;gBAC1B,IAAC,QAAQ,IAAI,CAAC;WAAI,KAAAC,MAAM;;;;WAD5B,IAAmC;;;;;;;;YAKrB,aAAA,EAAW,CAAA;aAC7B,IAAK,MAAA,CAAG,cAAA,KAAK,CAAO,CAAI,IAAC,YAAY,KAAK,CAAC,CAA3C,KAA2C;;;;;YAIzB,aAAA,EAAW,CAAA;aAC7B,IAAK,MAAA,CAAG,cAAA,KAAK,CAAO,CAAI,IAAC,cAAc,KAAK,CAAC,CAA7C,KAA6C;;;;;YAIjC,kBAAa,EAAE,CAAE,IAAM,OAAA,CAAE,IAAI,KAAA,CAAC;gBACL;;cAAA,KAAK,UAAL,KAAc,CAAA;OAAA;YAAnD,mBAAe,IAAI,KAAA,CAAA;aADfL,YACoB,SAA2B,CAA3B,KAA2B,CAD1C;;;;;gBAKQ;;cAAA,CAAC,UAAD,KAAU,CAAA;OAAA;aAArBA,YAAA,SAAqB,CAArB,EAAqB,CAAA;;;;;gBAIV;;cAAA,CAAC,UAAD,KAAU,CAAA;OAAA;aAArBA,YAAA,SAAqB,CAArB,EAAqB,CAAA;;;;;QAInB,IAAI,gBAAC,IAAI,CAAA;UACP,IAAI,KAAA,CAAE,CAAC,CAAC;SACf,GAAG,EAAK,IAAI;;UAAM,KAAK;;;;WACnB,IAAS,WAAT,IAAS,CAAT,GAAS,CAAA;;UACR,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC;aAAlB,IACI;;;;aACH,KAAK;;UAHV,EAGU;;aANV,CAAC;;;;;UAUK,mBAAO,IAAI,KAAA,CAAA;YACb,CAAC,IAAI,GAAG,OAAO,CAAG,CAAC;YACZ,GAAG,CAAE,CAAC,CAAC;UACf,IAAI,CAAC,IAAI,CAAA;;eACR,IAAC,QAAQ,IAAI,CAAC;WAAI,KAAA,KAAM;;;;WAD5B,IAAiB;;;;;;;;YAKT,kBAAa,EAAE,CAAE,IAAM,OAAA,CAAE,IAAI,KAAA,CAAC;aAAtC,IACH,YAAM,GAAG,KAAK,YAAM,CAAI,IAAC,cAAc,KAAK,CAAC,CAA9C,KADS;;;;;iBAKG,eAAA,EAAE,CAAA;;;aAAF,UAAE,WAAA;;cAAF,UAAE,cAAA;YACP,IAAC,UAAU,IAAI,CAAA;;iBACd,IAAC,QAAQ,IAAI,CAAC;cAAI,KAAA,KAAM;;;;kBAExB,IAAC,KAAK,IAAI,CAAC;cAAI,KAAAK,MAAM;;;;;;OAJ7B,UAI6B,oBAJ7B,UAI6B,UAAA,CAJ7B,IAI6B;;aAJjB,CAAE;;;;;iBAQF,eAAA,EAAE,CAAA;;;aAAF,UAAE,WAAA;;cAAF,UAAE,cAAA;eACV,IAAC,KAAK,IAAI,CAAC;;;;;OADf,UACyB,oBADzB,UACyB,UAAA,CADzB,IACyB;;aADb,CAAE;;;;;QAtIN,IAAI,gBAAC,IAAI,CAAA;UACP,IAAI,KAAA,CAAE,CAAC,CAAC;SACf,GAAG,EAAK,IAAI;;QACX,IAAI,KAAA,CAAE,CAAC,EAAK,CAAM,IAAI,CAAG;QACzB,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC;UADlB,IAEI;;;;WAED,IAAW,aAAX,IAAW,CAAX,GAAW,CAAA;;aAAe,KAAK;;;;gBAC9B,GAAG,MAAM,IAAI,CAAA;UACb,IAAkB,OAAT,IAAK,MAAA,CAAG,CAAC;aADlB,IAEI;;UAHR,EAGQ;;aAVR,CAAC;;;;;QAzBW,IAAI;QACJ,CAAC;QACT,GAAG,OAAO;YACZ,CAAC,CAAI,CAAC,CAAG,CAAC,CAAV,KAAU;;QACZ,CAAG,IAAM,kBAAC,GAAG,CAAE,CAAC,CAAC,GAAC,IAAI,CAAA,CACb,EAAA,KAAK,CAEL,EAAA,CAAC,CAAG,CAAC;;YAPN,CAQR,CARS;;;;;QAYG,IAAI;QACJ,CAAC;QACT,GAAG,OAAO;YACZ,CAAC,CAAI,CAAC,CAAG,CAAC,CAAV,KAAU;;WACT,CAAA,IAAM,kBAAC,GAAG,CAAE,CAAC,CAAC,GAAC,IAAI,CAAA;;gBACP,CAAC;aAAZ,EAAgB;gBAAhB,GAAG,cAAH,GAAG,QAAW,CAAC;YAAf,EACK,KAAK;;;;YAEL,EAAA,CAAC,CAAG,CAAC;;;YARN,CASR,CATS;;;;aA8DA,IAAK,MAAA;;;;;8BA/BA,kBAAqB,IAAI,CAAG;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG;;cAAA,eAAA,GAAI,CAAA;OAAA,CAAC;;;;8BAIvD,kBAAqBL,YAAS,CAAE;;cAAA;;eAAA,QAAe,QAAf,CAAe,CAAf,CAAe,CAAA;QAAA;OAAA,CAAE;;cAAA,QAAoB,aAApB,CAAoB,CAAA;OAAA,CAAC;;;;8BAPjE,kBAAiBA,YAAS,CAAG;;cAAA;;eAAA,iBAAA,CAAC,CAAD,CAAC,CAAA;QAAA;OAAA,CAAG;;cAAA,eAAA,GAAI,CAAA;OAAA,CAAC;;;;8BAW3C,kBAAqB,IAAI,CAAE;;cAAA;;eAAA,QAAe,QAAf,CAAe,CAAf,CAAe,CAAA;QAAA;OAAA,CAAE;;cAAA,QAAoB,aAApB,CAAoB,CAAA;OAAA,CAAC;;;;;yBA/DxE,EAAY;MAIJ,CAAM,QAAN,MAAM;MACN,CAAI,MAAJ,IAAI;MAET,CAAsC,MAAlB,wCAAA,EAAkB,CAAA;MACtC,CAAqB,OAAD,CAAC;iBAyCT,eAAA,IAAI,CAAA;;;aAAJ,UAAI,WAAA;;WAAJ,UAAI,cAAA;eAAI,CAAK,KAAD,CAAC,CAAA;;;;;OAAtB,UAAgC,oBAAhC,UAAgC,UAAA,CAAhC,IAAgC;;;;;;;;;;;;;;;;;;;;;cCvBf,IAAE;;;;OAJtB,IAAW,GAAN,IAAC,EAAA,EAAK;aAAX,kBACA,IAAC,EAAA,CAAI,IAAI,CAAA;;;;cALS,IAAC,EAAA,EAAM;;;;;;0BAJ5B,EAAe;OAChB,CAAiB,GAAD,CAAC;;;;;;;;cAgDA,KAAK,EAAK;YACZ;UAAQ,KAAK;UAAC,MAAM;UAAC,KAAK;QAAA;OACrC,iBAAG,KAAK,EAAK,CAAG,IAAI,CAAA,CAAM,KAAA,IAAS,GAAJ,IAAI,CAAA,CAAnC,IAAmC;OAC3B,KAAK,GAAC,IAAI;UACf,kBAAA,MAAM,CAAI,IAAI,CAAA;;SAAc,MAAM,GAAC,IAAI;WAAnB,IAAmB;;;;WAA1C,IAAsB;;OACtB,IAAU,GAAL,IAAC,EAAA,CAAG,CAAC;cALN,IAAM;;;;;aAUE,MAAM,EAAS;YAChB;UAAQ,KAAK;UAAC,MAAM;UAAC,KAAK;QAAA;OACrC,iBAAG,MAAM,EAAS,CAAG,IAAI,CAAA,CAAM,KAAA,IAAS,GAAJ,IAAI,CAAA,CAAxC,IAAwC;OAChC,MAAM,GAAC,IAAI;UAChB,kBAAA,KAAK,CAAI,IAAI,CAAA;;SAAc,KAAK,GAAC,IAAI;WAAlB,IAAkB;;;;WAAxC,IAAqB;;OACrB,IAAU,GAAL,IAAC,EAAA,CAAG,CAAC;cALN,IAAK;;;;;UAUN,IAAC,EAAA,GAAG,CAAC;;cACO;YAAQ,IAAI;YAAC,IAAI;YAAC,KAAK;UAAA;SAClC,IAAS,GAAJ,IAAI;SACT,IAAM,GAAD,IAAC,EAAA;SACN,IAAM,GAAD,CAAC;WAHF,IAAI;;;;WAKP,IAAI,WAAW,IAAC,EAAA,CAAE,KAAK,CAAC;;cAN7B,CAM6B;;;;;UAI1B,IAAC,EAAA,GAAG,CAAC;;cACO;YAAQ,IAAI;YAAC,IAAI;YAAC,KAAK;UAAA;SAClC,IAAS,GAAJ,IAAI;SACT,IAAM,GAAD,IAAC,EAAA;SACN,IAAM,GAAD,CAAC;WAHF,IAAI;;;;WAKP,IAAI,UAAU,IAAC,EAAA,CAAE,KAAK,CAAC;;cAN5B,CAM4B;;;;OAI5B,IAAM,GAAD,CAAC;OACN,IAAS,GAAJ,IAAI;OACT,IAAS,GAAJ,IAAI;;;;;;aAIW,KAAK;YACN,IAAC,EAAA;aACd,kBAAA,IAAI,CAAI,IAAI,CAAA,CAAI,CAAI,KAAK,CAAzB,KAAyB;;SAC3B,IAAO,EAAM,EAAK,KAAK,CAAe,MAAA,IAAI,CAC7B,KAAA,IAAI,EAAK;;cAJd,KAAK;;;;;YASE,IAAC,EAAA;gBACG,IAAI;aACrB,QAAQ,CAAI,kBAAA,IAAI,CAAI,IAAI,CAAA,CAAxB,KAAwB;;SAC1B,IAAO,EAAM,EAAK,KAAK,CACP,SAAA,KAAK,CAET,KAAA,IAAI,EAAK;;cANb,QAOD,CAAM,IAAI,CAAM,IAPX;;;;;YAWG,IAAC,EAAA;gBACG,IAAI;aACrB,QAAQ,CAAI,kBAAA,IAAI,CAAI,IAAI,CAAA,CAAxB,KAAwB;;SAC1B,IAAO,EAAM,EAAK,KAAK,CACP,SAAA,KAAK,CAET,KAAA,IAAI,EAAS;;cANjB,QAOD,CAAM,IAAI,CAAM,IAPX;;;;cAWhB,MAAoB,IAAO,CAAC;;;;;cAIf,IAAI,EAAS;aACd,IAAI,EAAK;UAClB,iBAAA,MAAM,CAAG,IAAI,CAAA;;WAAM,KAAA,IAAU,GAAL,KAAK,CAAA;;;;SAAc,MAAM,GAAC,KAAK;WAApB,KAAoB;;UACvD,iBAAA,KAAK,CAAG,IAAI,CAAA;;YAAM,KAAA,IAAW,GAAN,MAAM,CAAA;;;;SAAc,KAAK,GAAC,MAAM;YAApB,MAAoB;;OAC1D,IAAU,GAAL,IAAC,EAAA,CAAG,CAAC;;;;;;YAIC,IAAI,MAAM,KAAK,CAAC;UACxB,iBAAA,IAAI,CAAG,IAAI,CAAA;;WAAM,KAAK;;;;SAErB,IAAI,QAAQ,IAAI,CAAC;WAAjB,IACI;;cAJJ,CAAI;;;;cAOgB,IAAI,QAAQ,IAAC,EAAA,CAAC;;;;cAGf,IAAI,QAAQ,IAAC,EAAA,CAAC;;;;cA/GrB,IAAC,EAAA;;;;cAID,IAAC,EAAA;;;;cAIF,IAAC,EAAA;;;;;+BAZXM,QAAUN,YAAS,CAAC;;;;;0BAjB5B,EAAS;OACV,CAAiB,GAAD,CAAC;OACjB,CAAoB,GAAJ,IAAI;OACpB,CAAoB,GAAJ,IAAI;UAEP,eAAA,IAAI,CAAgB;UAC1B,EAAE,WAAW;;SACZ,CAAiC,GAA5B;YAAQ,IAAI;YAAC,IAAI;YAAC,EAAE,cAAQ;UAAA;SACjC,CAAM,GAAD,CAAC,EAAA;WADN,KAEA,CAAM,GAAD,CAAC,CAAA;;;;WAHV,IAAqB;;aAIf,EAAE,WAAW;;cACJ;YAAQ,CAAC,EAAA;YAAC,IAAI;YAAC,EAAE,cAAQ;UAAA;SAC5B,CAAC,EAAA,GAAC,IAAI;SACd,CAAS,GAAJ,IAAI;SACT,CAAU,GAAL,CAAC,EAAA,CAAG,CAAC;;;;;;;;;;gBCxBG;;aAAU,CAAA,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA;OAAA;aAAvCA,YAAA,SAAuC,CAAvC,CAAuC,CAAA;;;;;gBAK7B;;aAAU,CAAA,CAAC,CAAC,EAAE,IAAI,GAAC,EAAE,MAAM,CAAA;OAAA;aAD1C,6BAAU,CAAQ,WAAA,CAAC;cAChBA,YAAA,SAAwC,CAAxC,MAAwC,CAAA;WACxCA,aAAAO,OAAW,CAAA;QACX,mBAAA,IAAU,GAAV,IAAU,UAAA;aAHb,cAIG,CAAM,CAAA;;;;;cASI;;aACT,CAAG,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA,CAAM;;WAAK,EAAE,EAAI;QAAA,CAAM;;QAAI;OAAA;aADhDP,UAAA,OACgD,CADhD,CACgD,CAAA;;;;;aAMlC;;cAAA;;cAAY,EAAA,CAAC,CAACQ,EAAC,GAAC,EAAE,IAAI,GAAC,EAAE,MAAM,CAAA;QAAA;OAAA;aAD5C,6BAAU,CAAQ,WAAA,CAAC;aAChBR,UAAA,MAA4C,CAAD,CAAC,CAA5C,MAA4C,CAAA;;;;;aAKtC;;cAAA;;cAAY,EAAA,CAAC,CAAC,EAAE,IAAI,GAAC,EAAE,MAAM,GAACQ,EAAC,CAAA;QAAA;OAAA;aAD5C,4BAAW,CAAQ,WAAA,CAAC;aACjBR,UAAA,MAA4C,CAAD,CAAC,CAA5C,MAA4C,CAAA;;;;;gBAI9B;;aAAU,CAAA,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA;OAAA;aAAvCA,YAAA,SAAuC,CAAvC,CAAuC,CAAA;;;;;aAQ7B;;aAAU,CAAA,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA;OAAA;aAArCA,UAAA,MAAqC,CAArC,CAAqC,CAAA;;;;;cA6D9B;;cACR;YAAO,EAAE,IAAI;cAAU,CAAA,CAAC,CAAC,EAAE,IAAI,GAAC,EAAE,MAAM,CAAA;SAAC;OAAY;aAFzD,6BAAU,CAAQ,WAAA,CAAC;WAChBA,SAAA,OACuD,CADvD,MACuD,CAAA;QACvD,mBAAA,IAAO,CAAA;aAHV,cAIG,CAAM,CAAA;;aA5DT;;;cACY;;;SAAK,SAAC,GAAA;SAAD,SAAC,GAAA;cAAD;YAAgB,CAAC;cAAU,CAAC;SAA3B;OAAwC;WAAvDA,SAAA,OAAuD,CAAvD,CAAuD,CAAA;QACvD,mBAAA,IAAO,CAAA;aAFV,cAGG,CAAM,CAAA;MAAA;;;;gBAee;;aAAU,CAAA,CAAC,CAAC,EAAE,IAAI,GAAC,EAAE,MAAM,CAAA;OAAA;YAD/CA,aAAa,6BAAU,CAAQ,WAAA,CAAC,CAAC;mBAC9B,iBAAA,SAA6C,CAA7C,KAA6C,CAAA;QAFhD,YAAM,GAAA;QAAN,YAAM,GAAA;YAAN,CAGH,cAAQ,mBAAW,CAAC,GAAD,CAAC,UAAA,CAAC,CAAE,cAAQ,mBAAW,CAAC,GAAD,CAAC,UAAA,CAAC,CAHnC;;;;;cAOK;;aAAU,CAAA,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA;OAAA;aAArCA,UAAA,OAAqC,CAArC,CAAqC,CAAA;;WAgB1C;;;cACY;;aAAW,CAAA,EAAE,IAAI,CAAE,EAAE,MAAM,CAAA;OAAC;aADxC,6BAAU,CAAQ,WAAA,CAAC;aAChBA,SAAA,OAAsC,CAAtC,MAAsC,CAAA;MAAA;;;aAGO,CAAC,SAAS,CAAC,CAAA;;;;;cAIzC;;aACd,CAAG,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA,CAAM;;WAAK,EAAE,EAAI;QAAA,CAAM;;QAAI;OAAA;aAD9CA,aAAA,OAC8C,CAD9C,CAC8C,CAAA;;;;;cAIjC;;aAAU,CAAA,CAAC,CAAC,EAAE,EAAI,GAAC,EAAE,EAAM,CAAA;OAAA;aAAxCA,aAAA,OAAwC,CAAxC,CAAwC,CAAA;;;;aJvH7C;;;QACIA,aAAAA,WAAG;;cAAAA,aAAc;;;UAAA,UAAoB,GAAA;UAApB,UAAoB,GAAA;cAAC,CAClC;aAAQ,CAAC;eAAU,CAAC;UAAE,CAAA;QADW,CAApB,eAAe;;eAAA,KAAG,GAAA;QAAA,CAAC,CAAC,CAAA,CACX;OAAA,CAAG,CAAA;MACjC,mBAAkB,CAAC,CAAA;aAHf,mBAIO,CAAC,GAAD,CAAC,UAJP;MAIO;;;;;aKMR,kBAAQ,IAAI,IAAI,CAAC,KAAsB,IAAK,CAAA;;;;aALhD,iBAAA,IAAI,IAAI,CAAG,KAAsB,IAAK,CAAA;;;;aAJZ,eAAK,IAAI,IAAI,CAAA;;;;;;;cCiBvC,IAAQ,IAAA,MAAC,CAAC,CAAA;;;;;cAIVA,UAAS;;eAAAG,KAAI,KAAJ,KAAQ,CAAA;QAAA,CAAC,CAAC,CAAA;;;;;aAInB,mBAAO,IAAG,IAAA,CAAC,CAAC,CAAC,cAAA,IAAG,IAAA,CAAO,CAAC,EAAI,CAAA;;;;;cAI5B,IAAI,SAAQ,GAAG,CAAE,CAAC,CAAC;;;;cAInB,IAAI,SAAQ,CAAC,CAAE,GAAG,CAAE,MAAM,CAAE,IAAI,YAAM,CAAC;;;;cAIvC,YAAW,IAAG,IAAA,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAA;;;;cAxBxC,eAAC,IAAgB,IAAA,CAAiB;;;;cA+BlC,uBAAyB,WAAU,IAAG,IAAA,CAAC,KAAK,CAAC,KAAK,CAAA,CAAC;;;;;aAInD,mBAAO,IAAG,IAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAG,KAAK,CAAG,CAAA;;;;;;aAI9B,mBAAO,IAAG,IAAA,CAAC,KAAK,CAAC,CAAC,CAAEH,aAAY,KAAK,CAAA,CAAC;;;;;;aAQtC,mBAAO,IAAG,IAAA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAI,CAAA;;;;;;aAInB,mBAAO,IAAG,IAAA,CAAC,KAAK,CAAC,KAAK,CAAC,EAAI,CAAA;;;;;cAI3B,IAAwB,IAAA,UAAC;;;;cAIzB,eAAqB,IAAG,IAAA,CAAE,KAAK,CAAE,KAAK,CAAC;;;;cAIvC,IAAc,IAAA,QAAA;;;;cApCQ,cAAA,IAAG,IAAA,CAAO;;;;cAeQ,WAAA,IAAG,IAAA,CAAE,CAAC,CAAC;;;;cACL,WAAA,IAAG,IAAA,CAAE,CAAC,CAAK,CAAC,CAAA;;;;;+BA/CtD,uBAAyBA,aAAY,EAAE,CAAA,CAAC;;;;+BAJxC,uBAAyB,EAAI,CAAC;;;;;0BARjC,EAAgB;OAAqB,CAAG,KAAH,GAAG;;;;;+BAIrC,uBAAyB,EAAI,CAAC;;;;;;;;;;;;;WCiCVA,aAAaA,YAAW,CAAC,CAAC,CAAC,CAAA,CAAC;aAAhD,wDAAkD;;;;aAUlDA,UAAU;;cAAA;;cAAW,CAAA,CAAC,CAAC,CAAC,GAACQ,EAAC,CAAA;QAAA;OAAA,CAAE,CAAC,CAAE,4BAAW,CAAQ,WAAA,CAAC,CAAC;;;;;mBAgEvC,iBAAgB,CAAC,CAAER,aAAY,CAAC,CAAA,CAAC;QAA1C,YAAM,GAAA;QAAN,YAAM,GAAA;YAAN,CACH,kCAAY,CAAC,EAAA,CAAE,kCAAY,CAAC,EAAA,CADnB;;;;WN9GV;;;QAAQA,aAAY,CAAC,CAAA;MACrB,mBAAkB,CAAC,CAAA;aADf,mBAEO,CAAC,GAAD,CAAC,UAFP;MAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
