{
"version": 3,
"sourceRoot": "FSharpSource",
"sources": ["WebSharper.Main/CollectionInternals.fs", "WebSharper.Main/Html.fs", "WebSharper.Main/Exception.fs", "WebSharper.Main/ArrayModule.fs", "WebSharper.Main/IntrinsicFunctions.fs", "WebSharper.Main/ExtraTopLevelOperators.fs", "WebSharper.Main/Array.fs", "WebSharper.Main/Array2DModule.fs", "WebSharper.Main/Async.fs", "WebSharper.Main/Char.fs", "WebSharper.Main/Concurrency.fs", "WebSharper.Main/RuntimeHelpers.fs", "WebSharper.Main/DateTime.fs", "WebSharper.Main/Enumerable.fs", "WebSharper.Main/Enumerator.fs", "WebSharper.Main/JavaScript.Pervasives.fs", "WebSharper.Main/Json.fs", "WebSharper.Main/LazyExtensions.fs", "WebSharper.Main/List.fs", "WebSharper.Main/ListModule.fs", "WebSharper.Main/Nullable.fs", "WebSharper.Main/Operators.fs", "WebSharper.Main/OptionModule.fs", "WebSharper.Main/PrintfHelpers.fs", "WebSharper.Main/Queue.fs", "WebSharper.Main/Random.fs", "WebSharper.Main/Remoting.fs", "WebSharper.Main/SeqModule.fs", "WebSharper.Main/OperatorIntrinsics.fs", "WebSharper.Main/Stack.fs", "WebSharper.Main/String.fs", "WebSharper.Main/Unchecked.fs", "WebSharper.Main/CommonExtensions.fs"],
"sourcesContent": ["// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides seq/list/array proxies\nmodule internal WebSharper.CollectionInternals\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\n[<Name \"Arrays.splitInto\">]\nlet ArraySplitInto count (arr: 'T[]) =\n    if count <= 0 then failwith \"Count must be positive\"\n    let len = arr.Length\n    if len = 0 then\n        [| |]\n    else\n        let count = min count len\n        let res = Array.zeroCreate count : 'T[][]\n        let minChunkSize = len / count\n        let mutable startIndex = 0\n        for i = 0 to len % count - 1 do\n            res.[i] <- Array.sub arr startIndex (minChunkSize + 1)\n            startIndex <- startIndex + minChunkSize + 1\n        for i = len % count to count - 1 do\n            res.[i] <-  Array.sub arr startIndex minChunkSize\n            startIndex <- startIndex + minChunkSize\n        res\n\n[<JavaScript>]\n[<Name \"Arrays.contains\">]\nlet ArrayContains (item: 'T) (arr: Array<'T>)  =\n    let mutable c = true\n    let mutable i = 0\n    let l = arr.Length\n    while c && i < l do\n        if arr.[i] = item then\n            c <- false\n        else\n            i <- i + 1\n    not c\n\n[<JavaScript>]\n[<Name \"Arrays.tryFindBack\">]\nlet ArrayTryFindBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i > 0 && Option.isNone res do\n        if f arr.[i] then res <- Some arr.[i]\n        i <- i - 1\n    res\n\n[<JavaScript>]\n[<Name \"Arrays.tryFindIndexBack\">]\nlet ArrayTryFindIndexBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i > 0 && Option.isNone res do\n        if f arr.[i] then res <- Some i\n        i <- i - 1\n    res\n\n[<JavaScript>]\n[<Name \"Arrays.mapFold\">]\nlet ArrayMapFold (f: 'S -> 'T -> 'R * 'S) (zero: 'S) (arr: 'T[]) : 'R[] * 'S =\n    let r = Array.zeroCreate<'R>(Array.length arr)\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        let a, b = f acc arr.[i]\n        r.[i] <- a\n        acc <- b \n    r, acc\n\n[<JavaScript>]\n[<Name \"Arrays.mapFoldBack\">]\nlet ArrayMapFoldBack (f: 'T -> 'S -> 'R * 'S) (arr: 'T[]) (zero: 'S) : 'R[] * 'S =\n    let r = Array.zeroCreate<'R>(Array.length arr)\n    let mutable acc = zero\n    let len = Array.length arr\n    for j = 1 to len do\n        let i = len - j\n        let a, b = f arr.[i] acc\n        r.[i] <- a\n        acc <- b \n    r, acc\n\n[<JavaScript>]\n[<Name \"Arrays.sortInPlaceByDescending\">]\nlet ArraySortInPlaceByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    As<unit> (arr.JS.Sort(fun (x, y) -> - compare (f x) (f y)))\n\n[<JavaScript>]\n[<Name \"Seq.tryHead\">]\nlet SeqTryHead (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then Some e.Current else None\n\n[<JavaScript>]\n[<Name \"Seq.tryItem\">]\nlet SeqTryItem i (s: seq<'T>) =\n    if i < 0 then None else\n    let mutable j = 0\n    use e = Enumerator.Get s\n    let mutable go = true\n    while go && j <= i do\n        if e.MoveNext() then\n            j <- j + 1\n        else\n            go <- false\n    if go then Some e.Current else None\n\n[<JavaScript>]\n[<Name \"Seq.tryLast\">]\nlet SeqTryLast (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then \n        while e.MoveNext() do ()\n        Some e.Current \n    else None\n\n[<JavaScript>]\n[<Name \"Seq.chunkBySize\">]\nlet SeqChunkBySize (size: int) (s: seq<'T>) =\n    if size <= 0 then failwith \"Chunk size must be positive\"\n    Enumerable.Of <| fun () ->\n        let enum = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                let res = [|enum.Current|]\n                while res.Length < size && enum.MoveNext() do \n                    res.JS.Push enum.Current |> ignore\n                e.Current <- res\n                true\n            else false\n\n[<JavaScript>]\n[<Name \"Seq.compareWith\">]\nlet SeqCompareWith  (f: 'T -> 'T -> int) (s1: seq<'T>) (s2: seq<'T>) : int =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = 0\n    let mutable loop = true\n    while loop && r = 0 do\n        match e1.MoveNext(), e2.MoveNext() with\n        | true, false ->\n            r <- 1\n        | false, true ->\n            r <- -1\n        | false, false ->\n            loop <- false\n        | true, true ->\n            r <- f e1.Current e2.Current\n    r\n\n[<JavaScript>]\n[<Name \"Seq.countBy\">]\nlet SeqCountBy (f: 'T -> 'K) (s: seq<'T>) : seq<'K * int> =\n    Seq.delay <| fun () ->\n        let d = new obj()\n        use e = Enumerator.Get s\n        let keys = System.Collections.Generic.Queue<_>()\n        while e.MoveNext() do\n            let k = f e.Current\n            let h = As<string> (Unchecked.hash k)\n            if JS.HasOwnProperty d (As h) then\n                (?<-) d h ((?) d h + 1)\n            else\n                keys.Enqueue k\n                (?<-) d h 1\n        keys.ToArray()\n        |> Array.map (fun k -> (k, (?) d (As (hash k))))\n        |> As<_>\n\n[<JavaScript>]\n[<Name \"Seq.distinct\">]\nlet SeqDistinct<'T when 'T : equality> (s: seq<'T>) : seq<'T> =\n    Seq.distinctBy id s\n\n[<JavaScript>]\n[<Name \"Seq.distinctBy\">]\nlet SeqDistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let enum        = Enumerator.Get s\n        let seen        = Array<Array<'K>>()\n        let add c =\n            let k = f c\n            let h = hash k\n            let cont = seen.[h]\n            if cont = JS.Undefined then\n                seen.[h] <- [|k|].JS\n                true\n            else\n                if cont |> ArrayContains k then\n                    false\n                else\n                    cont.Push(k) |> ignore\n                    true         \n        Enumerator.NewDisposing () (fun _ -> enum.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                let mutable cur = enum.Current\n                let mutable has = add cur\n                while not has && enum.MoveNext() do\n                    cur <- enum.Current\n                    has <- add cur\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<JavaScript>]\n[<Name \"Seq.except\">]\nlet SeqExcept (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let enum        = Enumerator.Get s\n        let seen        = Array<Array<'T>>()\n        let add c =\n            let h = hash c\n            let cont = seen.[h]\n            if cont = JS.Undefined then\n                seen.[h] <- [|c|].JS\n                true\n            else\n                if cont |> ArrayContains c then\n                    false\n                else\n                    cont.Push(c) |> ignore\n                    true         \n        for i in itemsToExclude do\n            add i |> ignore\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                let mutable cur = enum.Current\n                let mutable has = add cur\n                while not has && enum.MoveNext() do\n                    cur <- enum.Current\n                    has <- add cur\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<JavaScript>]\n[<Name \"List.skip\">]\nlet ListSkip i (l : list<'T>) =\n    let mutable res = l\n    for j = 1 to i do\n        match res with \n        | _ :: t ->\n            res <- t\n        | [] -> failwith \"Input list too short.\"\n    res\n\n[<Inline \"$x.push($y)\">]\nlet arrayPush (x: obj) (y: obj) = ()\n\n[<JavaScript>]\n[<Name \"Seq.groupBy\">]\nlet SeqGroupBy (f: 'T -> 'K when 'K : equality)\n            (s: seq<'T>) : seq<'K * seq<'T>> =\n    Seq.delay (fun () ->\n        let d  = obj ()\n        let d1 = obj ()\n        let keys : obj [] = [||]\n        use e = Enumerator.Get s\n        while e.MoveNext() do\n            let c = e.Current\n            let k = f c\n            let h = As<string> (hash k)\n            if not (JS.HasOwnProperty d h) then\n                arrayPush keys k\n            (?<-) d1 h k\n            if JS.HasOwnProperty d h then\n                arrayPush ((?) d h) c\n            else\n                (?<-) d h [| c |]\n        As<_> (Array.map (fun k -> (k, (?) d (As (hash k)))) keys))\n\n[<JavaScript>]\n[<Name \"Seq.insufficient\">]\nlet InsufficientElements() =\n    failwith \"The input sequence has an insufficient number of elements.\"\n\n[<JavaScript>]\n[<Name \"Seq.last\">]\nlet SeqLast (s: seq<_>) =\n    use e = Enumerator.Get s\n    if not <| e.MoveNext() then InsufficientElements()\n    else \n        while e.MoveNext() do ()\n        e.Current\n\n[<JavaScript>]\n[<Name \"List.map3\">]\nlet ListMap3 f (l1: list<_>) (l2: list<_>) (l3: list<_>) =\n    Array.map2\n        ( <| )\n        (Array.map2 f (Array.ofSeq l1) (Array.ofSeq l2))\n        (Array.ofSeq l3)\n    |> List.ofArray\n\n[<JavaScript>]\n[<Name \"Seq.contains\">]\nlet SeqContains (el: 'T) (s: seq<'T>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- e.Current = el\n    r\n\n[<JavaScript>]\n[<Name \"Seq.pairwise\">]\nlet SeqPairwise (s: seq<'T>) : seq<'T * 'T> =\n    Seq.windowed 2 s\n    |> Seq.map (fun x -> (x.[0], x.[1]))\n\n[<JavaScript>]\n[<Name \"List.skipWhile\">]\nlet rec ListSkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    let mutable rest = list\n    while not (List.isEmpty rest) && predicate (List.head rest) do\n        rest <- List.tail rest \n    rest\n\n[<JavaScript>]\n[<Name \"Seq.unfold\">]\nlet SeqUnfold (f: 'S -> option<'T * 'S>) (s: 'S) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New s <| fun e ->\n            match f e.State with\n            | Some (t, s) ->\n                e.Current <- t\n                e.State  <- s\n                true\n            | None ->\n                false\n\n[<JavaScript>]\n[<Name \"Seq.truncate\">]\nlet SeqTruncate (n: int) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        let i = ref 0\n        while e.MoveNext() && !i < n do\n            incr i\n            yield e.Current\n    }\n\n[<JavaScript>]\n[<Name \"Seq.nonNegative\">]\nlet InputMustBeNonNegative() =\n    failwith \"The input must be non-negative.\"\n\n[<JavaScript>]\n[<Name \"Seq.windowed\">]\nlet SeqWindowed (windowSize: int) (s: seq<'T>) : seq<'T []> =\n    if windowSize <= 0 then\n        failwith \"The input must be positive.\"\n    seq {\n        use e = Enumerator.Get s\n        let q = new System.Collections.Generic.Queue<'T>()\n        while q.Count < windowSize && e.MoveNext() do\n            q.Enqueue e.Current\n        if q.Count = windowSize then\n            yield q.ToArray()\n            while e.MoveNext() do\n                ignore (q.Dequeue())\n                q.Enqueue e.Current\n                yield q.ToArray()\n    }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.JQuery\nmodule M = WebSharper.Core.Metadata\nmodule J = WebSharper.Core.Json\n\n/// An interface that has to be implemented by controls\n/// that depend on resources.\ntype IRequiresResources =\n    abstract member Requires : seq<M.Node>\n    abstract member Encode : M.Info * J.Provider -> list<string * J.Encoded>\n\n/// HTML content that can be used as the Body of a web Control.\n/// Can be zero, one or many DOM nodes.\ntype IControlBody =\n    /// Replace the given node with the HTML content.\n    /// The node is guaranteed to be present in the DOM.\n    /// Called exactly once on startup on an IControl's Body.\n    abstract ReplaceInDom : Dom.Node -> unit\n\n/// An interface that has to be implemented by controls that\n/// are subject to activation, ie. server-side controls that\n/// contain client-side elements.\ntype IControl =\n    inherit IRequiresResources\n    abstract member Body : IControlBody\n    abstract member Id : string\n\n[<AutoOpen>]\n[<JavaScript>]\nmodule HtmlContentExtensions =\n\n    type private SingleNode(node: Dom.Node) =\n        interface IControlBody with\n            member this.ReplaceInDom(old) =\n                node.ParentNode.ReplaceChild(node, old) |> ignore\n\n    type IControlBody with\n        /// Create HTML content comprised of a single DOM node.\n        static member SingleNode (node: Dom.Node) =\n            new SingleNode(node) :> IControlBody\n\nmodule Activator =\n\n    /// The identifier of the meta tag holding the controls.\n    [<Literal>]\n    let META_ID = \"websharper-data\"\n\n    [<Direct \"typeof document !== 'undefined'\">]\n    let private hasDocument () = false\n\n    [<JavaScript>]\n    let private Activate =\n        if hasDocument () then\n            let meta = JS.Document.GetElementById(META_ID)\n            if (As meta) then\n                JQuery.Of(JS.Document).Ready(fun () ->\n                    let text = meta.GetAttribute(\"content\")\n                    let obj = Json.Activate (Json.Parse text)\n                    JS.GetFields obj\n                    |> Array.iter (fun (k, v) ->\n                        let p = (As<IControl> v).Body\n                        let old = JS.Document.GetElementById k\n                        p.ReplaceInDom old)\n                ).Ignore\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Name \"Exception\">]\n[<Proxy(typeof<System.Exception>)>]\ntype private ExceptionProxy [<Direct \"new Error($message)\">] (message: string) =\n\n    [<JavaScript>]\n    new () = ExceptionProxy \"Exception of type 'System.Exception' was thrown.\"\n\n    member this.Message with [<Inline \"$this.message\">] get () = X<string>\n\n[<Proxy(typeof<MatchFailureException>)>]\n[<Name \"MatchFailureException\">]\n[<JavaScript>]\ntype private MatchFailureExceptionProxy (message: string, line: int, column: int) =\n    inherit ExceptionProxy (message + \" at \" + string line + \":\" + string column)\n\n[<Proxy(typeof<System.IndexOutOfRangeException>)>]\n[<Name \"IndexOutOfRangeException\">]\n[<JavaScript>]\ntype private IndexOutOfRangeExceptionProxy(message: string) =\n    inherit ExceptionProxy(message)\n\n    new () = IndexOutOfRangeExceptionProxy \"Index was outside the bounds of the array.\"\n\n[<Proxy(typeof<System.OperationCanceledException>)>]\n[<Name \"OperationCanceledException\">]\n[<JavaScript>]\ntype private OperationCanceledExceptionProxy(message: string) =\n    inherit ExceptionProxy(message)\n\n    new () = OperationCanceledExceptionProxy \"The operation was canceled.\"\n\n[<Proxy(typeof<System.ArgumentException>)>]\n[<Name \"ArgumentException\">]\n[<JavaScript>]\ntype private ArgumentExceptionProxy(message: string) =\n    inherit ExceptionProxy(message)\n    \n    new () = ArgumentExceptionProxy \"Value does not fall within the expected range.\"\n\n[<Proxy(typeof<System.InvalidOperationException>)>]\n[<Name \"InvalidOperationException\">]\n[<JavaScript>]\ntype private InvalidOperationExceptionProxy(message: string) =\n    inherit ExceptionProxy(message)\n    \n    new () = InvalidOperationExceptionProxy \"Operation is not valid due to the current state of the object.\"\n\n[<Proxy(typeof<System.AggregateException>)>]\n[<Name \"AggregateException\">]\n[<JavaScript>]\ntype private AggregateExceptionProxy(message: string, innerExceptions: exn[]) =\n    inherit ExceptionProxy(message)\n\n    new (innerExceptions: exn[]) = AggregateExceptionProxy(\"One or more errors occurred.\", innerExceptions)\n\n    member this.InnerExceptions \n        with [<Inline \"$this.InnerExceptions\">] get() = X<System.Collections.ObjectModel.ReadOnlyCollection<exn>>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Arrays\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Collections.ArrayModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ArrayModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<JavaScript>]\nlet checkLength (arr1: 'T1[]) (arr2: 'T2[]) =\n    if Array.length arr1 <> Array.length arr2 then\n        failwith \"Arrays differ in length.\"\n\n[<Inline \"$x.push($y)\">]\nlet push (x: obj) (y: obj) = ()\n\n[<Inline \"$arr1.concat($arr2)\">]\nlet Append<'T> (arr1: 'T []) (arr2: 'T []) : 'T [] = arr1\n\n[<JavaScript>]\n[<Name \"average\">]\nlet inline Average (arr: 'T []): 'T = As (float (Array.sum arr) / float (Array.length arr))\n\n[<JavaScript>]\n[<Name \"averageBy\">]\nlet inline AverageBy (f: 'T -> 'U) (arr: 'T []) : 'U = As (float (Array.sumBy f arr) / float (Array.length arr))\n\n[<JavaScript>]\n[<Name \"blit\">]\nlet CopyTo<'T> (arr1: 'T [], start1, arr2: 'T [], start2, length) =\n    F.checkRange arr1 start1 length\n    F.checkRange arr2 start2 length\n    for i = 0 to length - 1 do\n        arr2.[start2 + i] <- arr1.[start1 + i]\n\n[<JavaScript>]\n[<Name \"choose\">]\nlet Choose<'T,'U> (f: 'T -> option<'U>) (arr: 'T []) : 'U [] =\n    let q : 'U [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match f arr.[i] with\n        | Some x -> push q x\n        | None   -> ()\n    q\n\n[<Inline \"Array.prototype.concat.apply([], $x)\">]\nlet concatArray (x: 'T[][]) = X<'T[]>\n\n[<JavaScript>]\n[<Name \"collect\">]\nlet Collect<'T,'U> (f: 'T -> 'U[]) (x: 'T []) : 'U[] =\n    concatArray (Array.map f x)\n\n[<JavaScript>]\n[<Name \"concat\">]\nlet Concat<'T> (xs: seq<'T []>) : 'T [] =\n    concatArray (Array.ofSeq xs)\n\n[<JavaScript>]\n[<Inline>]\nlet SplitInto count (arr: 'T[]) = ArraySplitInto count arr\n\n[<Inline \"$x.slice()\">]\nlet Copy (x: 'T []) = X<'T []>\n\n[<JavaScript>]\n[<Name \"create\">]\nlet Create size value =\n    let r = Array.zeroCreate size\n    for i = 0 to size - 1 do\n        r.[i] <- value\n    r\n\n[<Inline \"[]\">]\nlet Empty () = X<'T []>\n\n[<Inline>]\n[<JavaScript>]\nlet Exists<'T> (f: 'T -> bool) (arr: 'T []) = Seq.exists f arr\n\n[<JavaScript>]\n[<Name \"exists2\">]\nlet Exists2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    Seq.exists2 f arr1 arr2\n\n[<JavaScript>]\n[<Name \"fill\">]\nlet Fill<'T> (arr: 'T []) (start: int) (length: int) (value: 'T) =\n    F.checkRange arr start length\n    for i = start to start + length - 1 do\n        arr.[i] <- value\n\n[<JavaScript>]\n[<Name \"filter\">]\nlet Filter<'T> f (arr: 'T []) : 'T [] =\n    let r : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.[i] then\n            push r arr.[i]\n    r\n\n[<JavaScript>]\n[<Name \"find\">]\nlet Find f (arr: _ []) =\n    match Array.tryFind f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"findINdex\">]\nlet FindIndex f (arr: _ []) =\n    match Array.tryFindIndex f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S =\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        acc <- f acc arr.[i]\n    acc\n\n[<JavaScript>]\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> f (zero: 'S) (arr1: 'T1 []) (arr2: 'T2 []) : 'S =\n    checkLength arr1 arr2\n    let mutable accum = zero\n    for i in 0 .. Array.length arr1 - 1 do\n        accum <- f accum arr1.[i] arr2.[i]\n    accum\n\n[<JavaScript>]\n[<Name \"foldBack\">]\nlet FoldBack f (arr: _ []) zero =\n    let mutable acc = zero\n    let len = Array.length arr\n    for i = 1 to len do\n        acc <- f arr.[len - i] acc\n    acc\n\n[<JavaScript>]\n[<Name \"foldBack2\">]\nlet FoldBack2 f (arr1: _ []) (arr2: _ []) zero =\n    checkLength arr1 arr2\n    let len = Array.length arr1\n    let mutable accum = zero\n    for i in 1 .. len do\n        accum <- f arr1.[len - i] arr2.[len - i] accum\n    accum\n\n[<Inline>]\n[<JavaScript>]\nlet ForAll f (arr: _ []) = Seq.forall f arr\n\n[<JavaScript>]\n[<Name \"forall2\">]\nlet ForAll2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    Seq.forall2 f arr1 arr2\n\n[<Inline>]\n[<JavaScript>]\nlet Get (arr: _ []) index =\n    F.GetArray arr index\n\n[<Inline>]\n[<JavaScript>]\nlet Item index (arr: _ []) =\n    F.GetArray arr index\n\n[<JavaScript>]\n[<Name \"init\">]\nlet Initialize size f =\n    if size < 0 then\n        failwith \"Negative size given.\"\n    let r = Array.zeroCreate size\n    for i = 0 to size - 1 do\n        r.[i] <- f i\n    r\n\n[<Inline \"$arr.length == 0\">]\nlet IsEmpty (arr: _ []) = X<bool>\n\n[<JavaScript>]\n[<Name \"iter\">]\nlet Iterate f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f arr.[i]\n\n[<JavaScript>]\n[<Name \"iter2\">]\nlet Iterate2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f arr1.[i] arr2.[i]\n\n[<JavaScript>]\n[<Name \"iteri\">]\nlet IterateIndexed f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f i arr.[i]\n\n[<JavaScript>]\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f i arr1.[i] arr2.[i]\n\n[<Inline \"$arr.length\">]\nlet Length<'T> (arr: 'T []) = X<int>\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map<'T1,'T2> (f: 'T1 -> 'T2) (arr: 'T1 []) : 'T2 [] =\n    let r = Array.zeroCreate<'T2>(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        r.[i] <- f arr.[i]\n    r\n\n[<JavaScript>]\n[<Name \"map2\">]\nlet Map2 (f: 'T1 -> 'T2 -> 'T3) (arr1: 'T1 []) (arr2: 'T2 []) : 'T3 [] =\n    checkLength arr1 arr2\n    let r = Array.zeroCreate<'T3>(Array.length arr2)\n    for i = 0 to Array.length arr2 - 1 do\n        r.[i] <- f arr1.[i] arr2.[i]\n    r\n\n[<JavaScript>]\n[<Name \"mapi\">]\nlet MapIndexed f (arr: _ []) =\n    let y = Array.zeroCreate(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        y.[i] <- f i arr.[i]\n    y\n\n[<JavaScript>]\n[<Name \"mapi2\">]\nlet MapIndexed2 f (arr1: 'T1 []) (arr2: 'T2 []): 'U[] =\n    checkLength arr1 arr2\n    let res = Array.zeroCreate(Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.[i] <- f i arr1.[i] arr2.[i]\n    res\n\n[<JavaScript>]\n[<Inline>]\nlet MapFold f zero arr = ArrayMapFold f zero arr\n\n[<JavaScript>]\n[<Inline>]\nlet MapFoldBack f arr zero = ArrayMapFoldBack f arr zero\n\n[<JavaScript>]\n[<Name \"max\">]\nlet Max x = Array.reduce max x\n\n[<JavaScript>]\n[<Name \"maxBy\">]\nlet MaxBy (f, arr) =\n    Array.reduce (fun x y -> if f x > f y then x else y) arr\n\n[<JavaScript>]\n[<Name \"min\">]\nlet Min x = Array.reduce min x\n\n[<JavaScript>]\n[<Name \"minBy\">]\nlet MinBy f arr =\n    Array.reduce (fun x y -> if f x < f y then x else y) arr\n\n[<Inline>]\n[<JavaScript>]\nlet OfList<'T> (xs: list<'T>) = Array.ofSeq xs\n\n[<JavaScript>]\n[<Name \"ofSeq\">]\nlet OfSeq<'T> (xs: seq<'T>) : 'T [] =\n    let q : 'T [] = [||]\n    use enum = Enumerator.Get xs\n    while enum.MoveNext() do\n        push q enum.Current\n    q\n\n[<JavaScript>]\n[<Name \"partition\">]\nlet Partition f (arr: 'T []) : 'T [] * 'T [] =\n    let ret1 : 'T [] = [||]\n    let ret2 : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.[i] then\n            push ret1 arr.[i]\n        else\n            push ret2 arr.[i]\n    (ret1, ret2)\n\n[<JavaScript>]\n[<Name \"permute\">]\nlet Permute f (arr: 'T []) =\n    let ret = Array.zeroCreate (Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        ret.[f i] <- arr.[i]\n    ret\n\n[<JavaScript>]\n[<Name \"pick\">]\nlet Pick f (arr: _ []) =\n    match Array.tryPick f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\nlet private nonEmpty (arr: _ []) =\n    if Array.length arr = 0 then\n        failwith \"The input array was empty.\"\n\n[<JavaScript>]\n[<Name \"reduce\">]\nlet Reduce f (arr: _ []) =\n    nonEmpty arr\n    let mutable acc = arr.[0]\n    for i = 1 to Array.length arr - 1 do\n        acc <- f acc arr.[i]\n    acc\n\n[<JavaScript>]\n[<Name \"reduceBack\">]\nlet ReduceBack f (arr: _ []) =\n    nonEmpty arr\n    let len = Array.length arr\n    let mutable acc = arr.[len - 1]\n    for i = 2 to len do\n        acc <- f arr.[len - i] acc\n    acc\n\n[<Inline \"$x.slice().reverse()\">]\n[<Name \"rev\">]\nlet Reverse (x: 'T []) = X<'T []>\n\n[<JavaScript>]\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S [] =\n    let ret = Array.zeroCreate (1 + Array.length arr)\n    ret.[0] <- zero\n    for i = 0 to Array.length arr - 1 do\n        ret.[i + 1] <- f ret.[i] arr.[i]\n    ret\n\n[<JavaScript>]\n[<Name \"scanBack\">]\nlet ScanBack (f: 'T -> 'S -> 'S) (arr: 'T []) (zero: 'S) : 'S [] =\n    let len = Array.length arr\n    let ret = Array.zeroCreate (1 + len)\n    ret.[len] <- zero\n    for i = 0 to len - 1 do\n        ret.[len - i - 1] <- f arr.[len - i - 1] ret.[len - i]\n    ret\n\n[<Inline>]\n[<JavaScript>]\nlet Set (arr: _ []) i v =\n    F.SetArray arr i v\n\n[<Inline \"$x.sort($wsruntime.CreateFuncWithArgs($f))\">]\nlet private sortArray (x: 'T[]) (f: 'T * 'T -> int) = X<'T[]>\n\n[<JavaScript>]\n[<Name \"sort\">]\nlet Sort<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    Array.sortBy id arr\n\n[<JavaScript>]\n[<Name \"sortBy\">]\nlet SortBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    sortArray (Array.copy arr) (fun (x, y) -> compare (f x) (f y))\n\n[<JavaScript>]\n[<Name \"sortInPlace\">]\nlet SortInPlace<'T when 'T: comparison> (arr: 'T []) =\n    Array.sortInPlaceBy id arr\n\n[<JavaScript>]\n[<Name \"sortInPlaceBy\">]\nlet SortInPlaceBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    As<unit> (sortArray arr (fun (x, y) -> compare (f x) (f y)))\n\n[<JavaScript>]\n[<Name \"sortInPlaceWith\">]\nlet SortInPlaceWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) =\n    As<unit> (sortArray arr (fun (x, y) -> comparer x y))\n\n[<JavaScript>]\n[<Name \"sortWith\">]\nlet SortWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) : 'T [] =\n    sortArray (Array.copy arr) (fun (x, y) -> comparer x y)\n\n[<JavaScript>]\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    sortArray (Array.copy arr) (fun (x, y) -> - compare (f x) (f y))\n\n[<JavaScript>]\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    SortByDescending id arr\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<Inline>]\n[<JavaScript>]\nlet GetSubArray (arr: 'T []) (start: int) (length: int) : 'T []=\n    F.GetArraySub arr start length\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $arr[i]; return sum\">]\n[<Name \"sum\">]\nlet Sum (arr: 'T []) : 'T = X<'T>\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $f($arr[i]); return sum\">]\n[<Name \"sumBy\">]\nlet SumBy (f: 'T -> 'U) (arr: 'T []) : 'U =  X<'U>\n\n[<JavaScript>]\n[<Inline>]\nlet ToList arr = List.ofArray arr\n\n[<Inline \"$arr\">]\nlet ToSeq (arr: _ []) = arr :> seq<_>\n\n[<JavaScript>]\n[<Name \"tryFind\">]\nlet TryFind f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.[i] then res <- Some arr.[i]\n        i <- i + 1\n    res\n\n[<JavaScript>]\n[<Inline>]\nlet TryFindBack f (arr: _ []) = ArrayTryFindBack f arr\n\n[<JavaScript>]\n[<Name \"tryFindIndex\">]\nlet TryFindIndex f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.[i] then res <- Some i\n        i <- i + 1\n    res\n\n[<JavaScript>]\n[<Inline>]\nlet TryFindIndexBack f (arr: _ []) = ArrayTryFindIndexBack f arr\n\n[<JavaScript>]\n[<Name \"tryHead\">]\nlet TryHead (arr: 'T[]) =\n    if arr.Length = 0 then None else Some arr.JS.[0]\n\n[<JavaScript>]\n[<Name \"tryItem\">]\nlet TryItem i (arr: 'T[]) =\n    if arr.Length <= i || i < 0 then None else Some arr.JS.[i]\n\n[<JavaScript>]\n[<Name \"tryLast\">]\nlet TryLast (arr: 'T[]) =\n    let len = arr.Length\n    if len = 0 then None else Some arr.JS.[len - 1]\n\n[<JavaScript>]\n[<Name \"tryPick\">]\nlet TryPick f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        match f arr.[i] with\n        | Some _ as r -> res <- r\n        | _ -> ()\n        i <- i + 1\n    res\n\n[<JavaScript>]\n[<Name \"unzip\">]\nlet Unzip<'T1,'T2> (arr: ('T1 * 'T2) []) : 'T1 [] * 'T2 [] =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        let (a, b) = arr.[i]\n        push x a\n        push y b\n    (x, y)\n\n[<JavaScript>]\n[<Name \"unzip3\">]\nlet Unzip3<'T1,'T2,'T3> (arr: ('T1 * 'T2 * 'T3) []) =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    let z : 'T3 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match arr.[i] with\n        | (a, b, c) ->\n            push x a\n            push y b\n            push z c\n    (x, y, z)\n\n[<Inline \"Array($size)\">]\n[<Name \"zeroCreate\">]\nlet ZeroCreate (size: int) = X<'T []>\n\n[<JavaScript>]\n[<Name \"zip\">]\nlet Zip (arr1: 'T1 []) (arr2: 'T2 []) =\n    checkLength arr1 arr2\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.[i] <- (arr1.[i], arr2.[i])\n    res\n\n[<JavaScript>]\n[<Name \"zip3\">]\nlet Zip3 (arr1: _ [], arr2: _ [], arr3: _ []) =\n    checkLength arr1 arr2\n    checkLength arr2 arr3\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.[i] <- (arr1.[i], arr2.[i], arr3.[i])\n    res\n        \n[<JavaScript>]\n[<Name \"chunkBySize\">]\nlet ChunkBySize size array =\n    SeqChunkBySize size (Array.toSeq array)\n    |> Seq.toArray\n    \n[<JavaScript>]\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (a1: 'T []) (a2: 'T []) : int =\n    SeqCompareWith f (Array.toSeq a1) (Array.toSeq a2)\n        \n[<JavaScript>]\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (a: 'T []) : ('K * int) [] =\n    SeqCountBy f (Array.toSeq a)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: 'T []) : 'T [] =\n    SeqDistinct (Array.toSeq l)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (a: 'T []) : 'T [] =\n    SeqDistinctBy f (Array.toSeq a)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (a: 'T []) =\n    SeqExcept itemsToExclude (Array.toSeq a)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"findBack\">]\nlet FindBack p (s: _ []) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: _ []) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (a: 'T []) : ('K * 'T []) [] =\n    SeqGroupBy f (Array.toSeq a)\n    |> Seq.toArray\n    |> Array.map (fun (k, s) ->\n        (k, Seq.toArray s)\n    )\n\n[<JavaScript>]\n[<Name \"head\">]\nlet Head (ar : 'T []) : 'T =\n    List.head (Array.toList ar)\n\n[<JavaScript>]\n[<Name \"last\">]\nlet Last (ar : 'T []) : 'T =\n    SeqLast (Array.toSeq ar)\n\n[<JavaScript>]\n[<Name \"map3\">]\nlet Map3 f (l1: _ []) (l2: _ []) (l3: _ []) =\n    ListMap3 f (Array.toList l1) (Array.toList l2) (Array.toList l3)\n    |> List.toArray\n\n[<JavaScript>]\n[<Name \"contains\">]\nlet Contains (el: 'T) (a: 'T []) =\n    SeqContains el (Array.toSeq a)\n\n[<JavaScript>]\n[<Name \"pairwise\">]\nlet Pairwise (a: 'T []) : ('T * 'T) [] =\n    SeqPairwise (Array.toSeq a)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"replicate\">]\nlet Replicate size value =\n    Array.create size value\n\n[<JavaScript>]\n[<Name \"indexed\">]\nlet Indexed (ar : 'T []) : (int * 'T) [] =\n    Array.mapi (fun a b -> (a, b)) ar\n\n[<JavaScript>]\n[<Inline>]\nlet Singleton<'T> (x: 'T) =\n    [| x |]\n\n[<JavaScript>]\n[<Name \"skip\">]\nlet Skip<'T> i (ar : 'T []) =\n    if i < 0 then InputMustBeNonNegative() else\n    if i > ar.Length then InsufficientElements() else\n    ar.JS.Slice(i)\n\n[<JavaScript>]\n[<Name \"skipWhile\">]\nlet SkipWhile<'T> (predicate : 'T -> bool) (ar : 'T []) : 'T [] =\n    let len = ar.Length\n    let mutable i = 0\n    while i < len && predicate ar.[i] do\n        i <- i + 1\n    ar.JS.Slice(i)\n\n[<JavaScript>]\n[<Name \"tail\">]\nlet Tail<'T> (ar : 'T []) : 'T [] =\n    Skip 1 ar\n\n[<JavaScript>]\n[<Name \"take\">]\nlet Take<'T> n (ar: 'T []) =\n    if n < 0 then InputMustBeNonNegative() else\n    if n > ar.Length then InsufficientElements() else\n    ar.JS.Slice(0, n)\n\n[<JavaScript>]\n[<Name \"takeWhile\">]\nlet TakeWhile<'T> (predicate : 'T -> bool) (ar: 'T []) =\n    let len = ar.Length\n    let mutable i = 0\n    while i < len && predicate ar.[i] do\n        i <- i + 1\n    ar.JS.Slice(0, i)\n\n[<JavaScript>]\n[<Name \"truncate\">]\nlet Truncate<'T> n (ar: 'T []) =\n    ar.JS.Slice(n)\n\n[<JavaScript>]\n[<Name \"exactlyOne\">]\nlet ExactlyOne (ar : 'T []) =\n    if ar.Length = 1 then\n        ar.[0]\n    else\n        failwith \"The input does not have precisely one element.\"\n\n[<JavaScript>]\n[<Name \"unfold\">]\nlet Unfold (f: 'S -> option<'T * 'S>) (s: 'S) : 'T [] =\n    SeqUnfold f s\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T []) : 'T [] =\n    Filter predicate s\n\n[<JavaScript>]\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T []) : array<'T []> =\n    SeqWindowed windowSize (Array.toSeq s)\n    |> Seq.toArray\n\n[<JavaScript>]\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (ar: 'T []) =\n    Take n ar, Skip n ar\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.LanguagePrimitives+IntrinsicFunctions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.IntrinsicFunctionProxy\n\nopen System\nopen WebSharper.JavaScript\n\n[<Inline \"$value\">]\nlet UnboxGeneric<'T> (value: obj) = X<'T>\n\n[<Inline \"$arr.length\">]\nlet GetArray2DLength1 (arr: 'T[,]) = X<int>\n\n[<Inline \"$arr.length ? $arr[0].length : 0\">]\nlet GetArray2DLength2 (arr: 'T[,]) =  X<int>\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.checkBounds\">]\nlet checkBounds (arr: 'T[]) (n: int) =\n    if n < 0 || n >= Array.length arr then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.checkBounds2D\">]\nlet checkBounds2D<'T> (arr: 'T[,]) (n1: int) (n2: int) =\n    if n1 < 0 || n2 < 0 || n1 >= GetArray2DLength1 arr\n        || n2 >= GetArray2DLength2 arr then\n        raise (new IndexOutOfRangeException())\n\n[<Name \"WebSharper.Arrays.checkRange\">]\n[<JavaScript>]\nlet checkRange (arr: 'T []) (start: int) (size: int) : unit =\n    if (size < 0) || (start < 0) || (Array.length arr < start + size) then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<Inline \"$arr[$n]\">]\nlet GetArrayInternal<'T> (arr: 'T[]) (n:int) = X<'T>\n\n[<Inline \"void ($arr[$n] = $x)\">]\nlet SetArrayInternal<'T> (arr: 'T[]) (n:int) (x:'T) = ()\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.set\">]\nlet SetArray<'T> (arr: 'T[]) (n: int) (x: 'T) =\n    checkBounds arr n\n    SetArrayInternal arr n x\n\n[<Inline \"$s.charCodeAt($ix)\">]\n[<Name \"WebSharper.Strings.get\">]\nlet GetString (s: string) (ix: int) = X<char>\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.get\">]\nlet GetArray<'T> (arr: 'T[]) (n: int) =\n    checkBounds arr n\n    GetArrayInternal arr n\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.sub\">]\nlet GetArraySub<'T> (arr: 'T[]) start length =\n    checkRange arr start length\n    subArray arr start length\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.setSub\" >]\nlet SetArraySub<'T> (arr: 'T[]) start len (src: 'T[]) =\n    for i = 0 to len - 1 do\n        arr.[start+i] <- src.[i]\n\n[<Inline \"$arr[$n1][$n2]\">]\nlet GetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) = X<'T>\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.get2D\" >]\nlet GetArray2D (arr: 'T[,]) (n1: int) (n2: int) =\n    checkBounds2D arr n1 n2\n    GetArray2DInternal arr n1 n2\n\n[<Inline \"void ($arr[$n1][$n2] = $x)\">]\nlet SetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) (x:'T) = ()\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.set2D\" >]\nlet SetArray2D (arr: 'T[,]) (n1: int) (n2: int) (x: 'T) =\n    checkBounds2D arr n1 n2\n    SetArray2DInternal arr n1 n2 x\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.zeroCreate2D\" >]\nlet Array2DZeroCreate<'T> (n:int) (m:int) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.zeroCreate m))\n    arr?dims <- 2\n    arr\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.sub2D\" >]\nlet GetArray2DSub<'T> (src: 'T[,]) src1 src2 len1 len2 =\n    let len1 = (if len1 < 0 then 0 else len1)\n    let len2 = (if len2 < 0 then 0 else len2)\n    let dst = Array2DZeroCreate len1 len2\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[i,j] <- src.[src1 + i, src2 + j]\n    dst\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.setSub2D\" >]\nlet SetArray2DSub<'T> (dst: 'T[,]) src1 src2 len1 len2 (src: 'T[,]) =\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[src1+i, src2+j] <- src.[i, j]\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.length\" >]\nlet GetLength<'T> (arr: System.Array) =\n    match arr?dims with\n    | 2 -> GetArray2DLength1 (As arr) * GetArray2DLength1 (As arr)\n    | _ -> Array.length (As arr)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.ExtraTopLevelOperators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ExtraTopLevelOperatorsProxy\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Macro\n\n[<Inline \"null\">]\nlet DefaultAsyncBuilder : Control.AsyncBuilder =\n    As (AsyncBuilderProxy())\n\n[<JavaScript>]\n[<Name \"WebSharper.Arrays.create2D\" >]\nlet CreateArray2D (rows : seq<#seq<'T>>) =\n    let arr = rows |> Seq.map (Array.ofSeq) |> Array.ofSeq |> As<'T[,]>\n    arr?dims <- 2\n    arr\n\n[<Inline \"+$0\">]\nlet ToDouble<'T> (x: 'T) : double = X\n\n[<Inline \"$f(function(x){return x;})\">]\nlet PrintFormatToString (f: Printf.StringFormat<'T>) = X<'T>\n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThen k f = Printf.ksprintf k f \n\n[<Inline; JavaScript>]\nlet PrintFormatLine f = Printf.printfn f \n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThenFail f = Printf.failwithf f \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<Proxy(typeof<System.Array>)>]\ntype private ArrayProxy =\n\n    [<Inline \"$array.reverse()\">]\n    static member Reverse(array: System.Array) = X<unit>\n\n    [<JavaScript>]\n    [<Name \"WebSharper.Arrays.reverse\">]\n    static member Reverse(array: System.Array, offset: int, length: int) =\n        let a = Array.rev (Array.sub (As array) offset length)\n        Array.blit a 0 (As array) offset a.Length\n\n    member this.Length\n        with [<Inline; JavaScript>] get() = F.GetLength (As this)            \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Arrays2D\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Collections.Array2DModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.Array2DModuleProxy\n\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<JavaScript>]\n[<Inline>]\nlet Length1 (arr: 'T[,]) = F.GetArray2DLength1 arr\n\n[<Inline>]\n[<JavaScript>]\nlet Length2 (arr: 'T[,]) = F.GetArray2DLength2 arr\n\n[<Inline>]\n[<JavaScript>]\nlet Get (array: 'T[,]) (n:int) (m:int) = F.GetArray2D array n m\n\n[<Inline>]\n[<JavaScript>]\nlet Set (array: 'T[,]) (n:int) (m:int) (x:'T) = F.SetArray2D array n m x\n\n[<JavaScript>]\n[<Inline>]\nlet ZeroCreate (n:int) (m:int) = F.Array2DZeroCreate n m\n    \n[<Inline>]\n[<JavaScript>]\nlet Create n m (x:'T) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.create m x))\n    arr?dims <- 2\n    arr\n     \n[<JavaScript>]\n[<Name \"init\">]\nlet Initialize n m f = \n    let array = ZeroCreate n m : 'T[,]  \n    for i = 0 to n - 1 do \n        for j = 0 to m - 1 do \n            array.[i, j] <- f i j\n    array\n\n[<JavaScript>]\n[<Name \"iter\">]\nlet Iterate f array = \n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f array.[i,j]\n\n[<JavaScript>]\n[<Name \"iteri\">]\nlet IterateIndexed (f : int -> int -> 'T -> unit) (array:'T[,]) =\n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f i j array.[i,j]\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f array.[i,j])\n\n[<JavaScript>]\n[<Name \"mapi\">]\nlet MapIndexed f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f i j array.[i,j])\n\n[<JavaScript>]\n[<Name \"copy\">]\nlet Copy array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> array.[i,j])\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\ntype private CT  = System.Threading.CancellationToken\ntype private CTS  = System.Threading.CancellationTokenSource\ntype private CTR  = System.Threading.CancellationTokenRegistration\ntype private OCE = System.OperationCanceledException\nmodule C = WebSharper.Concurrency\n\n[<Proxy(typeof<Async>)>]\ntype private AsyncProxy =\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Catch(a: Async<'T>) : Async<Choice<'T,exn>>  =\n        As (C.Catch (As a))\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Start(computation: Async<unit>, ?t: CT) : unit =\n        C.Start (As computation, As t)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Ignore (computation: Async<'T>) : Async<unit> =\n        As (C.Ignore (As computation))\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Sleep milliseconds : Async<unit> =\n        As (C.Sleep milliseconds)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member StartWithContinuations(op: Async<'T>,\n                                         c1: 'T -> unit,\n                                         c2: exn -> unit,\n                                         c3: OCE -> unit,\n                                         ?t: CT) : unit =\n        C.StartWithContinuations (As op, c1, c2, c3, As t)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member FromContinuations(callback: (('T -> unit) *\n                                               (exn -> unit) *\n                                               (OCE -> unit)) -> unit)\n                                    : Async<'T> =\n        As (C.FromContinuations callback)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member AwaitEvent(ev: IEvent<'D,'T>, ?t: unit -> unit) : Async<'T> =\n        As (C.AwaitEvent (As ev))\n\n    [<Inline>]\n    [<JavaScript>]\n    static member StartChild(a: Async<'T>, ?timeOut: int) : Async<Async<'T>> =\n        As (C.StartChild (As a))\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Parallel(cs: seq<Async<'T>>) : Async<'T []> =\n        As (C.Parallel (As cs))\n\n    [<Inline>]\n    [<JavaScript>]\n    static member StartImmediate(c: Async<unit>, ?t: CT) : unit =\n        C.Start (As c, As t)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member DefaultCancellationToken : CT =\n        As !C.defCTS\n\n    [<Inline>]\n    [<JavaScript>]\n    static member CancelDefaultToken() : unit =\n        let cts = !C.defCTS\n        C.defCTS := new CTS()\n        cts.Cancel()    \n\n    [<Inline>]\n    [<JavaScript>]\n    static member CancellationToken : Async<CT> =\n        As C.GetCT\n\n    [<Inline>]\n    [<JavaScript>]\n    static member OnCancel(action: unit -> unit) : Async<System.IDisposable> =\n        As (C.OnCancel action)\n    \n    [<Inline>]\n    [<JavaScript>]\n    static member TryCancelled(p: Async<'T>, f: OCE -> unit) : Async<'T> =\n        As (C.TryCancelled(As p, f))\n\n[<Proxy(typeof<System.Action>)>]\ntype ActionProxy =\n    [<Inline \"$action\">]\n    new (action: unit -> unit) = {}\n        \n    [<Inline \"$this()\">]\n    member this.Invoke() = ()\n\n[<Proxy(typeof<CTR>)>]\ntype private CancellationTokenRegistrationProxy =\n    [<Stub>] abstract member Dispose : unit -> unit\n\n[<Proxy(typeof<CT>)>]\ntype private CancellationTokenProxy =\n    [<Inline \"$this.c\">]\n    member this.IsCancellationRequested = X<bool>\n\n    [<JavaScript>]\n    [<Inline>]\n    member this.Register(callback: System.Action) =\n        As<CTR> (C.Register (As this) callback.Invoke)\n        \n[<Proxy(typeof<CTS>)>]\n[<Name \"CancellationTokenSource\">]\ntype private CancellationTokenSourceProxy [<JavaScript>] () =\n    let mutable c = false\n\n    let mutable pending = None\n\n    let r = [||] : (unit -> unit)[]\n\n    [<JavaScript>]\n    [<Inline>]\n    member this.IsCancellationRequested = c\n\n    member this.Token \n        with [<Inline \"$this\">] get() = X<CT>\n\n    [<JavaScript>]\n    member this.Cancel() =\n        if not c then\n            c <- true\n            let errors = \n                r |> Array.choose (fun a -> \n                    try a()\n                        None\n                    with e -> Some e\n                )\n            if errors.Length > 0 then\n                raise (System.AggregateException(errors))    \n            \n    [<JavaScript>]\n    member this.Cancel(throwOnFirstException) =\n        if not throwOnFirstException then\n            this.Cancel()\n        else\n            if not c then\n                c <- true\n                r |> Array.iter (fun a -> a())   \n \n    [<JavaScript>]\n    member this.CancelAfter(delay: int) =\n        if not c then\n            pending |> Option.iter JS.ClearTimeout\n            pending <- Some <| JS.SetTimeout this.Cancel delay\n\n    [<JavaScript>]\n    [<Inline>]\n    member this.CancelAfter(delay: System.TimeSpan) = this.CancelAfter(As<int> delay)\n\n    [<JavaScript>]\n    static member CreateLinkedTokenSource(tokens: CT[]) =\n        let cts = new CTS()\n        tokens |> Array.iter (fun t -> t.Register(fun () -> cts.Cancel()) |> ignore)\n\n    [<JavaScript>]\n    static member CreateLinkedTokenSource(t1: CT, t2: CT) =\n        CancellationTokenSourceProxy.CreateLinkedTokenSource [| t1; t2 |]\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Name \"Char\">]\n[<Proxy(typeof<System.Char>)>]\ntype private CharProxy =\n\n    [<JavaScript>]\n    static member GetNumericValue(c: char) : float =\n        if c >= '0' && c <= '9' then float c - float '0' else -1.\n\n    [<JavaScript>]\n    static member IsControl(c: char) : bool =\n        c >= '\\u0000' && c <= '\\u001f'\n        || c >= '\\u0080' && c <= '\\u009f'\n\n    [<JavaScript>]\n    static member IsDigit(c: char) : bool =\n        c >= '0' && c <= '9'\n\n    [<JavaScript>]\n    static member IsLetter(c: char) : bool =\n        c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'\n\n    [<JavaScript>]\n    static member IsLetterOrDigit(c: char) : bool =\n        System.Char.IsLetter c || System.Char.IsDigit c\n\n    [<JavaScript>]\n    static member IsLower(c: char) : bool =\n        c >= 'a' && c <= 'z'\n\n    [<JavaScript>]\n    static member IsUpper(c: char) : bool =\n        c >= 'A' && c <= 'Z'\n\n    [<Direct @\"String.fromCharCode($c).match(/\\s/) !== null\">]\n    static member IsWhiteSpace(c: char) = X<bool>\n\n    [<Inline \"$s.charCodeAt(0)\">]\n    static member CharCodeAt0(s: string) = X<char>\n\n    [<JavaScript>]\n    static member Parse(s: string) =\n        if s.Length = 1 then CharProxy.CharCodeAt0(s) else\n            failwith \"String must be exactly one character long.\"\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements concurrency primitives.\nmodule internal WebSharper.Concurrency\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype private OCE = System.OperationCanceledException\n\ntype Result<'T> =\n    | Ok of 'T\n    | No of exn\n    | Cc of OCE\n  \ntype CT =\n    { \n        [<Name \"c\">] mutable IsCancellationRequested : bool \n        [<Name \"r\">] Registrations : (unit -> unit)[]\n    }\n\n[<Inline \"$arr.push($item)\">]\nlet private push arr item = X<int>\n\n[<JavaScript>]\nlet internal Register (ct: CT) (callback: unit -> unit) =\n    let i = push ct.Registrations callback - 1\n    New [\n        \"Dispose\" => fun () -> ct.Registrations.[i] <- ignore\n    ] : System.IDisposable\n\ntype AsyncBody<'T> =\n    {\n        k  : Result<'T> -> unit\n        ct : CT\n    }\n\ntype Concurrent<'T>     = AsyncBody<'T> -> unit\nand private C<'T>       = Concurrent<'T>\n\ntype private Queue<'T>  = System.Collections.Generic.Queue<'T>\ntype Milliseconds       = int\n\ntype private Scheduler [<JavaScript>]() =\n    let mutable idle    = true\n    let robin           = Queue<unit->unit>()\n\n    [<JavaScript>]\n    let rec tick () =\n        let t = System.DateTime.Now\n        let mutable loop = true\n        while loop do\n            match robin.Count with\n            | 0 ->\n                idle <- true\n                loop <- false\n            | _ ->\n                robin.Dequeue()()\n                if System.DateTime.Now - t > System.TimeSpan.FromMilliseconds 40. then\n                    JS.SetTimeout tick 0 |> ignore\n                    loop <- false\n\n    [<JavaScript>]\n    member this.Fork(action: unit -> unit) =\n        robin.Enqueue action\n        if idle then\n            idle <- false\n            JS.SetTimeout tick 0 |> ignore\n\n[<JavaScript>]\nlet private scheduler = Scheduler()\n\n[<JavaScript>]\nlet internal defCTS = ref(new System.Threading.CancellationTokenSource())\n\n[<JavaScript>]\n[<Inline>]\nlet private fork action = scheduler.Fork action\n\n[<JavaScript>]\n[<Inline>]\nlet private cancel c = c.k (Cc (new OCE()))\n\n[<JavaScript>]\nlet private checkCancel r =\n    ()\n    fun c -> if c.ct.IsCancellationRequested then cancel c else r c\n\n[<JavaScript>]\nlet Return (x: 'T) : C<'T> =\n    checkCancel <| fun c -> c.k (Ok x)\n\n[<JavaScript>]\nlet Bind (r: C<'T>, f: 'T -> C<'R>) =\n    checkCancel <| fun c ->\n        r { \n            k = function \n                | Ok x -> fork (fun () -> try f x c with e -> c.k (No e))\n                | res  -> fork (fun () -> c.k (As res)) // error or cancellation\n            ct = c.ct\n        }\n\n[<JavaScript>]\nlet Combine (a: C<unit>, b: C<'T>) : C<'T> = \n    Bind (a, fun _ -> b)\n\n[<JavaScript>]\nlet Ignore (r: C<'T>): C<unit> =\n    Bind (r, fun _ -> Return ())\n\n[<JavaScript>]\nlet Delay (mk: unit -> C<'T>) : C<'T> =\n    checkCancel <| fun c ->\n        try mk () c with e -> c.k (No e)\n\n[<JavaScript>]\nlet TryFinally (run: C<'T>, f: unit -> unit) =\n    checkCancel <| fun c ->\n        run {\n            k = fun r -> \n                try f ()\n                    c.k r \n                with e -> c.k (No e)\n            ct = c.ct\n        }\n\n[<JavaScript>]\nlet TryWith (r: C<'T>, f: exn -> C<'T>) =\n    checkCancel <| fun c ->\n        r {\n            k = function\n                | Ok x -> c.k (Ok x)\n                | No e as res -> try f e c with e -> c.k (As res)\n                | res -> c.k (As res)\n            ct = c.ct\n        }\n\n[<JavaScript>]\nlet Catch (r : C<'T>) : C<Choice<'T, exn>> =\n    checkCancel <| fun c ->\n        try r {\n                k = function \n                    | Ok x -> c.k (Ok (Choice1Of2 x))\n                    | No e -> c.k (Ok (Choice2Of2 e))\n                    | res  -> c.k (As res)\n                ct = c.ct\n            }\n        with e -> c.k (Ok (Choice2Of2 e))\n\n[<JavaScript>]\nlet GetCT : C<CT> =\n    checkCancel <| fun c -> c.k (Ok c.ct)\n\n[<JavaScript>]\nlet FromContinuations (subscribe: ('T -> unit) * (exn -> unit) * (OCE -> unit) -> unit) : C<'T> =\n    checkCancel <| fun c ->\n        let continued = ref false\n        let once cont : unit =\n            if !continued then failwith \"A continuation provided by Async.FromContinuations was invoked multiple times\" else\n            continued := true\n            fork cont   \n        subscribe (\n            fun a -> once (fun () -> c.k (Ok a))\n        ,   fun e -> once (fun () -> c.k (No e))\n        ,   fun e -> once (fun () -> c.k (Cc e))\n        )\n\n[<JavaScript>]\nlet StartWithContinuations (c: C<'T>, s: 'T -> unit, f: exn -> unit, cc: OCE -> unit, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    fork (fun () -> \n        c {\n            k = function\n                | Ok x -> s x\n                | No e -> f e\n                | Cc e -> cc e\n            ct = ct\n        }\n    )\n\n[<JavaScript>]\nlet Start (c: C<unit>, ctOpt) =\n    StartWithContinuations (c, ignore, \n        fun exn -> Console.Log (\"WebSharper: Uncaught asynchronous exception\", exn)\n    , ignore, ctOpt)\n\n#nowarn \"40\"\n\n[<JavaScript>]\nlet AwaitEvent (e: IEvent<'T>) : C<'T> =\n    checkCancel <| fun c ->\n        let rec sub : System.IDisposable =\n            e.Subscribe (fun x -> \n                sub.Dispose()\n                creg.Dispose()\n                fork (fun () -> c.k (Ok x))        \n            )\n        and creg : System.IDisposable = \n            Register c.ct (fun () -> \n                sub.Dispose()\n                fork (fun () -> cancel c)    \n            ) \n        ()\n\n[<JavaScript>]\nlet Sleep (ms: Milliseconds) : C<unit> =\n    checkCancel <|  fun c ->\n        let rec pending =\n            JS.SetTimeout (fun () -> \n                creg.Dispose()\n                fork (fun () -> c.k (Ok ()))\n            ) ms\n        and creg : System.IDisposable =\n            Register c.ct (fun () -> \n                JS.ClearTimeout pending\n                fork (fun () -> cancel c)\n            )\n        ()\n\n[<JavaScript>]\nlet Parallel (cs: seq<C<'T>>) : C<'T[]> =\n    let cs = Array.ofSeq cs\n    if cs.Length = 0 then Return [||] else\n    checkCancel <| fun c ->\n        let n = Array.length cs\n        let o = ref n\n        let a = Array.create n Unchecked.defaultof<_>\n        let accept i x =\n            match !o, x with\n            | 0, _     -> ()\n            | 1, Ok x  -> a.[i] <- x; o := 0; c.k (Ok a)\n            | n, Ok x  -> a.[i] <- x; o := n - 1\n            | n, res   -> o := 0; c.k (As res)\n        Array.iteri (fun i run ->\n            fork (fun () -> run { k = accept i; ct = c.ct }))\n            cs\n\n[<JavaScript>]\nlet StartChild (r : C<'T>) : C<C<'T>> =\n    checkCancel <| fun c ->\n        let cached = ref None\n        let queue  = Queue()\n        fork (fun _ ->\n            r {\n                k = fun res ->\n                    cached := Some res\n                    while queue.Count > 0 do\n                        queue.Dequeue() res\n                ct = c.ct\n            }\n        )\n        let r2 =            \n            checkCancel <| fun c2 ->\n                match cached.Value with\n                | Some x    -> c2.k x\n                | None      -> queue.Enqueue c2.k\n        c.k (Ok r2)\n\n[<JavaScript>]\nlet OnCancel (action: unit -> unit) : C<System.IDisposable> =\n    checkCancel <| fun c -> c.k (Ok (Register c.ct action))\n\n[<JavaScript>]\nlet TryCancelled (run: C<'T>, comp: OCE -> unit) : C<'T> =\n    checkCancel <| fun c ->\n        run {\n            k = function\n                | Cc e as res ->\n                    comp e\n                    c.k res\n                | res -> c.k res\n            ct = c.ct\n        }\n\n[<JavaScript>]\nlet Using (x: 'U, f: 'U -> C<'T>) =\n    TryFinally (f x, fun () -> (x :> System.IDisposable).Dispose())\n\n[<JavaScript>]\nlet rec While (g: unit -> bool, c: C<unit>) : C<unit> = \n    if g() then \n        Bind (c, fun () -> While (g, c)) \n    else\n        Return ()\n\n[<JavaScript>]\nlet rec For (s: seq<'T>, b: 'T -> C<unit>) =\n    Using (s.GetEnumerator(), fun ie -> \n        While ((fun () -> ie.MoveNext()), \n            Delay (fun () -> b ie.Current)))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.RuntimeHelpersProxy\n\n#nowarn \"40\"\n\nopen WebSharper.JavaScript\n\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n[<JavaScript>]\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\n[<JavaScript>]\n[<Name \"WebSharper.Seq.enumFinally\">]\nlet EnumerateThenFinally (s: seq<'T>) (f: unit -> unit) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get s with e -> f(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); f()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<JavaScript>]\n[<Name \"WebSharper.Seq.enumUsing\">]\nlet EnumerateUsing<'T1,'T2,'T3 when 'T1 :> System.IDisposable\n                                and 'T2 :> seq<'T3>>\n        (x: 'T1) (f: 'T1 -> 'T2) : seq<'T3> =\n\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get (f x) with e -> x.Dispose(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); x.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<JavaScript>]\n[<Name \"WebSharper.Seq.enumWhile\">]\nlet EnumerateWhile (f: unit -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let rec next (en: Enumerator.T<IE<_>,'T>) =\n            match en.State with\n            | null ->\n                if f () then\n                    en.State <- Enumerator.Get s\n                    next en\n                else\n                    false\n            | e ->\n                if e.MoveNext() then\n                    en.Current <- e.Current\n                    true\n                else\n                    e.Dispose()\n                    en.State <- null\n                    next en\n        Enumerator.NewDisposing null (fun en -> safeDispose en.State) next)\n\n[<JavaScript>]\n[<Name \"WebSharper.Control.createEvent\">]\nlet CreateEvent<'D, 'A when 'D : delegate<'A, unit> and 'D :> System.Delegate> \n        (add: 'D -> unit) \n        (remove: 'D -> unit)\n        (create: (obj -> 'A -> unit) -> 'D) : IEvent<'D, 'A> =\n    New [\n        \"AddHandler\" => add\n        \"RemoveHandler\" => remove\n        \"Subscribe\" => \n            fun (r: System.IObserver<'A>) ->\n                let h = create (fun _ args -> r?OnNext(args))\n                add h\n                New [ \"Dispose\" => fun () -> remove h ] \n    ]\n    \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\ntype private D = System.DateTime\ntype private K = System.DateTimeKind\ntype private TS = System.TimeSpan\n\n[<AbstractClass>]\ntype private E =\n    [<Inline \"new Date($d)\">]\n    static member FromDateTime(d: D) = X<E>\n    \n    [<Inline \"new Date($y,$mo,$d)\">]\n    static member Create3(y: int, mo: int, d: int) = X<E>\n\n    [<Inline \"new Date($y,$mo,$d,$h,$m,$s)\">]\n    static member Create6(y: int, mo: int, d: int, h: int, m: int, s: int) = X<E>\n\n    [<Inline \"new Date($y,$mo,$d,$h,$m,$s,$ms)\">]\n    static member Create7(y: int, mo: int, d: int, h: int, m: int, s: int, ms: int) = X<E>\n\n    [<Stub>] abstract member getTime         : unit -> D\n    [<Stub>] abstract member getFullYear     : unit -> int\n    [<Stub>] abstract member getMonth        : unit -> int\n    [<Stub>] abstract member getDate         : unit -> int\n    [<Stub>] abstract member getHours        : unit -> int\n    [<Stub>] abstract member getMinutes      : unit -> int\n    [<Stub>] abstract member getSeconds      : unit -> int\n    [<Stub>] abstract member getMilliseconds : unit -> int\n    [<Stub>] abstract member getDay          : unit -> int\n\nmodule private DateTimeHelpers =\n    [<JavaScript>]\n    let DatePortion d =\n        let e = E.FromDateTime(d)\n        E.Create3(       \n            e.getFullYear(),\n            e.getMonth(),\n            e.getDate()\n        ).getTime()        \n\n    [<JavaScript>]\n    let TimePortion d =\n        let e = E.FromDateTime(d)\n        TS(\n            0,\n            e.getHours(), \n            e.getMinutes(), \n            e.getSeconds(), \n            e.getMilliseconds()\n        )        \n\n    [<JavaScript>]\n    let AddYears(d, years) : D =\n        let e = E.FromDateTime(d)\n        E.Create7(   \n            e.getFullYear() + years,\n            e.getMonth(),\n            e.getDate(),\n            e.getHours(),\n            e.getMinutes(),\n            e.getSeconds(),\n            e.getMilliseconds()\n        ).getTime()\n\n    [<JavaScript>]\n    let AddMonths(d, months: int) : D =\n        let e = E.FromDateTime(d)\n        E.Create7(   \n            e.getFullYear(),\n            e.getMonth() + months,\n            e.getDate(),\n            e.getHours(),\n            e.getMinutes(),\n            e.getSeconds(),\n            e.getMilliseconds()\n        ).getTime()    \n\n    [<JavaScript>]\n    let Parse (s: string) =\n        let d = JavaScript.Date.Parse(s)   \n        if JS.IsNaN(d) then\n            failwith \"Failed to parse date string.\"\n        else d\n\n    [<Direct \"(new Date($d)).toLocaleDateString({}, {year: 'numeric', month: 'long', day: 'numeric', weekday: 'long'})\">]\n    let LongDate (d: obj) = X<string>\n     \n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', hour12: false})\">]\n    let ShortTime (d: obj) = X<string>\n\n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false})\">]\n    let LongTime (d: obj) = X<string>\n             \n[<Proxy(typeof<System.DateTime>)>]\ntype private DateTimeProxy =\n    [<Inline \"0\">]\n    new () = {}\n\n    [<Inline \"new Date($y,$mo-1,$d).getTime()\">]\n    new (y: int, mo: int, d: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s,$ms).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int, ms: int) = {}\n\n    static member Now\n        with [<Inline \"Date.now()\">] get() = X<D>\n    \n    static member UtcNow\n        with [<Inline \"Date.now()\">] get() = X<D>\n    \n    [<Inline \"1\">]\n    member this.Kind = X<System.DateTimeKind>\n\n    member this.Date \n        with [<Inline; JavaScript>] get() : D = DateTimeHelpers.DatePortion(As this)\n\n    static member Today\n        with [<Inline; JavaScript>] get() = DateTimeProxy.Now.Date  \n\n    member this.TimeOfDay \n        with [<Inline; JavaScript>] get() = DateTimeHelpers.TimePortion(As this)\n\n    member this.Year\n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getFullYear()\n\n    member this.Month \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getMonth() + 1\n\n    member this.Day \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getDate()\n\n    member this.Hour \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getHours()\n                                                  \n    member this.Minute \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getMinutes()\n    \n    member this.Second \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getSeconds()\n\n    member this.Millisecond \n        with [<Inline; JavaScript>] get() = E.FromDateTime(As this).getMilliseconds()\n    \n    member this.DayOfWeek \n        with [<Inline; JavaScript>] get() = As<System.DayOfWeek>(E.FromDateTime(As this).getDay())\n\n    member this.Ticks\n        with [<Inline \"$this * 1E4\">] get() = X<int64>\n\n    [<Inline \"$this + $t\">]\n    member this.Add(t: TS) = X<D>\n                            \n    [<Inline \"$this - $t\">]\n    member this.Subtract(t: TS) = X<D>\n\n    [<Inline \"$this - $d\">]\n    member this.Subtract(d: D) = X<TS>\n\n    [<Inline; JavaScript>]\n    member this.AddYears(years: int) : D = DateTimeHelpers.AddYears(As this, years)\n\n    [<Inline; JavaScript>]\n    member this.AddMonths(months: int) : D = DateTimeHelpers.AddMonths(As this, months)\n\n    [<Inline; JavaScript>]\n    member this.AddDays(days: float) : D =\n        this.Add(TS.FromDays days)\n\n    [<Inline; JavaScript>]\n    member this.AddHours(hours: float) : D =\n        this.Add(TS.FromHours hours)\n\n    [<Inline; JavaScript>]\n    member this.AddMinutes(minutes: float) : D =\n        this.Add (TS.FromMinutes minutes)\n\n    [<Inline; JavaScript>]\n    member this.AddSeconds(seconds: float) : D =\n        this.Add (TS.FromSeconds seconds)\n\n    [<Inline; JavaScript>]\n    member this.AddMilliseconds(msec: float) : D =\n        this.Add (TS.FromMilliseconds msec)\n\n    [<Inline; JavaScript>]\n    member this.AddTicks(ticks: int64) : D =\n        this.Add (TS.FromTicks ticks)\n\n    [<Inline \"new Date($this).toLocaleString()\">]\n    override this.ToString() = X<string>\n\n    [<Inline \"new Date($this).toLocaleDateString()\">]\n    member this.ToShortDateString() = X<string>\n    \n    [<Inline; JavaScript>]\n    member this.ToLongDateString() = DateTimeHelpers.LongDate(this)\n    \n    [<Inline; JavaScript>]\n    member this.ToShortTimeString() = DateTimeHelpers.ShortTime(this)\n\n    [<Inline; JavaScript>]\n    member this.ToLongTimeString() = DateTimeHelpers.LongTime(this)\n\n    [<Inline; JavaScript>]\n    static member Parse(s) = As<D>(DateTimeHelpers.Parse(s))\n\n    static member MaxValue\n        with [<Inline \"8640000000000000\">] get () = X<int>\n\n    static member MinValue\n        with [<Inline \"-8640000000000000\">] get () = X<int>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides an `IEnumerable` implementation.\nmodule private WebSharper.Enumerable\n\nopen WebSharper.JavaScript\n\n/// Constructs an `IEnumerable`.\n[<JavaScript>]\nlet Of (getEnumerator: unit -> System.Collections.Generic.IEnumerator<'T>) =\n    let r = obj ()\n    r?GetEnumerator <- getEnumerator\n    As<seq<'T>> r\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides an `IEnumerator` implementation.\nmodule private WebSharper.Enumerator\n\nopen WebSharper.JavaScript\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n/// Represents an unfolding enumerator.\n[<Name \"T\">]\n[<Sealed>]\ntype T<'S,'T> [<JavaScript>] (s: 'S, c: 'T, n: T<'S,'T> -> bool, d: T<'S,'T> -> unit) =\n    [<JavaScript>] \n    member this.MoveNext() = n this\n    member this.State with [<Inline; JavaScript>] get() = s and [<Inline; JavaScript>] set (v: 'S) = this?s <- v\n    member this.Current with [<JavaScript>] get() = c and [<Inline; JavaScript>] set (v: 'T) = this?c <- v\n    [<JavaScript>] \n    member this.Dispose() = d this\n\n/// Constructs a new `IEnumerator` by unfolding a function.\n[<Inline>]\n[<JavaScript>]\nlet New<'S,'T> (state: 'S) (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, ignore)) \n\n[<Inline>]\n[<JavaScript>]\nlet NewDisposing<'S,'T> (state: 'S) dispose (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, dispose))\n\n[<Inline \"$x.GetEnumerator()\">]\nlet getEnumerator (x: obj) : IE<'T> = X\n\n[<JavaScript>]\nlet Get (x: seq<'T>) : IE<'T> =\n    if JS.InstanceOf x JS.Global?Array then\n        let s = As<obj[]> x\n        New 0 (fun e ->\n            let i = e.State\n            if i < s.Length then\n                e.Current <- As s.[i]\n                e.State <- i + 1\n                true\n            else\n                false)\n    elif JS.TypeOf x = JS.String then\n        let s = As<string> x\n        New 0 (fun e ->\n            let i = e.State\n            if i < s.Length then\n                e.Current <- As s.[i]\n                e.State <- i + 1\n                true\n            else\n                false)\n    else\n        getEnumerator x\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines operators and functions that are automatically available whenever\n/// `WebSharper` is open.\n[<AutoOpen>]\nmodule WebSharper.JavaScript.Pervasives\n\nopen WebSharper\nmodule M = WebSharper.Macro\n\n/// Casts an object to the desired type.\n[<Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<Inline \"$x * $y\">]\nlet ( *. ) x y = X<obj>\n\n[<Inline \"$x / $y\">]\nlet ( /. ) x y = X<obj>\n\n[<Inline \"$x % $y\">]\nlet ( %. ) x y = X<obj>\n\n[<Inline \"$x + $y\">]\nlet ( +. ) x y = X<obj>\n\n[<Inline \"$x - $y\">]\nlet ( -. ) x y = X<obj>\n\n[<Inline \"$x << $y\">]\nlet ( <<. ) x y = X<obj>\n\n[<Inline \"$x >> $y\">]\nlet ( >>. ) x y = X<obj>\n\n[<Inline \"$x >>> $y\">]\nlet ( >>>. ) x y = X<obj>\n\n[<Inline \"$x < $y\">]\nlet ( <. ) x y = X<bool>\n\n[<Inline \"$x > $y\">]\nlet ( >. ) x y = X<bool>\n\n[<Inline \"$x >= $y\">]\nlet ( >=. ) x y = X<bool>\n\n[<Inline \"$x <= $y\">]\nlet ( <=. ) x y = X<bool>\n\n[<Inline \"$x == $y\">]\nlet ( ==. ) x y = X<bool>\n\n[<Inline \"$x === $y\">]\nlet ( ===. ) x y = X<bool>\n\n[<Inline \"$x != $y\">]\nlet ( !=. ) x y = X<bool>\n\n[<Inline \"$x !== $y\">]\nlet ( !==. ) x y = X<bool>\n\n[<Inline \"$x | $y\">]\nlet ( |. ) x y = X<obj>\n\n[<Inline \"$x & $y\">]\nlet ( &. ) x y = X<obj>\n\n[<Inline \"$x ^ $y\">]\nlet ( ^. ) x y = X<obj>\n\n[<Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<Inline \"[$x,$y]\">]\nlet ( => ) (x: string) (y: obj) = (x, y)\n\n[<JavaScript>]\nlet private NewFromList<'T> (fields: seq<string * obj>) : 'T =\n    let r = obj ()\n    for (k, v) in fields do\n        (?<-) r k v\n    As r\n\n/// Constructs a new object as if an object literal was used.\n[<Macro(typeof<M.New>)>]\nlet New<'T> (fields: seq<string * obj>) = X<'T>\n\n/// Constructs an proxy to a remote object instance.\n[<Inline \"null\">]\nlet Remote<'T> = X<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Json\n\nopen WebSharper.JavaScript\nmodule A = WebSharper.Core.Attributes\nmodule Js = WebSharper.Core.Json\nmodule Re = WebSharper.Core.Resources\n\ntype Resource() =\n    interface Re.IResource with\n        member this.Render ctx html =\n            let html = html Re.Scripts\n            html.WriteLine \"<!--[if lte IE 7.0]>\"\n            let name = if ctx.DebuggingEnabled then \"Json.js\" else \"Json.min.js\"\n            let ren = Re.Rendering.GetWebResourceRendering(ctx, typeof<Resource>, name)\n            ren.Emit(html, Re.Js)\n            html.WriteLine \"<![endif]-->\"\n\n[<A.Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<A.Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<A.Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<A.Inline \"JSON.parse($json)\">]\n[<A.Require(typeof<Resource>)>]\nlet Parse (json: string) = X<obj>\n\n[<A.Inline \"JSON.stringify($obj)\">]\n[<A.Require(typeof<Resource>)>]\nlet Stringify (obj: obj) = X<string>\n\n/// Lookups an object by its FQN.\n[<A.JavaScript>]\nlet lookup<'T> (x: string []) : obj =\n    let k = x.Length\n    let mutable r = JS.Global\n    let mutable i = 0\n    while i < k do\n        let n  = x.[i]\n        let rn = (?) r n\n        if JS.TypeOf rn <> JS.Undefined then\n            r <- rn\n            i <- i + 1\n        else\n            failwith (\"Invalid server reply. Failed to find type: \" + n)\n    r\n\n/// Does a shallow generic mapping over an object.\n[<A.JavaScript>]\nlet shallowMap (f: obj -> obj) (x: obj) : obj =\n    if JS.InstanceOf x JS.Global?Array then\n        As (Array.map f (As x))\n    else\n        match JS.TypeOf x with\n        | JS.Object ->\n            let r = obj ()\n            JS.ForEach x (fun y -> (?<-) r y (f ((?) x y)); false)\n            r\n        | _ ->\n            x\n\n[<A.JavaScript>]\n[<A.Require(typeof<Resource>)>]\nlet Activate<'T> (json: obj) : 'T =\n    let types = As<obj[]> ((?) json \"$TYPES\")\n    for i = 0 to types.Length - 1 do\n        types.[i] <- lookup (As types.[i])\n    let rec decode (x: obj) : obj =\n        if x = null then x else\n            match JS.TypeOf x with\n            | JS.Object ->\n                if JS.InstanceOf x JS.Global?Array then\n                    shallowMap decode x\n                else\n                    let o  = shallowMap decode ((?) x \"$V\")\n                    let ti = (?) x \"$T\"\n                    if JS.TypeOf ti = JS.Kind.Undefined then o else\n                        let r = JS.New types.[ti]\n                        JS.ForEach o (fun k -> (?<-) r k ((?) o k); false)\n                        r\n            | _ ->\n                x\n    As (decode ((?) json \"$DATA\"))\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Lazy\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Control.LazyExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.LazyExtensionsProxy\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nlet Create (f: unit -> 'T) : Lazy<'T> =\n    let x =\n        {\n            value    = Unchecked.defaultof<'T>\n            created  = false\n            eval     = f\n        }\n    let get () =\n        if x.created then\n            x.value\n        else\n            x.created <- true\n            x.value <- f ()\n            x.value\n    x.eval <- get\n    As x\n\n[<JavaScript>]\nlet CreateFromValue (v: 'T) : Lazy<'T> =\n    let x =\n        {\n            value   = v\n            created = true\n            eval    = fun () -> v\n        }\n    x.eval <- fun () -> v\n    As x\n\n[<JavaScript>]\nlet Force (x: Lazy<'T>) : 'T =\n    As<LazyProxy<'T>>(x).eval()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\nmodule Q = WebSharper.Core.Quotations\nmodule J = WebSharper.Core.JavaScript.Core\nmodule R = WebSharper.Core.Reflection\n\ntype private ListMacro() =\n    let str x = !~(J.String x)\n    let int x = !~(J.Integer (int64 x))\n    let (==) x y = J.Binary(x, J.BinaryOperator.``==``, y)\n    let (?) x f = J.FieldGet(x, str f)\n    interface M.IMacro with\n        member this.Translate(q, tr) =\n            let ctor name g args =\n                let t = R.TypeDefinition.FromType typeof<ListProxy<_>>\n                let uc : Q.Concrete<_> =\n                    { Entity = R.UnionCase.Create t name; Generics = g }\n                tr (Q.NewUnionCase(uc, args))\n            match q with\n            | Q.CallOrCallModule ({Entity = m; Generics = g}, args) ->\n                match m.Name with\n                | \"Cons\" -> ctor \"Cons\" g args\n                | \"get_Empty\" -> ctor \"Empty\" g args\n                | \"get_IsEmpty\" -> (tr args.[0])?(\"$\") == int 0\n                | _ -> tr q\n            | Q.PropertyGet ({Entity = p; Generics = g}, args) ->\n                match p.Name with\n                | \"Empty\" -> ctor \"Empty\" g args\n                | \"IsEmpty\" -> (tr args.[0])?(\"$\") == int 0\n                | _ -> tr q\n            | q -> tr q\n\nand [<Name \"WebSharper.List.T\">]\n    [<Proxy(typeof<list<_>>)>]\n    [<Macro(typeof<ListMacro>)>]\n    [<RequireQualifiedAccess>]\n    private ListProxy<'T> =\n    | Empty\n    | Cons of 'T * List<'T>\n\n    member this.Head    with [<Inline \"$this.$0\">] get ()     = X<'T>\n    member this.Tail    with [<Inline \"$this.$1\">] get ()     = X<list<'T>>\n\n    [<JavaScript>]\n    member this.Length with get () = Seq.length (As this)\n\n    [<JavaScript>]\n    member this.Item with get (x: int) : 'T = Seq.nth x (As this)\n\n    [<JavaScript>]\n    member this.GetEnumerator() =\n        let data = As<list<'T>> this\n        Enumerator.New data (fun e ->\n            match e.State with\n            | x :: xs ->\n                e.Current <- x\n                e.State <- xs\n                true\n            | [] ->\n                false)\n\n    [<JavaScript>]\n    member this.GetSlice(start, finish) : list<'T> =\n        match start, finish with\n        | None, None -> As this\n        | Some i, None -> As this |> CollectionInternals.ListSkip i\n        | None, Some j -> As this |> Seq.take (j + 1) |> List.ofSeq  \n        | Some i, Some j -> As this |> CollectionInternals.ListSkip i |> Seq.take (j - i + 1) |> List.ofSeq        \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"List\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Collections.ListModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ListModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\n[<JavaScript>]\n[<Name \"append\">]\nlet Append (x: list<_>) (y: list<_>) = List.ofSeq (Seq.append x y)\n\n[<Inline>]\n[<JavaScript>]\nlet inline Average (l: list<_>) = Seq.average l\n\n[<Inline>]\n[<JavaScript>]\nlet inline AverageBy f (l: list<_>) = Seq.averageBy f l\n\n[<JavaScript>]\n[<Name \"choose\">]\nlet Choose f (l: list<_>) = List.ofSeq (Seq.choose f l)\n\n[<JavaScript>]\n[<Name \"collect\">]\nlet Collect (f: _ -> list<_>) (l: list<_>) = List.ofSeq (Seq.collect f l)\n\n[<JavaScript>]\n[<Name \"concat\">]\nlet Concat (s: seq<list<_>>) = List.ofSeq (Seq.concat s)\n\n[<Inline>]\n[<JavaScript>]\nlet Empty<'T> : list<'T> = []\n\n[<Inline>]\n[<JavaScript>]\nlet Exists<'T> (p: 'T -> bool) (l: list<'T>) = Seq.exists p l\n\n[<JavaScript>]\n[<Name \"exists2\">]\nlet Exists2<'T1,'T2> (p : 'T1 -> 'T2 -> bool)\n                        (l1: list<'T1>)\n                        (l2: list<'T2>) =\n    Array.exists2 p (Array.ofSeq l1) (Array.ofSeq l2)\n\n[<JavaScript>]\n[<Name \"filter\">]\nlet Filter<'T> (p: 'T -> bool) (l: list<'T>) =\n    List.ofSeq (Seq.filter p l)\n\n[<Inline>]\n[<JavaScript>]\nlet Find p (l: list<_>) = Seq.find p l\n\n[<Inline>]\n[<JavaScript>]\nlet FindIndex p (l: list<_>) = Seq.findIndex p l\n\n[<Inline>]\n[<JavaScript>]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : 'S =\n    Seq.fold f s l\n\n[<JavaScript>]\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (l1: list<'T1>)\n                        (l2: list<'T2>) : 'S =\n    Array.fold2 f s (Array.ofSeq l1) (Array.ofSeq l2)\n\n[<JavaScript>]\n[<Name \"foldBack\">]\nlet FoldBack f (l: list<_>) s =\n    Array.foldBack f (Array.ofSeq l) s\n\n[<JavaScript>]\n[<Name \"foldBack2\">]\nlet FoldBack2 f (l1: list<_>) (l2: list<_>) s =\n    Array.foldBack2 f (Array.ofSeq l1) (Array.ofSeq l2) s\n\n[<Inline>]\n[<JavaScript>]\nlet ForAll p (l: list<_>) = Seq.forall p l\n\n[<JavaScript>]\n[<Name \"forall2\">]\nlet ForAll2 p (l1: list<_>) (l2: list<_>) =\n    Array.forall2 p (Array.ofSeq l1) (Array.ofSeq l2)\n\n[<JavaScript>]\n[<Name \"head\">]\nlet Head (l: list<'T>) =\n    match l with \n    | h :: _ -> h\n    | _ -> failwith \"The input list was empty.\"\n\n[<JavaScript>]\n[<Name \"init\">]\nlet Initialize s f = List.ofArray (Array.init s f)\n\n[<Inline \"$l.$ == 0\">]\nlet IsEmpty (l: list<_>) = X<bool>\n\n[<Inline>]\n[<JavaScript>]\nlet Iterate f (l: list<_>) = Seq.iter f l\n\n[<JavaScript>]\n[<Name \"iter2\">]\nlet Iterate2 f (l1: list<_>) (l2: list<_>) =\n    Array.iter2 f (Array.ofSeq l1) (Array.ofSeq l2)\n\n[<Inline>]\n[<JavaScript>]\nlet IterateIndexed f (l: list<_>) = Seq.iteri f l\n\n[<JavaScript>]\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (l1: list<_>) (l2: list<_>) =\n    Array.iteri2 f (Array.ofSeq l1) (Array.ofSeq l2)\n\n[<Inline>]\n[<JavaScript>]\nlet Length (l: list<_>) = Seq.length l\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map f (l: list<_>) = List.ofSeq (Seq.map f l)\n\n[<JavaScript>]\n[<Name \"map2\">]\nlet Map2 f (l1: list<_>) (l2: list<_>) =\n    List.ofArray (Array.map2 f (Array.ofSeq l1) (Array.ofSeq l2))\n\n[<JavaScript>]\n[<Inline>]\nlet Map3 f (l1: list<_>) (l2: list<_>) (l3: list<_>) =\n    ListMap3 f l1 l2 l3\n\n[<JavaScript>]\n[<Name \"mapi\">]\nlet MapIndexed f (l: list<_>) = List.ofSeq (Seq.mapi f l)\n\n[<JavaScript>]\n[<Name \"mapi2\">]\nlet MapIndexed2 f (l1: list<_>) (l2: list<_>) =\n    List.ofArray (Array.mapi2 f (Array.ofSeq l1) (Array.ofSeq l2))\n\n[<JavaScript>]\n[<Name \"max\">]\nlet Max (l: list<_>) = Seq.reduce max l\n\n[<JavaScript>]\n[<Name \"maxBy\">]\nlet MaxBy f (l: list<_>) =\n    Seq.reduce (fun x y -> if f x > f y then x else y) l\n\n[<JavaScript>]\n[<Name \"min\">]\nlet Min (l: list<_>) = Seq.reduce min l\n\n[<JavaScript>]\n[<Name \"minBy\">]\nlet MinBy f (l: list<_>) =\n    Seq.reduce (fun x y -> if f x < f y then x else y) l\n\n[<Inline>]\n[<JavaScript>]\nlet Get (l: list<_>) ix = Seq.nth ix l\n\n[<Inline>]\n[<JavaScript>]\nlet Item ix (l: list<_>) = Seq.nth ix l\n\n[<JavaScript>]\n[<Name \"ofArray\">]\nlet OfArray<'T> (arr: 'T []) =\n    let mutable r = []\n    for i = 0 to arr.Length - 1 do\n        r <- arr.[arr.Length - i - 1] :: r\n    r\n\n[<JavaScript>]\n[<Name \"ofSeq\">]\nlet OfSeq (s: seq<'T>) =\n    let res = [] : list<'T>\n    let mutable last = res\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        JS.Set last \"$\" 1\n        let next = [] : list<'T>\n        JS.Set last \"$0\" e.Current \n        JS.Set last \"$1\" next\n        last <- next\n    JS.Set last \"$\" 0\n    res\n\n[<JavaScript>]\n[<Name \"partition\">]\nlet Partition p (l: list<_>) =\n    let (a, b) = Array.partition p (Array.ofSeq l)\n    (List.ofArray a, List.ofArray b)\n\n[<JavaScript>]\n[<Name \"permute\">]\nlet Permute f (l: list<_>) =\n    List.ofArray (Array.permute f (Array.ofSeq l))\n\n[<Inline>]\n[<JavaScript>]\nlet Pick f (l: list<_>) = Seq.pick f l\n\n[<Inline>]\n[<JavaScript>]\nlet Reduce (f: 'T -> 'T -> 'T) (list: list<'T>) : 'T =\n    Seq.reduce f list\n\n[<JavaScript>]\n[<Name \"reduceBack\">]\nlet ReduceBack f (l: list<_>) =\n    Array.reduceBack f (Array.ofSeq l)\n\n[<JavaScript>]\n[<Name \"replicate\">]\nlet Replicate size value =\n    List.ofArray (Array.create size value)\n\n[<JavaScript>]\n[<Name \"rev\">]\nlet Reverse (l: list<'T>) =\n    let a = Array.ofSeq l\n    System.Array.Reverse a\n    List.ofArray a\n\n[<JavaScript>]\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : list<'S> =\n    List.ofSeq (Seq.scan f s l)\n\n[<JavaScript>]\n[<Name \"scanBack\">]\nlet ScanBack f (l: list<_>) s =\n    List.ofArray (Array.scanBack f (Array.ofSeq l) s)\n\n[<JavaScript>]\n[<Name \"sort\">]\nlet Sort (l: list<_>) =\n    let a = Array.ofSeq l\n    Array.sortInPlace a\n    List.ofArray a\n\n[<JavaScript>]\n[<Name \"sortBy\">]\nlet SortBy f (l: list<_>) =\n    List.sortWith (fun x y -> compare (f x) (f y)) l\n\n[<JavaScript>]\n[<Name \"sortByDescending\">]\nlet SortByDescending f (l: list<_>) =\n    List.sortWith (fun x y -> - compare (f x) (f y)) l\n\n[<JavaScript>]\n[<Name \"sortDescending\">]\nlet SortDescending (l: list<_>) =\n    let a = Array.ofSeq l\n    ArraySortInPlaceByDescending id a\n    List.ofArray a\n\n[<JavaScript>]\n[<Name \"sortWith\">]\nlet SortWith f (l: list<_>) =\n    let a = Array.ofSeq l\n    Array.sortInPlaceWith f a\n    List.ofArray a\n\n[<Inline>]\n[<JavaScript>]\nlet inline Sum (l: list<'T>) : 'T = Seq.sum l\n\n[<Inline>]\n[<JavaScript>]\nlet inline SumBy (f: 'T -> 'U) (l: list<'T>) : 'U = Seq.sumBy f l\n\n[<JavaScript>]\n[<Name \"tail\">]\nlet Tail (l: list<'T>) = \n    match l with \n    | _ :: t -> t\n    | _ -> failwith \"The input list was empty.\"\n\n[<Inline>]\n[<JavaScript>]\nlet ToArray (l: list<_>) = Array.ofSeq l\n\n[<Inline \"$x\">]\nlet ToSeq<'T> (x: list<'T>) : seq<'T> = x :> _\n\n[<Inline>]\n[<JavaScript>]\nlet TryFind p (l: list<_>) = Seq.tryFind p l\n\n[<Inline>]\n[<JavaScript>]\nlet TryFindIndex p (l: list<_>) = Seq.tryFindIndex p l\n\n[<Inline>]\n[<JavaScript>]\nlet TryPick p (l: list<_>) = Seq.tryPick p l\n\n[<JavaScript>]\n[<Name \"unzip\">]\nlet Unzip (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    for (a, b) in l do\n        x.Enqueue a\n        y.Enqueue b\n    (List.ofArray (x.ToArray()), List.ofArray (y.ToArray()))\n\n[<JavaScript>]\n[<Name \"unzip3\">]\nlet Unzip3 (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    let z = System.Collections.Generic.Queue<_>()\n    for (a, b, c) in l do\n        x.Enqueue a\n        y.Enqueue b\n        z.Enqueue c\n    (\n        List.ofArray (x.ToArray()),\n        List.ofArray (y.ToArray()),\n        List.ofArray (z.ToArray())\n    )\n\n[<JavaScript>]\n[<Name \"zip\">]\nlet Zip (l1: list<_>) (l2: list<_>) =\n    List.ofArray (Array.zip (Array.ofSeq l1) (Array.ofSeq l2))\n\n[<JavaScript>]\n[<Name \"zip3\">]\nlet Zip3 (l1: list<_>) (l2: list<_>) (l3: list<_>) =\n    List.ofArray (Array.zip3 (Array.ofSeq l1)\n        (Array.ofSeq l2) (Array.ofSeq l3))\n\n[<JavaScript>]\n[<Name \"chunkBySize\">]\nlet ChunkBySize size list =\n    SeqChunkBySize size (List.toSeq list)\n    |> Seq.toList\n    |> List.map Array.toList\n\n[<JavaScript>]\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (l1: list<'T>) (l2: list<'T>) : int =\n    SeqCompareWith f (List.toSeq l1) (List.toSeq l2)\n\n[<JavaScript>]\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (l: list<'T>) : list<'K * int> =\n    SeqCountBy f (List.toSeq l)\n    |> Seq.toList\n\n[<JavaScript>]\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: list<'T>) : list<'T> =\n    SeqDistinct (List.toSeq l)\n    |> Seq.toList\n\n[<JavaScript>]\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (l: list<'T>) : list<'T> =\n    SeqDistinctBy f (List.toSeq l)\n    |> Seq.toList\n\n[<JavaScript>]\n[<Name \"splitInto\">]\nlet SplitInto count (list: list<'T>) =\n    ArraySplitInto count (List.toArray list)\n    |> Array.toList\n    |> List.map Array.toList\n\n[<JavaScript>]\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (l: list<'T>) =\n    SeqExcept itemsToExclude (List.toSeq l)\n    |> Seq.toList\n\n[<JavaScript>]\n[<Name \"tryFindBack\">]\nlet TryFindBack ok (l: list<_>) =\n    ArrayTryFindBack ok (Array.ofList l)\n\n[<JavaScript>]\n[<Name \"findBack\">]\nlet FindBack p (s: list<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Inline>]\nlet TryFindIndexBack ok (l: list<_>) =\n    ArrayTryFindIndexBack ok (Array.ofList l) \n\n[<JavaScript>]\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: list<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (l: list<'T>) : list<'K * list<'T>> =\n    SeqGroupBy f (List.toSeq l)\n    |> Seq.toList\n    |> List.map (fun (k, s) ->\n        (k, Seq.toList s)\n    )\n\n[<JavaScript>]\n[<Name \"last\">]\nlet Last (list : list<'T>) : 'T =\n    SeqLast (List.toSeq list)\n\n[<JavaScript>]\n[<Name \"contains\">]\nlet Contains (el: 'T) (l: list<'T>) =\n    SeqContains el (List.toSeq l)\n\n[<JavaScript>]\n[<Name \"mapFold\">]\nlet MapFold f zero list =\n    ArrayMapFold f zero (List.toArray list)\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<JavaScript>]\n[<Name \"mapFoldBack\">]\nlet MapFoldBack f list zero =\n    ArrayMapFoldBack f (List.toArray list) zero\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<JavaScript>]\n[<Name \"pairwise\">]\nlet Pairwise (l: list<'T>) : list<'T * 'T> =\n    SeqPairwise (List.toSeq l)\n    |> Seq.toList\n\n[<JavaScript>]\n[<Name \"indexed\">]\nlet Indexed (list : list<'T>) : list<int * 'T> =\n    List.mapi (fun a b -> (a, b)) list\n\n[<JavaScript>]\n[<Name \"singleton\">]\nlet Singleton<'T> (x: 'T) =\n    [x]\n\n[<JavaScript>]\n[<Inline>]\nlet Skip<'T> i (l : list<'T>) = ListSkip i l\n\n[<JavaScript>]\n[<Inline>]\nlet SkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    ListSkipWhile predicate list\n\n[<JavaScript>]\n[<Inline>]\nlet Take<'T> n (list: list<'T>) =\n    Seq.take n list |> List.ofSeq\n\n[<JavaScript>]\n[<Inline>]\nlet TakeWhile<'T> (predicate : 'T -> bool) (list: list<'T>) =\n    Seq.takeWhile predicate list |> List.ofSeq\n\n[<JavaScript>]\n[<Inline>]\nlet Truncate<'T> n (list: list<'T>) =\n    Seq.truncate n list |> List.ofSeq\n\n[<JavaScript>]\n[<Name \"tryHead\">]\nlet TryHead<'T> (list: list<'T>) =\n    match list with\n    | head :: _ ->\n        Some head\n    | [] ->\n        None\n\n[<JavaScript>]\n[<Name \"tryItem\">]\nlet rec TryItem<'T> n (list: list<'T>) =\n    SeqTryItem n list \n\n[<JavaScript>]\n[<Name \"tryLast\">]\nlet TryLast<'T> (list: list<'T>) =\n    SeqTryLast list\n\n[<JavaScript>]\n[<Name \"exactlyOne\">]\nlet ExactlyOne (list : 'T list) =\n    match list with\n    | head :: [] ->\n        head\n    | _ ->\n        failwith \"The input does not have precisely one element.\"\n\n[<JavaScript>]\n[<Name \"unfold\">]\nlet Unfold (f: 'S -> option<'T * 'S>) (s: 'S) : list<'T> =\n    SeqUnfold f s\n    |> Seq.toList\n\n[<JavaScript>]\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T list) : 'T list =\n    Filter predicate s\n\n[<JavaScript>]\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T list) : list<list<'T>> =\n    SeqWindowed windowSize (List.toSeq s)\n    |> Seq.map List.ofArray |> Seq.toList\n\n[<JavaScript>]\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (list: 'T list) =\n    (Take n list, Skip n list)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\nmodule Nullable =\n    [<JavaScript>]\n    let get (x: obj) =\n        if x ==. null then failwith \"Nullable object must have a value.\" else x\n\n//    [<JavaScript>]\n//    let getOrDefault<'T> (x: 'T) =\n//        if x ==. null then Unchecked.defaultof<'T> else x     \n\n    [<JavaScript>]\n    let getOrValue<'T> (x: 'T) (v: 'T)  =\n        if x ==. null then v else x     \n\n[<Proxy(typeof<System.Nullable<_>>)>]\ntype private NullableProxy<'T> =\n    \n    [<Inline \"null\">]\n    new () = {}\n\n    [<Inline \"$v\">]\n    new (v: 'T) = {}\n\n    member this.Value \n        with [<JavaScript; Inline>] get(): 'T = As<'T>(Nullable.get this)\n\n    member this.HasValue\n        with [<JavaScript; Inline>] get() = this !=. null\n\n//    [<Inline>]\n//    [<JavaScript>]\n//    member this.GetValueOrDefault() : 'T = Nullable.getOrDefault (As<'T> this)\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.GetValueOrDefault(v: 'T) : 'T = Nullable.getOrValue (As<'T> this) v\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Operators\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.Operators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorsProxy\n\n#nowarn \"86\"\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Macro\n\n[<JavaScript>]\n[<Name \"range\">]\nlet ( .. ) (min: 'T) (max: 'T) : seq<'T> =\n    let count = 1 + As max - As min\n    if count <= 0 then Seq.empty\n    else Seq.init count (fun x -> As (x + As min))\n\n[<JavaScript>]\n[<Name \"step\">]\nlet ( .. .. ) (min: 'T1) (step: 'T2) (max: 'T1) : seq<'T1> =\n    let s = sign (As<int> step)\n    Seq.initInfinite (fun k -> As<int> min + k * As<int> step)\n    |> Seq.takeWhile (fun k -> s * (As<int> max - As<int> k) >= 0)\n    |> As\n\n[<Inline \"$r[0]\">]\nlet ( ! ) (r: ref<'T>) = X<'T>\n\n[<Inline \"$a % $b\">]\nlet ( % ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"$a & $b\">]\nlet ( &&& ) (a: 'T1) (b: 'T1) = X<'T1>\n\n[<Inline \"$a * $b\">]\nlet ( * ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"Math.pow($a, $b)\">]\nlet ( ** ) (a: 'T1) (b: 'T2) = X<'T1>\n\n[<Inline \"Math.pow($a, $p)\">]\nlet PowInteger (a: 'T, p: int) = X<'T>\n\n[<Macro(typeof<M.Add>)>]\nlet ( + ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Sub>)>]\nlet ( - ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Division>)>]\nlet ( / ) (x: 'T1) (y: 'T2) = X<'T3>\n\n[<Inline \"void ($a[0] = $b)\">]\nlet ( := ) (a: ref<'T>) (b: 'T) = X<unit>\n\n[<Inline \"function (x) { return $f($g(x)); }\">]\nlet ( << ) (f: 'T1 -> 'T2) (g: 'T3 -> 'T1) = X<'T3 -> 'T2>\n\n[<Inline \"$a << $b\">]\nlet inline ( <<< ) (a: 'T) (b: int) = X<'T>\n\n[<Inline \"$f($x)\">]\nlet ( <| ) (f: 'T -> 'TR) (x: 'T) = X<'TR>\n\n[<Inline \"$f($x)($y)\">]\nlet ( <|| ) (f: 'T1 -> 'T2 -> 'TR) (x: 'T1, y: 'T2) = X<'TR>\n\n[<Inline \"$f($x)($y)($z)\">]\nlet ( <||| ) (f: 'T1 -> 'T2 -> 'T3 -> 'TR)\n             (x: 'T1, y: 'T2, z: 'T3) = X<'TR>\n\n[<Macro(typeof<M.EQ>)>]\nlet ( = ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.NE>)>]\nlet ( <> ) (a: 'T) (b: 'T) =  X<bool>\n\n[<Macro(typeof<M.LT>)>]\nlet ( < ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.GT>)>]\nlet ( > ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.LE>)>]\nlet ( <= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.GE>)>]\nlet ( >= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Inline \"function (x) {return $g($f(x))}\">]\nlet ( >> ) (f: 'T1 -> 'T2) (g: 'T2 -> 'T3) = X<'T1->'T3>\n\n[<Inline \"$a >> $b\">]\nlet inline ( >>> ) (a: 'T) (b: int) : 'T = a >>> b\n\n[<Inline>]\n[<JavaScript>]\nlet ( @ ) a b = List.append a b\n\n[<Inline \"$a + $b\">]\nlet ( ^ ) (a: string) (b: string) = a + b\n\n[<Inline \"$a ^ $b\">]\nlet ( ^^^ ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline \"$f($x)\">]\n[<Name \"pipe\">]\nlet ( |> ) (x: 'T1) (f: 'T1 -> 'T2) = X<'T2>\n\n[<Inline \"$f($x)($y)\">]\n[<Name \"pipe2\">]\nlet ( ||> ) (x: 'T1, y: 'T2) (f: 'T1 -> 'T2 -> 'TR) = X<'TR>\n\n[<Inline \"$a | $b\">]\nlet ( ||| ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline \"$f($x)($y)($z)\">]\nlet ( |||> ) (x: 'T1, y: 'T2, z: 'T3)\n             (f: 'T1 -> 'T2 -> 'T3 -> 'TR) = X<'TR>\n\n[<Inline \"+ $x\">]\nlet ( ~+ ) (x: 'T) = X<'T>\n\n[<Inline \"- $x\">]\nlet ( ~- ) (x: 'T) = X<'T>\n\n[<Inline \"~ $x\">]\nlet ( ~~~ ) (x: 'T) = X<'T>\n\n[<Inline \"Math.abs($x)\">]\nlet Abs (x: 'T) = X<'T>\n\n[<Inline \"Math.acos($x)\">]\nlet Acos (x: 'T) = X<'T>\n\n[<Inline \"Math.asin($x)\">]\nlet Asin (x: 'T) = X<'T>\n\n[<Inline \"Math.atan($x)\">]\nlet Atan (x: 'T) = X<'T>\n\n[<Inline \"Math.atan2($x, $y)\">]\nlet Atan2 (x: 'T1) (y: 'T1) = X<'T2>\n\n[<Inline \"$x\">]\nlet Box (x: 'T) = X<obj>\n\n[<Inline \"Math.ceil($x)\">]\nlet Ceiling (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Char>)>]\nlet ToChar (x: 'T) = X<char>\n\n[<JavaScript>]\nlet Compare<'T> (a: 'T) (b: 'T) = Unchecked.compare a b\n\n[<Inline \"Math.cos($x)\">]\nlet Cos (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)+Math.exp(-$x))/2\">]\nlet Cosh<'T> (x: 'T) = X<'T>\n\n[<Direct \"void ($x[0]--)\">]\n[<Name \"WebSharper.Ref.decr\">]\nlet Decrement (x: ref<int>) = ()\n\n[<JavaScript>]\nlet DefaultArg x d =\n    match x with\n    | Some x -> x\n    | None   -> d\n\n[<Inline \"$x\">]\nlet Enum<'T when 'T : enum<int>> (x: 'T) = X<'T>\n\n[<Inline \"Number($x)\">]\nlet ToDouble (x: 'T) = X<double>\n\n[<Inline \"Math.exp($x)\">]\nlet inline Exp (x: 'T) = X<'T>\n\n[<JavaScript>]\nlet FailWith (msg: string) : 'T = raise (exn msg)\n\n[<Inline \"Number($x)\">]\nlet ToFloat (x: 'T) = X<'T>\n\n[<Inline \"Math.floor($x)\">]\nlet Floor (x: 'T) = X<'T>\n\n[<Inline \"$x[0]\">]\nlet Fst (x: System.Tuple<'T1,'T2>) = X<'T1>\n\n[<Inline>]\n[<JavaScript>]\nlet Hash<'T when 'T : equality> (x: 'T) = Unchecked.hash x\n\n[<Inline \"$x\">]\nlet Identity (x: 'T) = X<'T>\n\n[<Inline \"void $x\">]\nlet Ignore (x: 'T) = X<unit>\n\n[<Direct \"void ($x[0]++)\">]\n[<Name \"WebSharper.Ref.incr\">]\nlet Increment (x: ref<int>) = ()\n\n[<Inline \"Infinity\">]\nlet Infinity = Unchecked.defaultof<double>\n\n[<Inline \"($x << 0)\">]\nlet ToInt (x: 'T) = X<int>\n\n[<Inline \"Number($x)\">]\nlet ToSingle (x: 'T) = X<'T>\n\n[<Inline \"($x << 0)\">]\nlet ToInt32 (x: 'T) = X<int32>\n\n[<Inline \"$x\">]\nlet ToEnum<'T> (x: 'T) = X<'T>\n\n[<Inline \"Math.floor($x)\">]\nlet ToInt64 (x: 'T) = X<int64>\n\n[<Inline \"Math.log($x)\">]\nlet Log (x: 'T) = X<'T>\n\n[<Inline \"Math.log($x)/Math.log(10)\">]\nlet Log10 (x: 'T) = X<'T>\n\n[<JavaScript>]\nlet Max<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a > b then a else b\n\n[<JavaScript>]\nlet Min<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a < b then a else b\n\n[<Inline \"Infinity\">]\nlet InfinitySingle = single infinity\n\n[<Inline \"NaN\">]\nlet NaNSingle = single nan\n\n[<Inline \"NaN\">]\nlet NaN = nan\n\n[<Inline \"!$x\">]\nlet Not (x: bool) = X<bool>\n\n[<JavaScript>]\nlet Pown<'T> (a: 'T) (n: int) =\n    let a = box a :?> double\n    let rec p n =\n        match n with\n        | 1 ->\n            a\n        | n when n % 2 = 0 ->\n            let b = p (n / 2)\n            b * b\n        | n ->\n            a * (p (n - 1))\n    p n\n\n[<Direct \"throw $e\">]\nlet Raise (e: exn) = X<'T>\n\n[<Inline \"[$x]\">]\nlet Ref (x: 'T) = X<ref<'T>>\n\n[<Inline \"Math.round($x)\">]\nlet Round (x: 'T) = X<'T>\n\n[<Inline \"$x\">]\nlet CreateSequence (x: seq<'T>) = X<seq<'T>>\n\n[<JavaScript>]\nlet Sign<'T> (x: 'T) =\n    match As<int> x with\n    | 0            -> 0\n    | n when n < 0 -> -1\n    | _            -> 1\n\n[<Inline \"Math.sin($x)\">]\nlet Sin (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)-Math.exp(-$x))/2\">]\nlet Sinh (x: 'T) = x\n\n[<Inline \"$x[1]\">]\nlet Snd (x: System.Tuple<'T1,'T2>) = X<'T2>\n\n[<Inline \"Math.sqrt($x)\">]\nlet Sqrt (x: 'T1) = X<'T2>\n\n[<Macro(typeof<M.String>)>]\nlet ToString (x: 'T) = X<string>\n\n[<Inline \"Math.tan($x)\">]\nlet inline Tan (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp(2*$x)-1)/(Math.exp(2*$x)+1)\">]\nlet Tanh (x: 'T) = X<'T>\n\n[<JavaScript>]\nlet inline Truncate<'T> (x: 'T) =\n    if x <. 0 then Ceiling x else Floor x\n\n[<Inline \"$x\">]\nlet Unbox (x: obj) = X<'T>\n\n[<Inline>]\n[<JavaScript>]\nlet IsNull (x: obj) = x = null\n\n[<JavaScript>]\nlet Using t f =\n    try f t finally (t :> System.IDisposable).Dispose()\n\n[<JavaScript>]\n[<Name \"KeyValue\">]\nlet KeyValuePattern (kvp: System.Collections.Generic.KeyValuePair<_,_>) =\n    (kvp.Key, kvp.Value)\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.NameAttribute \"Option\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.OptionModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OptionModuleProxy\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\n[<Name \"bind\">]\nlet Bind f x =\n    match x with\n    | Some x -> f x\n    | None   -> None\n\n[<Inline \"$x.$\">]\nlet Count (x: option<_>) = X<int>\n\n[<JavaScript>]\n[<Name \"exists\">]\nlet Exists p x =\n    match x with\n    | Some x -> p x\n    | None   -> false\n\n[<JavaScript>]\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (x: option<'T>) : 'S =\n    match x with\n    | Some x -> f s x\n    | None   -> s\n\n[<JavaScript>]\n[<Name \"foldBack\">]\nlet FoldBack f x s =\n    match x with\n    | Some x -> f x s\n    | None   -> s\n\n[<JavaScript>]\n[<Name \"forall\">]\nlet ForAll p x =\n    match x with\n    | Some x -> p x\n    | None   -> true\n\n[<Inline \"$x.$0\">]\nlet GetValue (x: option<'T>) = X<'T>\n\n[<Inline \"$x.$==0\">]\nlet IsNone (x: option<'T>) = false\n\n[<Inline \"$x.$==1\">]\nlet IsSome (x: option<'T>) =  false\n\n[<JavaScript>]\n[<Name \"iter\">]\nlet Iterate p x =\n    match x with\n    | Some x -> p x\n    | None   -> ()\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map f x =\n    match x with\n    | Some x    -> Some (f x)\n    | None      -> None\n\n[<JavaScript>]\n[<Name \"toArray\">]\nlet ToArray x =\n    match x with\n    | Some x -> [|x|]\n    | None   -> [||]\n\n[<JavaScript>]\n[<Name \"toList\">]\nlet ToList x =\n    match x with\n    | Some x -> [x]\n    | None   -> []\n\n[<JavaScript>]\n[<Name \"ofObj\">]\nlet OfObj o = \n    if o ==. null then None else Some o\n\n[<JavaScript>]\n[<Name \"toObj\">]\nlet ToObj o = \n    match o with\n    | Some v -> v\n    | None -> null\n\n\n[<JavaScript>]\n[<Inline>]\nlet OfNullable o = OfObj o                         \n\n[<JavaScript>]\n[<Inline>]\nlet ToNullable o = ToObj o \n\n[<JavaScript>]\n[<Name \"filter\">]\nlet Filter f o =\n    match o with\n    | None -> None\n    | Some v -> if f v then Some v else None\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines macros used by proxy definitions.\nmodule private WebSharper.PrintfHelpers\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nlet toSafe (s: string) =\n    if s ==. null then \"\" else s  \n\n[<JavaScript>]\nlet plusForPos (n: obj, s) =\n    if 0 <=. n then \"+\" + s else s     \n\n[<JavaScript>]\nlet spaceForPos (n: obj, s) =\n    if 0 <=. n then \" \" + s else s      \n\n[<Inline \"$s.substr(1)\">]\nlet skip1 (s: string) = X<string>\n\n[<JavaScript>]\nlet padNumLeft (s: string, l) =\n    let f = (As<string[]> s).[0]\n    if f = \" \" || f = \"+\" || f = \"-\" then\n        f + (skip1 s).PadLeft(l - 1, '0')\n    else s.PadLeft(l, '0')\n\n[<JavaScript>]\nlet printList (p: obj -> string, o: obj list) =\n     \"[\" + (o |> Seq.map p |> String.concat \"; \") + \"]\" \n\n[<JavaScript>]\nlet printArray (p: obj -> string, o: obj[]) =\n     \"[|\" + (o |> Array.map p |> String.concat \"; \") + \"|]\" \n\n[<JavaScript>]\nlet printArray2D (p: obj -> string, o: obj[,]) =\n     \"[[\" + (\n        seq {\n            let l2 = Array2D.length2 o\n            for i in 0 .. Array2D.length1 o - 1 ->\n                seq { for j in 0 .. l2 - 1 -> p o.[i, j] } \n                |> String.concat \"; \"\n        }\n        |> String.concat \"][\"\n     ) + \"]]\" \n\n[<JavaScript>]\nlet rec prettyPrint (o: obj) =\n    let printObject (o: obj) =\n        let s = string o\n        if s = \"[object Object]\" then\n            \"{\" + (JS.GetFields o |> Array.map (fun (k, v) -> k + \" = \" + prettyPrint v) |> String.concat \"; \") + \"}\"\n        else s\n    let t = JS.TypeOf o\n    if t  ==. JS.String then\n        \"\\\"\" + As o + \"\\\"\"\n    elif t  ==. JS.Object then\n        if JS.InstanceOf o JS.Global?Array then\n            \"[|\" + (As o |> Array.map prettyPrint |> String.concat \"; \") + \"|]\"\n        else printObject o\n    else string o\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Queue\">]\nmodule private WebSharper.QueueProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (a: obj) =\n    splice a 0 (a :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (a: obj) (el: 'T) =\n    Seq.exists ((=) el) (a :?> seq<'T>)\n\n[<JavaScript>]\nlet CopyTo (a: obj) (array: 'T[]) (index: int) =\n    Array.blit (a :?> 'T []) 0 array index (a :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Queue<_>>)>]\ntype private QueueProxy<'T when 'T : equality>\n\n    [<Inline \"$data\">] (data: 'T []) =\n\n    [<Inline \"[]\">]\n    new () = QueueProxy [||]\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Contains(x: 'T) = Contains this x\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.CopyTo(array: 'T [], index: int) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Dequeue() = X<'T>\n\n    [<Inline \"$this.push($x)\">]\n    member this.Enqueue(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = data\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule RandomHelpers =\n    [<Inline \"Math.floor(Math.random() * 2147483648)\">]\n    let Next() = X<int>\n    \n    [<Inline \"Math.floor(Math.random() * $maxValue)\">]\n    let NextMax (maxValue: int) = X<int>\n\n[<Name \"Random\">]\n[<Proxy(typeof<System.Random>)>]\n[<JavaScript>]\ntype RandomProxy() =\n    member this.Next() = Next()\n\n    member this.Next maxValue =\n        if maxValue < 0 then\n            failwith \"'maxValue' must be greater than zero.\"\n        else NextMax maxValue\n\n    member this.Next (minValue: int, maxValue: int) =\n        if minValue > maxValue then\n            failwith \"'minValue' cannot be greater than maxValue.\"\n        else minValue + NextMax (maxValue - minValue)\n\n    member this.NextBytes (buffer: byte[]) =\n        for i = 0 to buffer.Length - 1 do\n            buffer.[i] <- As (NextMax 256)\n\n    [<Inline \"Math.random()\">]\n    member this.NextDouble() = X<float>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Remoting\n\nopen WebSharper.JavaScript\n\nmodule A = WebSharper.Core.Attributes\nmodule R = WebSharper.Core.Remoting\n\n[<A.JavaScript>]\nlet mutable EndPoint = \"?\"\n\n[<A.JavaScript>]\nlet UseHttps() =\n    try\n        if not (JS.Window.Location.Href.StartsWith \"https://\") then\n            EndPoint <- JS.Window.Location.Href.Replace(\"http://\", \"https://\")\n            true\n        else false\n    with _ ->\n        // This function is intended to be callable from the top-level in a module,\n        // which means that it will be (unnecessarily) called on the server too\n        // and throw NotImplementedException. Just silence it.\n        false\n\ntype Data = string\ntype Headers = obj\ntype Url = string\n\ntype IAjaxProvider =\n    abstract member Async : Url -> Headers -> Data -> (Data -> unit) ->\n        (exn -> unit) -> unit\n\n    abstract member Sync : Url -> Headers -> Data -> Data\n\n[<A.Direct @\"\n    var xhr = new XMLHttpRequest();\n    var csrf = document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*csrftoken\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1');\n    xhr.open('POST', $url, $async);\n    if ($async == true) {\n        xhr.withCredentials = true;\n    }\n    for (var h in $headers) {\n        xhr.setRequestHeader(h, $headers[h]);\n    }\n    if (csrf) {\n        xhr.setRequestHeader('x-csrftoken', csrf);\n    }\n    function k() {\n        if (xhr.status == 200) {\n            $ok(xhr.responseText)\n        } else if ($csrf && xhr.status == 403 && xhr.responseText == 'CSRF') {\n            $csrf();\n        } else {\n            var msg = 'Response status is not 200: ';\n            $err(new Error(msg + xhr.status));\n        }\n    }\n    if ('onload' in xhr) {\n        xhr.onload = xhr.onerror = xhr.onabort = k;\n    } else {\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                k();\n            }\n        };\n    }\n    xhr.send($data);\n\">]\nlet private ajax (async: bool) (url: Url) (headers: Headers) (data: Data)\n    (ok: Data -> unit) (err: exn -> unit) (csrf: unit -> unit) = ()\n\ntype XhrProvider [<A.JavaScript>] () =\n    interface IAjaxProvider with\n\n        [<A.JavaScript>]\n        member this.Async url headers data ok err =\n            ajax true url headers data ok err\n                (fun () -> ajax true url headers data ok err JS.Undefined)\n\n        [<A.JavaScript>]\n        member this.Sync url headers data =\n            let res = ref Unchecked.defaultof<_>\n            ajax false url headers data\n                (fun x -> res := x)\n                (fun e -> raise e)\n                (fun () ->\n                    ajax false url headers data\n                        (fun x -> res := x)\n                        (fun e -> raise e)\n                        JS.Undefined)\n            !res\n\n[<A.JavaScript>]\nlet mutable AjaxProvider = XhrProvider() :> IAjaxProvider\n\n[<A.Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) =\n    X<unit>\n\n[<A.JavaScript>]\nlet makeHeaders (m: string) =\n    let headers = obj ()\n    (?<-) headers \"content-type\" \"application/json\"\n    (?<-) headers \"x-websharper-rpc\" m\n    headers\n\n[<A.JavaScript>]\nlet makePayload (data: obj []) =\n    Json.Stringify data\n\ntype IRemotingProvider =\n    abstract member Sync : string -> obj[] -> obj\n    abstract member Async : string -> obj[] -> Async<obj>\n    abstract member Send : string -> obj[] -> unit\n\n[<A.JavaScript>]\n[<Sealed>]\ntype AjaxRemotingProvider =\n\n    static member Sync m data : obj =\n        let data = AjaxProvider.Sync EndPoint (makeHeaders m) (makePayload data)\n        Json.Activate (Json.Parse data)\n\n    static member Async m data : Async<obj> =\n        let headers = makeHeaders m\n        let payload = makePayload data\n        async {\n            let! token = Async.CancellationToken\n            return! Async.FromContinuations (fun (ok, err, cc) ->\n                let waiting = ref true\n                let reg =\n                    token.Register(fun () ->\n                        if !waiting then\n                            waiting := false\n                            cc (new System.OperationCanceledException())\n                    )\n                let ok (x: Data) = \n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        ok (Json.Activate (Json.Parse x))\n                let err (e: exn) =\n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        err e\n                AjaxProvider.Async EndPoint headers payload ok err)\n        }\n\n    static member Send m data =\n        Async.Start (Async.Ignore (AjaxRemotingProvider.Async m data))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Seq\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Collections.SeqModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.SeqModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\n[<JavaScript>]\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\n[<JavaScript>]\n[<Name \"append\">]\nlet Append (s1: seq<'T>) (s2: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let e1 = Enumerator.Get s1\n        let first = ref true\n        Enumerator.NewDisposing e1 (fun x -> safeDispose x.State) (fun x ->\n            if x.State.MoveNext() then\n                x.Current <- x.State.Current\n                true\n            else \n                safeDispose x.State\n                x.State <- null\n                if !first then\n                    first := false\n                    x.State <- Enumerator.Get s2\n                    if x.State.MoveNext() then\n                        x.Current <- x.State.Current\n                        true\n                    else\n                        x.State.Dispose()\n                        x.State <- null\n                        false\n                else \n                    false)) \n\n[<JavaScript>]\n[<Name \"average\">]\nlet Average<'T> (s: seq<'T>) : 'T =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> x))\n            (0, 0.)\n            s\n    As<'T> (sum / As<float> count)\n\n[<JavaScript>]\n[<Name \"averageBy\">]\nlet AverageBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> (f x)))\n            (0, 0.)\n            s\n    As<'U> (sum / As<float> count)\n\n[<JavaScript>]\n[<Name \"cache\">]\nlet Cache<'T> (s: seq<'T>) : seq<'T> =\n    let cache = new System.Collections.Generic.Queue<'T>()\n    let enum  = ref (Enumerator.Get s)\n    Enumerable.Of <| fun () ->\n        let next (e: Enumerator.T<_,_>) =\n            if e.State + 1 < cache.Count then\n                e.State   <- e.State + 1\n                e.Current <- (?) cache (As e.State)\n                true\n            else\n                let en = !enum\n                if en = null then false\n                elif en.MoveNext() then\n                    e.State   <- e.State + 1\n                    e.Current <- en.Current\n                    cache.Enqueue e.Current\n                    true\n                else\n                    en.Dispose()\n                    enum := null\n                    false\n        Enumerator.New 0 next\n\n/// IEnumerable is not supported.\n[<Inline \"$i\">]\nlet Cast<'T> (i: System.Collections.IEnumerable) = X<seq<'T>>\n\n[<JavaScript>]\n[<Inline>]\nlet Contains (el: 'T) (s: seq<'T>) =\n    SeqContains el s\n\n[<JavaScript>]\n[<Name \"choose\">]\nlet Choose (f: 'T -> option<'U>) (s: seq<'T>) : seq<'U> =\n    s\n    |> Seq.collect (fun x ->\n        match f x with\n        | Some v -> [v]\n        | None   -> [])\n\n[<JavaScript>]\n[<Inline>]\nlet ChunkBySize (size: int) (s: seq<'T>) = SeqChunkBySize size s\n\n[<JavaScript>]\n[<Name \"collect\">]\nlet Collect f s = Seq.concat (Seq.map f s)\n\n[<JavaScript>]\n[<Inline>]\nlet CompareWith  (f: 'T -> 'T -> int) (s1: seq<'T>) (s2: seq<'T>) : int =\n    SeqCompareWith f s1 s2\n\n[<JavaScript>]\n[<Name \"concat\">]\nlet Concat (ss: seq<#seq<'T>>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let outerE = Enumerator.Get ss\n        let rec next (st: Enumerator.T<Enumerator.IE<'T>,'T>) =\n            match st.State with\n            | null ->\n                if outerE.MoveNext() then\n                    st.State <- Enumerator.Get outerE.Current\n                    next st\n                else\n                    outerE.Dispose()\n                    false\n            | innerE ->\n                if innerE.MoveNext() then\n                    st.Current <- innerE.Current\n                    true\n                else\n                    st.Dispose()\n                    st.State <- null\n                    next st\n        Enumerator.NewDisposing null (fun st -> \n            safeDispose st.State \n            safeDispose outerE) \n            next)\n\n[<JavaScript>]\n[<Inline>]\nlet CountBy (f: 'T -> 'K) (s: seq<'T>) : seq<'K * int> =\n    SeqCountBy f s\n\n[<JavaScript>]\n[<Name \"delay\">]\nlet Delay<'T> (f: unit -> seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get(f()))\n\n[<JavaScript>]\n[<Inline>]\nlet Distinct<'T when 'T : equality> (s: seq<'T>) : seq<'T> =\n    SeqDistinct s\n\n[<JavaScript>]\n[<Inline>]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (s: seq<'T>) : seq<'T> =\n    SeqDistinctBy f s\n\n[<JavaScript>]\n[<Name \"splitInto\">]\nlet SplitInto count (s: seq<'T>) =\n    if count <= 0 then failwith \"Count must be positive\"\n    Seq.delay (fun () -> ArraySplitInto count (Array.ofSeq s) |> Seq.ofArray)   \n\n[<JavaScript>]\n[<Name \"empty\">]\nlet Empty<'T> : seq<'T> = [||] :> _\n\n[<JavaScript>]\n[<Inline>]\nlet Except (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    SeqExcept itemsToExclude s\n\n[<JavaScript>]\n[<Name \"exists\">]\nlet Exists p (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- p e.Current\n    r\n\n[<JavaScript>]\n[<Name \"exists2\">]\nlet Exists2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = false\n    while not r && e1.MoveNext() && e2.MoveNext() do\n        r <- p e1.Current e2.Current\n    r\n\n[<JavaScript>]\n[<Name \"filter\">]\nlet Filter (f: 'T -> bool) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let enum = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose()) <| fun e ->\n            let mutable loop = enum.MoveNext()\n            let mutable c    = enum.Current\n            let mutable res  = false\n            while loop do\n                if f c then\n                    e.Current <- c\n                    res       <- true\n                    loop      <- false\n                else\n                    if enum.MoveNext() then\n                        c <- enum.Current\n                    else\n                        loop <- false\n            res\n\n[<JavaScript>]\n[<Name \"find\">]\nlet Find p (s: seq<_>) =\n    match Seq.tryFind p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"findIndex\">]\nlet FindIndex p (s: seq<_>) =\n    match Seq.tryFindIndex p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : 'S =\n    let mutable r = x\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<JavaScript>]\n[<Name \"forall\">]\nlet ForAll p s =\n    not (Seq.exists (fun x -> not (p x)) s)\n\n[<JavaScript>]\n[<Name \"forall2\">]\nlet ForAll2 p s1 s2 =\n    not (Seq.exists2 (fun x y -> not (p x y)) s1 s2)\n\n[<JavaScript>]\n[<Inline>]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (s: seq<'T>) : seq<'K * seq<'T>> =\n    SeqGroupBy f s\n\n[<JavaScript>]\n[<Name \"head\">]\nlet Head (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if e.MoveNext() then e.Current else InsufficientElements()\n\n[<JavaScript>]\n[<Name \"init\">]\nlet Initialize (n: int) (f: int -> 'T) : seq<'T> =\n    Seq.take n (Seq.initInfinite f)\n\n[<JavaScript>]\n[<Name \"initInfinite\">]\nlet InitializeInfinite (f: int -> 'T) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New 0 <| fun e ->\n            e.Current <- f e.State\n            e.State   <- e.State + 1\n            true\n\n[<JavaScript>]\n[<Name \"isEmpty\">]\nlet IsEmpty (s: seq<'T>) : bool =\n    use e = Enumerator.Get s\n    not (e.MoveNext())\n\n[<JavaScript>]\n[<Name \"iter\">]\nlet Iterate p (s: seq<_>) =\n    Seq.iteri (fun _ x -> p x) s\n\n[<JavaScript>]\n[<Name \"iter2\">]\nlet Iterate2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    while e1.MoveNext() && e2.MoveNext() do\n        p e1.Current e2.Current\n\n[<JavaScript>]\n[<Name \"iteri\">]\nlet IterateIndexed p (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        p i e.Current\n        i <- i + 1\n\n[<JavaScript>]\n[<Inline>]\nlet Last (s: seq<_>) =\n    SeqLast s\n\n[<JavaScript>]\n[<Name \"length\">]\nlet Length (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        i <- i + 1\n    i\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map (f: 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> en.Dispose()) <| fun e ->\n            if en.MoveNext() then\n                e.Current <- f en.Current\n                true\n            else\n                false\n\n[<JavaScript>]\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Seq.map2 f (Seq.initInfinite id) s\n\n[<JavaScript>]\n[<Name \"map2\">]\nlet Map2 (f: 'T -> 'U -> 'V) (s1: seq<'T>) (s2: seq<'U>) : seq<'V> =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() then\n                e.Current <- f e1.Current e2.Current\n                true\n            else\n                false\n\n[<JavaScript>]\n[<Name \"maxBy\">]\nlet MaxBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    Seq.reduce (fun x y -> if f x >= f y then x else y) s\n\n[<JavaScript>]\n[<Name \"minBy\">]\nlet MinBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    Seq.reduce (fun x y -> if f x <= f y then x else y) s\n\n[<JavaScript>]\n[<Name \"max\">]\nlet Max (s: seq<'T>) : 'T =\n    Seq.reduce (fun x y -> if x >= y then x else y) s\n\n[<JavaScript>]\n[<Name \"min\">]\nlet Min (s: seq<'T>) : 'T =\n    Seq.reduce (fun x y -> if x <= y then x else y) s\n\n[<JavaScript>]\n[<Name \"nth\">]\nlet Get index (s: seq<'T>) =\n    if index < 0 then\n        failwith \"negative index requested\"\n    let mutable pos = -1\n    use e = Enumerator.Get s\n    while pos < index do\n        if not (e.MoveNext()) then\n            InsufficientElements()\n        pos <- pos + 1\n    e.Current\n\n[<JavaScript>]\n[<Inline>]\nlet Item index (s: seq<'T>) = Get index s\n\n[<Inline \"$a\">]\n[<Name \"ofArray\">]\nlet OfArray (a: 'T[]) = X<seq<'T>>\n\n[<Inline \"$l\">]\n[<Name \"ofList\">]\nlet OfList (l: list<'T>) = X<seq<'T>>\n\n[<JavaScript>]\n[<Inline>]\nlet Pairwise (s: seq<'T>) : seq<'T * 'T> =\n    SeqPairwise s\n\n[<JavaScript>]\n[<Name \"pick\">]\nlet Pick p (s: seq<_>) =\n    match Seq.tryPick p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"readOnly\">]\nlet ReadOnly (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get s)\n\n[<JavaScript>]\n[<Name \"reduce\">]\nlet Reduce (f: 'T -> 'T -> 'T) (source: seq<'T>) : 'T =\n    use e = Enumerator.Get source\n    if not (e.MoveNext()) then\n        failwith \"The input sequence was empty\"\n    let mutable r = e.Current\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<JavaScript>]\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : seq<'S> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing false (fun _ -> en.Dispose()) <| fun e ->\n            if e.State then\n                if en.MoveNext() then\n                    e.Current <- f e.Current en.Current\n                    true\n                else\n                    false\n            else\n                e.Current <- x\n                e.State <- true\n                true\n\n[<Inline \"[$x]\">]\n[<Name \"singleton\">]\nlet Singleton<'T> (x: 'T) = X<seq<'T>>\n\n[<JavaScript>]\n[<Name \"skip\">]\nlet Skip (n: int) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let enum = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> enum.Dispose()) (fun e ->\n            if e.State then\n                for i = 1 to n do\n                    if not (enum.MoveNext()) then\n                        InsufficientElements()\n                e.State <- false\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false))\n\n[<JavaScript>]\n[<Name \"skipWhile\">]\nlet SkipWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let enum = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> enum.Dispose()) (fun e ->\n            if e.State then\n                let mutable go = true\n                let mutable empty = false\n                while go do\n                    if enum.MoveNext() then\n                        if not (f enum.Current) then go <- false \n                    else \n                        go <-false\n                        empty <- true\n                e.State <- false\n                if empty then \n                    false \n                else\n                    e.Current <- enum.Current\n                    true\n            else\n                if enum.MoveNext() then\n                    e.Current <- enum.Current\n                    true\n                else\n                    false))\n\n[<JavaScript>]\n[<Name \"sort\">]\nlet Sort<'T when 'T : comparison> (s: seq<'T>) =\n    Seq.sortBy id s\n\n[<JavaScript>]\n[<Name \"sortBy\">]\nlet SortBy<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        Array.sortInPlaceBy f array\n        array :> _)\n\n[<JavaScript>]\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        ArraySortInPlaceByDescending f array\n        array :> _)\n\n[<JavaScript>]\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T : comparison> (s: seq<'T>) =\n    SortByDescending id s\n\n[<JavaScript>]\n[<Name \"sum\">]\nlet Sum<'T> (s: seq<'T>) : 'T =\n    box (Seq.fold (fun s x -> s + (box x :?> _)) 0. s) :?> _\n\n[<JavaScript>]\n[<Name \"sumBy\">]\nlet SumBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    box (Seq.fold (fun s x -> s + (box (f x) :?> _)) 0. s) :?> _\n\n[<JavaScript>]\n[<Name \"take\">]\nlet Take (n: int) (s: seq<'T>) : seq<'T> =\n    if n < 0 then\n        InputMustBeNonNegative()\n    Enumerable.Of (fun () ->\n        let e = ref (Enumerator.Get s)\n        Enumerator.NewDisposing 0 (fun _ -> safeDispose !e) (fun enum ->\n            enum.State <- enum.State + 1\n            if enum.State > n then false else\n            let en = !e\n            if en = null then InsufficientElements()\n            elif en.MoveNext() then\n                enum.Current <- en.Current\n                if enum.State = n then\n                    en.Dispose()\n                    e := null\n                true\n            else\n                en.Dispose()\n                e := null\n                InsufficientElements()\n        )\n    )\n\n[<JavaScript>]\n[<Name \"takeWhile\">]\nlet TakeWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        while e.MoveNext() && f e.Current do\n            yield e.Current\n    }\n\n[<JavaScript>]\n[<Name \"toArray\">]\nlet ToArray (s: seq<'T>) =\n    let q = new System.Collections.Generic.Queue<'T>()\n    for e in s do q.Enqueue e\n    q.ToArray()\n\n[<JavaScript>]\n[<Name \"toList\">]\nlet ToList (s: seq<'T>) = List.ofSeq s\n\n[<JavaScript>]\n[<Inline>]\nlet Truncate (n: int) (s: seq<'T>) : seq<'T> =\n    SeqTruncate n s\n\n[<JavaScript>]\n[<Name \"tryFind\">]\nlet TryFind ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r.IsNone && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            r <- Some x\n    r\n\n[<JavaScript>]\n[<Inline>]\nlet TryFindBack ok (s: seq<_>) =\n    ArrayTryFindBack ok (Array.ofSeq s) \n\n[<JavaScript>]\n[<Inline>]\nlet TryHead (s: seq<'T>) = SeqTryHead s\n\n[<JavaScript>]\n[<Inline>]\nlet TryItem i (s: seq<'T>) = SeqTryItem i s\n\n[<JavaScript>]\n[<Inline>]\nlet TryLast (s: seq<'T>) =  SeqTryLast s\n\n[<JavaScript>]\n[<Name \"findBack\">]\nlet FindBack p (s: seq<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"tryFindIndex\">]\nlet TryFindIndex ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable loop = true\n    let mutable i = 0\n    while loop && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            loop <- false\n        else\n            i <- i + 1\n    if loop then None else Some i\n\n[<JavaScript>]\n[<Inline>]\nlet TryFindIndexBack ok (s: seq<_>) =\n    ArrayTryFindIndexBack ok (Array.ofSeq s) \n\n[<JavaScript>]\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: seq<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<JavaScript>]\n[<Name \"tryPick\">]\nlet TryPick f (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r = None && e.MoveNext() do\n        r <- f e.Current\n    r\n\n[<JavaScript>]\n[<Inline>]\nlet Unfold (f: 'S -> option<'T * 'S>) (s: 'S) : seq<'T> =\n    SeqUnfold f s\n\n[<JavaScript>]\n[<Inline>]\nlet Windowed (windowSize: int) (s: seq<'T>) : seq<'T []> =\n    SeqWindowed windowSize s\n\n[<JavaScript>]\n[<Name \"zip\">]\nlet Zip (s1: seq<'T>) (s2: seq<'U>) =\n    Seq.map2 (fun x y -> x, y) s1 s2\n\n[<JavaScript>]\n[<Name \"zip3\">]\nlet Zip3 (s1: seq<'T>) (s2: seq<'U>) (s3: seq<'V>) : seq<'T * 'U * 'V> =\n    Seq.map2 (fun x (y, z) -> (x, y, z)) s1 (Seq.zip s2 s3)\n\n[<JavaScript>]\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (s1: seq<'T1>)\n                        (s2: seq<'T2>) : 'S =\n    Array.fold2 f s (Array.ofSeq s1) (Array.ofSeq s2)\n\n[<JavaScript>]\n[<Name \"foldBack\">]\nlet FoldBack f (s: seq<_>) state =\n    Array.foldBack f (Array.ofSeq s) state\n\n[<JavaScript>]\n[<Name \"foldBack2\">]\nlet FoldBack2 f (s1: seq<_>) (s2: seq<_>) s =\n    Array.foldBack2 f (Array.ofSeq s1) (Array.ofSeq s2) s\n\n[<JavaScript>]\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    Array.iteri2 f (Array.ofSeq s1) (Array.ofSeq s2)\n\n[<JavaScript>]\n[<Name \"map3\">]\nlet Map3 f (s1: seq<_>) (s2: seq<_>) (s3: seq<_>) =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        let e3 = Enumerator.Get s3\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose(); e3.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() && e3.MoveNext() then\n                e.Current <- f e1.Current e2.Current e3.Current\n                true\n            else\n                false\n\n[<JavaScript>]\n[<Name \"mapi2\">]\nlet MapIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    Map3 f (Seq.initInfinite id) s1 s2\n\n[<JavaScript>]\n[<Name \"mapFold\">]\nlet MapFold f zero s =\n    ArrayMapFold f zero (Seq.toArray s)\n    |> (fun (x, y) ->\n        (Array.toSeq x, y)\n    )\n\n[<JavaScript>]\n[<Name \"mapFoldBack\">]\nlet MapFoldBack f s zero =\n    ArrayMapFoldBack f (Seq.toArray s) zero\n    |> (fun (x, y) ->\n        (Array.toSeq x, y)\n    )\n\n[<JavaScript>]\n[<Name \"permute\">]\nlet Permute f (s: seq<_>) =\n    Seq.delay (fun () -> Seq.ofArray (Array.permute f (Array.ofSeq s)))\n\n[<JavaScript>]\n[<Name \"reduceBack\">]\nlet ReduceBack f (s: seq<_>) =\n    Array.reduceBack f (Array.ofSeq s)\n\n[<JavaScript>]\n[<Name \"replicate\">]\nlet Replicate size value =\n    if size < 0 then InputMustBeNonNegative()\n    seq { for i in 0 .. size - 1 -> value }\n\n[<JavaScript>]\n[<Name \"rev\">]\nlet Reverse (s: seq<'T>) =\n    Seq.delay (fun () -> Array.rev (Seq.toArray s) |> Array.toSeq)\n    \n[<JavaScript>]\n[<Name \"scanBack\">]\nlet ScanBack f (l: seq<_>) s =\n    Seq.delay (fun () -> Seq.ofArray (Array.scanBack f (Array.ofSeq l) s))\n\n[<JavaScript>]\n[<Name \"indexed\">]\nlet Indexed (s : seq<'T>) : seq<int * 'T> =\n    Seq.mapi (fun a b -> (a, b)) s\n\n[<JavaScript>]\n[<Name \"sortWith\">]\nlet SortWith f (s: seq<_>) =\n    Seq.delay (fun () -> \n        let a = Array.ofSeq s\n        Array.sortInPlaceWith f a\n        Seq.ofArray a)\n\n[<JavaScript>]\n[<Name \"tail\">]\nlet Tail<'T> (s : seq<'T>) : seq<'T> =\n    Seq.skip 1 s\n\n[<JavaScript>]\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : seq<'T>) : seq<'T> =\n    Filter predicate s\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Slice\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.Operators+OperatorIntrinsics, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorIntrinsicsProxy \n\nopen WebSharper.JavaScript\n\n[<Inline \"$s.slice($st,$e)\">]\nlet Slice (s: 'T) (st: int) (e: int) = X<'T>\n\n[<Inline \"$s.slice($st)\">]\nlet SliceStart (s: 'T) (st: int) = X<'T>\n\n[<JavaScript>]\n[<Name \"string\">]\nlet GetStringSlice (source: string) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> \"\"\n\n[<JavaScript>]\n[<Name \"array\">]\nlet GetArraySlice<'T> (source: 'T[]) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> [||]\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<JavaScript>]\n[<Name \"setArray\">]\nlet SetArraySlice (dst: _[]) start finish (src:_[]) = \n    let start  = (match start with None -> 0 | Some n -> n) \n    let finish = (match finish with None -> Array.length dst - 1 | Some n -> n) \n    F.SetArraySub dst start (finish - start + 1) src\n\n[<JavaScript>]\n[<Name \"array2D\">]\nlet GetArraySlice2D (arr: _[,]) start1 finish1 start2 finish2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let len2 = (finish2 - start2 + 1)\n    F.GetArray2DSub arr start1 start2 len1 len2\n\n[<JavaScript>]\n[<Name \"array2Dfix1\">]\nlet GetArraySlice2DFixed1 (arr: _[,]) fixed1 start2 finish2 = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    let dst = Array.zeroCreate len2\n    for j = 0 to len2 - 1 do \n        F.SetArray dst j (F.GetArray2D arr fixed1 (start2+j))\n    dst\n\n[<JavaScript>]\n[<Name \"array2Dfix2\">]\nlet GetArraySlice2DFixed2 (arr: _[,]) start1 finish1 fixed2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let dst = Array.zeroCreate len1\n    for i = 0 to len1 - 1 do \n        F.SetArray dst i (F.GetArray2D arr (start1+i) fixed2)\n    dst\n\n[<JavaScript>]\n[<Name \"setArray2Dfix1\">]\nlet SetArraySlice2DFixed1 (dst: _[,]) fixed1 start2 finish2 (src:_[]) = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    for j = 0 to len2 - 1 do\n        F.SetArray2D dst fixed1 (start2+j) (F.GetArray src j)\n\n[<JavaScript>]\n[<Name \"setArray2Dfix2\">]\nlet SetArraySlice2DFixed2 (dst: _[,]) start1 finish1 fixed2 (src:_[]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    for i = 0 to len1 - 1 do\n        F.SetArray2D dst (start1+i) fixed2 (F.GetArray src i)\n\n[<JavaScript>]\n[<Name \"setArray2D\">]\nlet SetArraySlice2D (dst: _[,]) start1 finish1 start2 finish2 (src:_[,]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    F.SetArray2DSub dst start1 start2 (finish1 - start1 + 1) (finish2 - start2 + 1) src\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Stack\">]\nmodule private WebSharper.StackProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (stack: obj) =\n    splice stack 0 (stack :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (stack: obj) (el: 'T) =\n    Seq.exists ((=) el) (stack :?> 'T[])\n\n[<JavaScript>]\nlet CopyTo (stack: obj) (array: 'T[]) (index: int) =\n    Array.blit array 0 array index (stack :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Stack<_>>)>]\ntype private StackProxy<'T when 'T : equality> =\n\n    [<Inline \"[].concat($s).reverse()\">]\n    new (s: 'T []) = {}\n\n    [<Inline \"[]\">]\n    new () = {}\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Contains(x: 'T) : bool = Contains this x\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.CopyTo(array: 'T [], index) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Pop() = X<'T>\n\n    [<Inline \"$this.unshift($x)\">]\n    member this.Push(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = X<'T[]>\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Strings\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.StringModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.StringProxy\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nlet Compare (x: string) (y: string) = compare x y\n\n[<JavaScript>]\nlet CopyTo (s: string) (o: int) (d: char []) (off: int) (ct: int) =\n    Array.blit (s.ToCharArray()) o d off ct\n\n[<Direct \"$x.substring($x.length - $s.length) == $s\">]\nlet EndsWith (x: string) (s: string) = X<bool>\n\n[<Direct \"$s.indexOf(String.fromCharCode($c),$i)\">]\nlet IndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$x.substring(0,$index-1)+$s+$x.substring($index)\">]\nlet Insert (x: string) (index: int) (s: string) = X<string>\n\n[<Direct \"$x == null || $x == ''\">]\nlet IsNullOrEmpty (x: string) = X<bool>\n\n[<Direct \"\"\"$x == null || /^\\s*$/.test($x)\"\"\">]\nlet IsNullOrWhiteSpace (x: string) = X<bool>\n\n[<Direct \"$s.lastIndexOf(String.fromCharCode($c),$i)\">]\nlet LastIndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$n>$s.length?Array($n-$s.length+1).join(String.fromCharCode($c))+$s:$s\">]\nlet PadLeftWith (s: string) (n: int) (c: char) = X<string>\n\n[<JavaScript>]\nlet PadLeft (s: string) (n: int) =\n    PadLeftWith s n ' '\n\n[<Direct \"$n>$s.length?$s+Array($n-$s.length+1).join(String.fromCharCode($c)):$s\">]\nlet PadRightWith (s: string) (n: int) (c: char) = X<string>\n\n[<JavaScript>]\nlet PadRight (s: string) (n: int) =\n    PadRightWith s n ' '\n\n[<Direct \"$x.substring(0,$ix) + $x.substring($ix+$ct)\">]\nlet Remove (x: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$string.replace($search,$replace)\">]\nlet ReplaceOnce string search replace = X<string>\n\n[<JavaScript>]\nlet Replace (subject: string) (search: string) (replace: string) =\n    let rec replaceLoop (subj: string) =\n        let index = subj.IndexOf(search)\n        if index <> -1 then\n            let replaced = ReplaceOnce subj search replace\n            let nextStartIndex = index + replace.Length\n            (replaced.Substring(0, index + replace.Length)) +\n                (replaceLoop (replaced.Substring(nextStartIndex)))\n        else subj\n    replaceLoop subject\n\n[<JavaScript>]\nlet ReplaceChar (s: string) (oldC: char) (newC: char) =\n    Replace s (string oldC) (string newC)\n\n[<Direct \"$s.substr($ix,$ct)\">]\nlet Substring (s: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$t.substring(0,$s.length) == $s\">]\nlet StartsWith (t: string) (s: string) = X<bool>\n\n[<JavaScript>]\nlet ToCharArray (s: string) = Array.init s.Length (fun x -> s.[x])\n\n[<JavaScript>]\nlet ToCharArrayRange (s: string) (startIndex: int) (length: int) =\n    Array.init length (fun i -> s.[startIndex + i])\n\n[<Direct @\"$s.replace(/^\\s+/,'').replace(/\\s+$/,'')\">]\nlet Trim (s: string) = X<string>\n\n[<Direct @\"$s.replace(/^\\s+/,'')\">]\nlet TrimStart (s: string) = X<string>\n\n[<Direct @\"$s.replace(/\\s+$/,'')\">]\nlet TrimEnd (s: string) = X<string>\n\n[<Direct \"$values.join($sep)\">]\nlet Join (sep: string) (values: string []) = X<string>\n\n[<Direct \"$str.split($pat)\">]\nlet SplitWith (str: string) (pat: obj) = X<string[]>\n\n[<Inline \"new RegExp($pat)\">]\nlet MakeRegexp (pat: string) = X<obj>\n\n[<Direct @\"$s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\">]\nlet RegexEscape (s: string) = X<string>\n\n[<JavaScript>]\nlet Split (s: string) (pat: obj) (opts: System.StringSplitOptions) =\n    let res = SplitWith s pat\n    if opts ===. System.StringSplitOptions.RemoveEmptyEntries then\n        Array.filter (fun x -> x !==. \"\") res\n    else\n        res\n\n[<JavaScript>]\nlet SplitChars (s: string) (sep: char[]) (opts: System.StringSplitOptions) =\n    let re = \"[\" + RegexEscape (new System.String(sep)) + \"]\"\n    Split s (MakeRegexp re) opts\n\n[<JavaScript>]\nlet SplitStrings (s: string) (sep: string[]) (opts: System.StringSplitOptions) =\n    let re = String.concat \"|\" (Array.map RegexEscape sep)\n    Split s (MakeRegexp re) opts\n\n[<JavaScript>]\nlet Filter f (s: string) =\n    System.String.Concat(s |> Seq.choose (fun c -> if f c then Some (string c) else None) |> Array.ofSeq)\n\n[<Proxy(typeof<string>)>]\ntype private StringProxy =\n\n    [<Inline \"''\">]\n    new () = {}\n\n    [<Inline \"String.fromCharCode.apply(undefined,$chars)\">]\n    new (chars: char []) = {}\n\n    member this.Chars  with [<Inline \"$this.charCodeAt($pos)\">]\n                            get (pos: int) = X<char>\n\n    [<Inline \"$this\">]\n    member this.Clone() = this\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Compare(x: string, y: string) =\n        Unchecked.compare x y\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.CompareTo(s: string) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Concat(strings: string seq) =\n        Join \"\" (Array.ofSeq strings)\n\n    [<Inline \"$strings.join('')\">]\n    static member Concat([<System.ParamArray>] strings: string[]) = X<string>\n\n    [<Inline \"$this.indexOf($s) != -1\">]\n    member this.Contains(s: string) = X<bool>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.CopyTo(s: int, d: char [], off: int, ct: int) =\n        CopyTo (As this) s d off ct\n\n    static member Empty with [<Inline \"''\">] get () = X<string>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.EndsWith(other: string) = EndsWith (As this) other\n\n    [<Inline \"$x === $y\">]\n    static member Equals(x: string, y: string) = X<bool>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.GetEnumerator() = Enumerator.Get (unbox<seq<char>> this)\n\n    [<Inline \"$this.indexOf($s)\">]\n    member this.IndexOf(s: string) = X<int>\n\n    [<Inline \"$this.indexOf(String.fromCharCode($c))\">]\n    member this.IndexOf(c: char) = X<int>\n\n    [<Inline \"$this.indexOf($s,$i)\">]\n    member this.IndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.IndexOf(c: char, i: int) = IndexOf (As this) c i\n\n    [<Inline>]\n    [<JavaScript>]\n    static member IsNullOrEmpty(x: string) = IsNullOrEmpty x\n\n    [<Inline>]\n    [<JavaScript>]\n    static member IsNullOrWhiteSpace(x: string) = IsNullOrWhiteSpace x\n\n    member this.Item\n        with    [<Inline \"$this.charCodeAt($pos)\">]\n                get (pos: int) = X<char>\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Join(sep: string, values: string seq) =\n        Join sep (Array.ofSeq values)\n\n    [<Inline>]\n    [<JavaScript>]\n    static member Join(sep: string, [<System.ParamArray>] values: string[]) =\n        Join sep values\n\n    [<Inline \"$this.lastIndexOf($s)\">]\n    member this.LastIndexOf(s: string) = X<int>\n\n    [<Inline \"$this.lastIndexOf(String.fromCharCode($c))\">]\n    member this.LastIndexOf(c: char) = X<int>\n\n    [<Inline \"$this.lastIndexOf($s,$i)\">]\n    member this.LastIndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.LastIndexOf(c: char, i: int) =\n        LastIndexOf (As this) c i\n\n    member this.Length with [<Inline \"$this.length\">]\n                            get () = X<int>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.PadLeft(i: int) =\n        PadLeft (As this) i\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.PadLeft(i: int, c: char) =\n        PadLeftWith (As this) i c\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.PadRight(i: int) =\n        PadRight (As this) i\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.PadRight(i: int, c: char) =\n        PadRightWith (As this) i c\n\n    [<Inline \"$this.substring(0,$ix)\">]\n    member this.Remove(ix: int) = X<string>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Remove(ix: int, count: int) = Remove (As this) ix count\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.ToCharArray() = ToCharArray (As this)\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Replace(subj: string, repl: string) =\n        Replace (As this) subj repl\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Replace(subj: char, repl: char) =\n        ReplaceChar (As this) subj repl\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Split([<System.ParamArray>] sep: char[]) =\n        SplitChars (As this) sep  System.StringSplitOptions.RemoveEmptyEntries\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Split(sep: char[], opts: System.StringSplitOptions) =\n        SplitChars (As this) sep opts\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Split(sep: string[], opts: System.StringSplitOptions) =\n        SplitStrings (As this) sep opts\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.StartsWith(s: string) =\n        StartsWith (As this) s\n\n    [<Inline \"$this.substring($ix)\">]\n    member this.Substring(ix: int) = X<string>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Substring(ix: int, ct: int) =\n        Substring (As this) ix ct\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.ToCharArray(i: int, l: int) =\n        ToCharArrayRange (As this) i l\n\n    [<Inline \"$this.toLowerCase()\">]\n    member this.ToLower() = X<string>\n\n    [<Inline \"$this.toUpperCase()\">]\n    member this.ToUpper() = X<string>\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Trim() = Trim (As this)\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.TrimStart() = TrimStart (As this)\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.TrimEnd() = TrimEnd (As this)\n\n[<JavaScript>]\nlet protect (s : string) =\n    if s = null then \"\" else s\n\n[<Inline \"$strings.join($sep)\">]\nlet join (strings: string[]) (sep: string) = X<string>\n\n[<JavaScript>]\n[<Name \"collect\">]\nlet Collect (f: char -> string) (s: string) : string =\n    System.String.Concat(Array.init s.Length (fun i -> f s.[i]))\n\n[<JavaScript>]\n[<Name \"concat\">]\nlet Concat (separator: string) (strings: seq<string>) : string =\n    join (Seq.toArray strings) separator\n\n[<JavaScript>]\n[<Name \"exists\">]\nlet Exists (f: char -> bool) (s: string) : bool =\n    Seq.exists f (protect s)\n\n[<JavaScript>]\n[<Name \"forall\">]\nlet ForAll (f: char -> bool) (s: string) : bool =\n    Seq.forall f (protect s)\n\n[<JavaScript>]\n[<Name \"init\">]\nlet Initialize (count: int) (f: int -> string) : string =\n    System.String.Concat(Array.init count f)\n\n[<JavaScript>]\n[<Name \"iter\">]\nlet Iterate (f: char -> unit) (s: string) : unit =\n    Seq.iter f (protect s)\n\n[<JavaScript>]\n[<Name \"iteri\">]\nlet IterateIndexed (f: int -> char -> unit) (s: string) : unit =\n    Seq.iteri f (protect s)\n\n[<JavaScript>]\n[<Name \"length\">]\nlet Length (s: string) : int =\n    (protect s).Length\n\n[<JavaScript>]\n[<Name \"map\">]\nlet Map (f: char -> char) (s: string) : string =\n    Collect (fun x -> string (f x)) (protect s)\n\n[<JavaScript>]\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> char -> char) (s: string) : string =\n    System.String.Concat (Seq.toArray (Seq.mapi (fun i x -> string (f i x)) s))\n\n[<JavaScript>]\n[<Name \"replicate\">]\nlet Replicate (count: int) (s: string) : string =\n    Initialize count (fun _ -> s)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements generic comparison, equality and hashing.\n[<WebSharper.Core.Attributes.Name \"Unchecked\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Core.Operators+Unchecked, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.UncheckedProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$a.CompareTo($b)\">]\nlet compareTo (a: obj) (b: obj) = X<int>\n\n[<Inline \"$a instanceof Array\">]\nlet isArray (a: obj) = X<bool>\n\n[<Inline \"$a instanceof Date\">]\nlet isDate (a: obj) = X<bool>\n\n[<JavaScript>]\nlet rec compareArrays (a: obj []) (b: obj []) =\n    if a.Length < b.Length   then -1\n    elif a.Length > b.Length then 1\n    else\n        let mutable cmp = 0\n        let mutable i = 0\n        while cmp = 0 && i < a.Length do\n            cmp <- Unchecked.compare a.[i] b.[i]\n            i <- i + 1\n        cmp\n\n[<Inline \"$d.getTime()\">]\nlet getTime (d: obj) : int = X\n\n[<JavaScript>]\nlet rec compareDates (a: obj) (b: obj) =\n    compare (getTime a) (getTime b)\n\n/// Compares two values generically.\n[<JavaScript>]\nlet Compare<'T> (a: 'T) (b: 'T) : int =\n    let objCompare (a: obj) (b: obj) =\n        let cmp = ref 0\n        JS.ForEach a (fun k ->\n            if not (JS.HasOwnProperty a k) then\n                false\n            elif not (JS.HasOwnProperty b k) then\n                cmp := 1; true\n            else\n                cmp := Unchecked.compare a?(k) b?(k); !cmp <> 0)\n        if !cmp = 0 then\n            JS.ForEach b (fun k ->\n                if not (JS.HasOwnProperty b k) then\n                    false\n                elif not (JS.HasOwnProperty a k) then\n                    cmp := -1; true\n                else false)\n        !cmp\n    if a ===. b then 0 else\n        match JS.TypeOf a with\n        | JS.Undefined ->\n            match JS.TypeOf b with\n            | JS.Undefined -> 0\n            | _ -> -1\n        | JS.Function ->\n            failwith \"Cannot compare function values.\"\n        | JS.Boolean | JS.Number | JS.String ->\n            if a <. b then -1 else 1\n        | JS.Object ->\n            if a ===. null then -1\n            elif b ===. null then 1\n            elif JS.In \"CompareTo\" a then compareTo a b\n            elif isArray a && isArray b then compareArrays (As a) (As b)\n            elif isDate a && isDate b then compareDates a b\n            else objCompare a b\n\n/// Produces an undefined value.\n[<Inline \"undefined\">]\nlet DefaultOf<'T> = X<'T>\n\n[<Inline \"$a.Equals($b)\">]\nlet private equals (a: obj) (b: obj) = X<bool>\n\n[<JavaScript>]\nlet arrayEquals (a: obj []) (b: obj []) =\n    if a.Length = b.Length then\n        let mutable eq = true\n        let mutable i = 0\n        while eq && i < a.Length do\n            if not (Unchecked.equals a.[i] b.[i]) then\n                eq <- false\n            i <- i + 1\n        eq\n    else\n        false\n\n[<JavaScript>]\nlet dateEquals a b =\n    getTime a ===. getTime b\n\n/// Tests if two values are equal.\n[<JavaScript>]\nlet Equals (a: 'T) (b: 'T) : bool =\n    let objEquals (a: obj) (b: obj) =\n        let eqR = ref true\n        JS.ForEach a (fun k ->\n            eqR := not (JS.HasOwnProperty a k) || JS.HasOwnProperty b k && Unchecked.equals a?(k) b?(k)\n            not !eqR)\n        if !eqR then\n            JS.ForEach b (fun k ->\n                eqR := not (JS.HasOwnProperty b k) || JS.HasOwnProperty a k\n                not !eqR)\n        !eqR\n    if a ===. b then true else\n        match JS.TypeOf a with\n        | JS.Object ->\n            if a ===. null || a ===. JS.Undefined || b ===. null || b ===. JS.Undefined then false\n            elif JS.In \"Equals\" a then equals a b\n            elif isArray a && isArray b then arrayEquals (As a) (As b)\n            elif isDate a && isDate b then dateEquals a b\n            else objEquals a b\n        | _ ->\n            false\n\n[<JavaScript>]\nlet hashMix (x: int) (y: int) : int =\n    (x <<< 5) + x + y\n\n[<Inline \"$o.GetHashCode()\">]\nlet getHashCode(o: obj) = X<int>\n\n[<JavaScript>]\nlet hashArray (o: obj []) =\n    let mutable h = -34948909\n    for i in 0 .. o.Length - 1 do\n        h <- hashMix h (Unchecked.hash o.[i])\n    h\n\n[<JavaScript>]\nlet hashString (s: string) : int =\n    if s ===. null then 0 else\n        let mutable hash = 5381\n        for i = 0 to s.Length - 1 do\n            hash <- hashMix hash (int s.[i])\n        hash\n\n[<JavaScript>]\nlet hashObject (o: obj) =\n    if JS.In \"GetHashCode\" o then getHashCode o else\n        let (++) = hashMix\n        let h = ref 0\n        JS.ForEach o (fun key ->\n            h := !h ++ hashString key ++ Unchecked.hash ((?) o key)\n            false)\n        !h\n\n/// Computes the hash of an object.\n[<JavaScript>]\nlet Hash<'T> (o: 'T) : int =\n    match JS.TypeOf o with\n    | JS.Undefined -> 0\n    | JS.Function  -> 0\n    | JS.Boolean   -> if As o then 1 else 0\n    | JS.Number    -> As o\n    | JS.String    -> hashString (As o)\n    | JS.Object    -> if o ==. null then 0\n                      elif isArray o then hashArray (As o)\n                      else hashObject o\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Core.Attributes.Name \"Util\">]\n[<WebSharper.Core.Attributes.Proxy\n    \"Microsoft.FSharp.Control.CommonExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.CommonExtensionsProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$event.Subscribe($obs)\">]\nlet subscribe (event: System.IObservable<'T>) (obs: System.IObserver<'T>) =\n    X<System.IDisposable>\n\n[<JavaScript>]\nlet observer (h: 'T -> unit) : System.IObserver<'T> =\n    New [\n        \"OnCompleted\" => ignore\n        \"OnError\" => ignore\n        \"OnNext\" => h\n    ]\n\n[<JavaScript>]\n[<Name \"addListener\">]\nlet AddToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    ignore (subscribe event (observer h))\n\n[<JavaScript>]\n[<Name \"subscribeTo\">]\nlet SubscribeToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    subscribe event (observer h)\n"],
"names": ["count", "i", "enum", "k", "Seq", "Arrays", "s", "source", "List", "len1", "len2", "this", "sub", "creg", "r", "e", "cs", "x", "n", "res", "pending", "r2", "j", "list", "array", "o", "mapping", "strings", "ok", "err", "data", "f", "finish1", "start1", "finish2", "start2", "start", "finish", "a", "b", "matchValue"],
"mappings": "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"
}
