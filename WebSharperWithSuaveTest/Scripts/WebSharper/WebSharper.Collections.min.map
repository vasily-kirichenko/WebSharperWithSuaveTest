{
"version": 3,
"sourceRoot": "FSharpSource",
"sources": ["WebSharper.Collections/BalancedTree.fs", "WebSharper.Collections/Dictionary.fs", "WebSharper.Collections/Map.fs", "WebSharper.Collections/Set.fs", "WebSharper.Collections/HashSet.fs", "WebSharper.Collections/LinkedList.fs", "WebSharper.Collections/MapModule.fs", "WebSharper.Collections/Pair.fs", "WebSharper.Collections/ResizeArray.fs", "WebSharper.Collections/SetModule.fs"],
"sourcesContent": ["// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper.JavaScript\n\n/// Provides balanced binary search tree operations.\nmodule internal BalancedTree =\n    open WebSharper\n\n    /// Represents a binary balanced search tree, preserving the balance\n    /// invariant: the heights of the branches differ by at most 1.\n    type Tree<'T when 'T : comparison> =\n        private {\n            Node    : 'T\n            Left    : Tree<'T>\n            Right   : Tree<'T>\n            Height  : int\n            Count   : int\n        }\n\n    [<Inline \"null\">]\n    let Empty<'T when 'T : comparison> = X<Tree<'T>>\n\n    [<Inline \"$tree == null\">]\n    let IsEmpty (tree: Tree<'T>) = X<bool>\n\n    [<Inline \"$tree == null ? 0 : $tree.Height\">]\n    let Height (tree: Tree<'T>) = X<int>\n            \n    [<Inline \"$tree == null ? 0 : $tree.Count\">]\n    let Count (tree: Tree<'T>) = X<int>\n\n    [<Inline \"$t.Left\">]\n    let Left (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Right\">]\n    let Right (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Node\">]\n    let Node (t: Tree<'T>) = X<'T>\n\n    [<JavaScript>]\n    let Branch node left right =\n        {\n            Node    = node\n            Left    = left\n            Right   = right\n            Height  = 1 + max (Height left) (Height right)\n            Count   = 1 + Count left + Count right\n        }\n\n    [<JavaScript>]\n    let Enumerate flip (t: Tree<'T>) : seq<'T> =\n        let rec gen (t, spine: list<'T * Tree<'T>>) =\n            if IsEmpty t then\n                match spine with\n                | []                    -> None\n                | (t, other) :: spine   -> Some (t, (other, spine))\n            else\n                if flip\n                then gen (Right t, (Node t, Left t) :: spine)\n                else gen (Left t, (Node t, Right t) :: spine)\n        Seq.unfold gen (t, [])\n\n    /// Traverses the tree in ascending order.\n    [<Inline>]\n    [<JavaScript>]\n    let Ascend t = Enumerate false t\n\n    /// Traverses the tree in descending order.\n    [<Inline>]\n    [<JavaScript>]\n    let Descend t = Enumerate true t\n\n    /// Builds a tree from sorted input and the indices of the\n    /// first and the last elements to include.\n    [<JavaScript>]\n    let rec private Build (data: 'T []) min max : Tree<'T> =\n        let sz = max - min + 1\n        if sz <= 0 then\n            Empty\n        else\n            let center = (min + max) / 2\n            let left   = Build data min (center - 1)\n            let right  = Build data (center + 1) max\n            Branch data.[center] left right\n\n    /// Quickly constructs a tree from a sorted, distinct array.\n    [<Inline>]\n    [<JavaScript>]\n    let OfSorted (data: 'T []) : Tree<'T> =\n        Build data 0 (Array.length data - 1)\n\n    [<JavaScript>]\n    let OfSeq (data: seq<'T>) : Tree<'T> =\n        OfSorted (Array.sort (Seq.toArray (Seq.distinct data)))\n\n    [<Inline \"$x.unshift($y)\">]\n    let private unshift (x: 'T) y = X<unit>\n\n    /// Unzips a tree into a matching node and a spine.\n    [<JavaScript>]\n    let Lookup (k: 'T) (t: Tree<'T>) =\n        let mutable spine = [||]\n        let mutable t = t\n        let mutable loop = true\n        while loop do\n            if IsEmpty t then loop <- false else\n                match compare k t.Node with\n                | 0 -> loop <- false\n                | 1 ->\n                    unshift spine (true, t.Node, t.Left)\n                    t <- t.Right\n                | _ ->\n                    unshift spine (false, t.Node, t.Right)\n                    t <- t.Left\n        (t, spine)\n\n    /// Rebuilds an unzipped tree by going up the spine and performing\n    /// rotations where necessary for balance.\n    [<JavaScript>]\n    let private Rebuild<'T when 'T : comparison>\n            (spine: (bool * 'T * Tree<'T>) []) (t: Tree<'T>) : Tree<'T> =\n        let h (x: Tree<'T>) = Height x\n        let mutable t = t\n        for i = 0 to spine.Length - 1 do\n            t <- (\n                match spine.[i] with\n                | false, x, r ->\n                    if h t > h r + 1 then\n                        if h t.Right = h t.Left + 1 then\n                            // Double rotation:\n                            let m = t.Right\n                            Branch  m.Node\n                                    (Branch t.Node t.Left m.Left)\n                                    (Branch x m.Right r)\n                        else\n                            // Single rotation:\n                            Branch  t.Node\n                                    t.Left\n                                    (Branch x t.Right r)\n                    else\n                        // No rotation:\n                        Branch x t r\n                | true, x, l ->\n                    if h t > h l + 1 then\n                        if h t.Left = h t.Right + 1 then\n                            // Double rotation:\n                            let m = t.Left\n                            Branch m.Node\n                                    (Branch x l m.Left)\n                                    (Branch t.Node m.Right t.Right)\n                        else\n                            // Single rotation:\n                            Branch t.Node\n                                    (Branch x l t.Left)\n                                    t.Right\n                    else\n                        // No rotation:\n                        Branch x l t\n            )\n        t\n\n    /// Inserts or updates a node in the tree. If a matching node is found,\n    /// it is replaced with the value of \"combine old new\".\n    [<JavaScript>]\n    let Put<'T when 'T : comparison> combine k (t: Tree<'T>) : Tree<'T> =\n        let (t, spine) = Lookup k t\n        if IsEmpty t then\n            Rebuild spine (Branch k Empty Empty)\n        else\n            Rebuild spine (Branch (combine t.Node k) t.Left t.Right)\n\n    /// Removes a node from the tree.\n    [<JavaScript>]\n    let Remove k (src: Tree<'T>) =\n        let (t, spine) = Lookup k src\n        if IsEmpty t then\n            src\n        else\n            if IsEmpty t.Right then\n                Rebuild spine t.Left\n            elif IsEmpty t.Left then\n                Rebuild spine t.Right\n            else\n                Seq.append (Ascend t.Left) (Ascend t.Right)\n                |> Seq.toArray\n                |> OfSorted\n                |> Rebuild spine\n\n    /// Adds a node into the tree, replacing an existing one if found.\n    [<JavaScript>]\n    let Add<'T when 'T : comparison> (x: 'T) (t: Tree<'T>) : Tree<'T> =\n        Put (fun _ x -> x) x t\n\n    /// Checks if a tree contains a given key.\n    [<JavaScript>]\n    let rec Contains (v: 'T) (t: Tree<'T>) : bool =\n        not (IsEmpty (fst (Lookup v t)))\n\n    /// Looks up a node by key.\n    [<JavaScript>]\n    let TryFind (v: 'T) (t: Tree<'T>) =\n        let x = fst (Lookup v t)\n        if IsEmpty x then None else Some x.Node\n\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Collections.Generic\n\ntype private KVP<'K,'V> = KeyValuePair<'K,'V>\ntype private D<'K,'V> = Dictionary<'K,'V>\n\nmodule internal DictionaryUtil =\n\n    [<JavaScript>]\n    let notPresent () =\n        failwith \"The given key was not present in the dictionary.\"\n\n    [<Inline \"$c.Equals($x, $y)\">]\n    let equals (c: IEqualityComparer<'T>) x y =\n        c.Equals(x, y)\n\n    [<Inline \"$c.GetHashCode($x)\">]\n    let getHashCode (c: IEqualityComparer<'T>) x =\n        c.GetHashCode x\n\nopen DictionaryUtil\n\n/// Implements a proxy for the .NET dictionary.\n[<Name \"Dictionary\">]\n[<Proxy(typeof<D<_,_>>)>]\ntype internal Dictionary<'K,'V when 'K : equality>\n\n    [<JavaScript>]\n    private (init   : seq<KVP<'K,'V>>,\n             equals : 'K -> 'K -> bool,\n             hash   : 'K -> int) =\n\n        let mutable count = 0\n        let mutable data  = obj ()\n\n        [<Inline>]\n        [<JavaScript>]\n        let h x = As<string> (hash x)\n\n        do for x in init do\n            (?<-) data (h x.Key) x.Value\n\n        [<JavaScript>]\n        new () = new Dictionary<'K,'V>([||], (=), hash)\n\n        [<JavaScript>]\n        new (capacity: int) = new Dictionary<'K,'V>()\n\n        [<JavaScript>]\n        new (comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>([||], equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        new (capacity: int, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(comparer)\n\n        [<JavaScript>]\n        new (dictionary: IDictionary<'K,'V>) =\n            new Dictionary<'K,'V>(dictionary, (=), hash)\n\n        [<JavaScript>]\n        new (dictionary: IDictionary<'K,'V>, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(\n                dictionary,\n                equals comparer,\n                getHashCode comparer\n            )\n\n        [<JavaScript>]\n        member this.Add(k: 'K, v: 'V) =\n            let h = h k\n            if JS.HasOwnProperty data h then\n                failwith \"An item with the same key has already been added.\"\n            else\n                (?<-) data h (new KVP<'K,'V>(k, v))\n                count <- count + 1\n\n        [<JavaScript>]\n        member this.Clear() =\n            data <- obj ()\n            count <- 0\n\n        [<JavaScript>]\n        member this.ContainsKey(k: 'K) =\n            JS.HasOwnProperty data (h k)\n\n        [<JavaScript>]\n        member this.Count with [<Inline>] get () = count\n\n        [<JavaScript>]\n        member this.Item\n            with get (k: 'K) : 'V =\n                let k = h k\n                if JS.HasOwnProperty data k then\n                    let x : KVP<'K, 'V> = (?) data k\n                    x.Value\n                else\n                    notPresent ()\n            and set (k: 'K) (v: 'V) =\n                let h = h k\n                if not (JS.HasOwnProperty data h) then\n                    count <- count + 1\n                (?<-) data h (new KVP<'K,'V>(k, v))\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            let s = JS.GetFieldValues data\n            (As<seq<obj>> s).GetEnumerator()\n\n        [<JavaScript>]\n        member this.Remove(k: 'K) =\n            let h = h k\n            if JS.HasOwnProperty data h then\n                JS.Delete data h\n                count <- count - 1\n                true\n            else\n                false\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Collections\nmodule T = BalancedTree\n\n[<AutoOpen>]\nmodule private MapUtil =\n\n    [<JavaScript>]\n    let fromSeq(s: seq<_>) =\n        let a : Pair<_,_> [] =\n            [| for (k, v) in Seq.distinctBy fst s ->\n                { Key = k; Value = v } |]\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Map type.\n[<Proxy(typeof<Map<_,_>>)>]\ntype internal FSharpMap<'K,'V when 'K : comparison>\n\n    [<JavaScript>]\n    (tree: T.Tree<Pair<'K,'V>>) =\n\n        [<JavaScript>]\n        new (s: seq<_>) = new FSharpMap<_,_>(fromSeq s)\n\n        [<JavaScript>]\n        member this.Tree = tree\n\n        [<JavaScript>]\n        member this.Add(k: 'K, v: 'V) : Map<'K,'V> =\n            As (FSharpMap<'K,'V>(tree |> T.Add {Key=k; Value=v}))\n\n        [<JavaScript>]\n        member this.ContainsKey k = \n            tree |> T.Contains {Key=k; Value = JS.Undefined}\n\n        [<JavaScript>]\n        member this.Count = T.Count tree\n\n        [<JavaScript>]\n        member this.IsEmpty = T.IsEmpty tree\n\n        [<JavaScript>]\n        member this.Item \n            with get (k: 'K) : 'V =\n                match this.TryFind k with\n                | Some v    ->v\n                | None      ->\n                    failwith \"The given key was not present in the dictionary.\"\n\n        [<JavaScript>]\n        member this.Remove(k: 'K) : Map<'K,'V> =\n            As (FSharpMap(tree |> T.Remove {Key=k; Value=JS.Undefined}))\n\n        [<JavaScript>]\n        member this.TryFind(k: 'K) =\n            tree\n            |> T.TryFind {Key=k; Value=JS.Undefined}\n            |> Option.map (fun kv -> kv.Value)\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            let s =\n                T.Ascend tree\n                |> Seq.map (fun kv ->\n                    new KeyValuePair<_,_>(kv.Key, kv.Value))\n            s.GetEnumerator()\n\n        [<JavaScript>]\n        override this.GetHashCode() =\n            hash (Seq.toArray this)\n\n        [<JavaScript>]\n        override this.Equals(other) =\n            let other = As<FSharpMap<'K,'V>> other\n            this.Count = other.Count\n            && Seq.forall2 ( = ) this other\n\n        interface System.IComparable with\n            [<JavaScript>]\n            member this.CompareTo other =\n                Seq.compareWith (fun x y ->\n                    compare (As<Pair<'K,'V>> x) (As<Pair<'K,'V>> y))\n                    this\n                    (As<Map<'K,'V>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<_>\n\n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = X<_>\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nmodule T = BalancedTree\n\n[<AutoOpen>]\nmodule private SetUtil =\n\n    [<JavaScript>]\n    let ofSeq(s: seq<_>) =\n        let a = Seq.toArray s\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Set type.\n[<Proxy(typeof<Set<_>>)>]\ntype private FSharpSet<'T when 'T : comparison>\n\n    [<JavaScript>]\n    internal (tree: T.Tree<'T>) =\n\n        [<JavaScript>]\n        new (s: seq<'T>) = new FSharpSet<'T>(ofSeq s)\n\n        [<JavaScript>]\n        member this.add(x: Set<'T>) =\n            Set.union (As this) x\n\n        [<JavaScript>]\n        member this.sub(x: Set<'T>) =\n            Set.difference (As this) x\n\n        [<JavaScript>]\n        member this.Add x : Set<'T> =\n            As (FSharpSet<'T>(T.Add x tree))\n\n        [<JavaScript>]\n        member this.Contains v = T.Contains v tree\n\n        [<JavaScript>]\n        member this.Count = T.Count tree\n\n        [<JavaScript>]\n        member this.IsEmpty = T.IsEmpty tree\n\n        [<JavaScript>]\n        member internal this.Tree = tree\n\n        [<JavaScript>]\n        member this.IsProperSubsetOf(s: Set<'T>) =\n            this.IsSubsetOf s && this.Count < s.Count\n\n        [<JavaScript>]\n        member this.IsProperSupersetOf(s: Set<'T>) =\n            this.IsSupersetOf s && this.Count > s.Count\n\n        [<JavaScript>]\n        member this.IsSubsetOf(s: Set<'T>) =\n            Seq.forall s.Contains this\n\n        [<JavaScript>]\n        member this.IsSupersetOf(s: Set<'T>) =\n            Seq.forall this.Contains s\n\n        [<JavaScript>]\n        member this.MaximumElement = Seq.head (T.Descend tree)\n\n        [<JavaScript>]\n        member this.MinimumElement = Seq.head (T.Ascend tree)\n\n        [<JavaScript>]\n        member this.Remove v : Set<'T> =\n            As (FSharpSet<'T>(T.Remove v tree))\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n            (T.Ascend tree).GetEnumerator()\n\n        [<JavaScript>]\n        override this.GetHashCode() =\n            -1741749453 + ((Seq.toArray this).GetHashCode())\n\n        [<JavaScript>]\n        override this.Equals(other: obj) =\n            this.Count = (As<FSharpSet<'T>> other).Count\n            && Seq.forall2 ( = ) this (As<FSharpSet<'T>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<_>\n\n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = X<_>\n\n        interface System.IComparable with\n            [<JavaScript>]\n            member this.CompareTo other =\n                Seq.compareWith compare this (As<FSharpSet<'T>> other)\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule private HashSetUtil =\n    [<Direct \"var r=[]; for(var k in $o) { r.push.apply(r, $o[k]) }; return r\">]\n    let concat (o: Array<Array<'T>>) = X<Array<'T>>\n    \nopen DictionaryUtil\n\n[<Proxy(typeof<HashSet<_>>)>]\ntype HashSetProxy<'T when 'T : equality>\n\n    [<JavaScript>]\n    private (init   : seq<'T>,\n             equals : 'T -> 'T -> bool,\n             hash   : 'T -> int) =\n\n        let mutable data  = Array<Array<'T>>()\n        let mutable count = 0\n\n        [<JavaScript>]\n        let arrContains (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals arr.[i] item then\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        [<JavaScript>]\n        let arrRemove (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals arr.[i] item then\n                    arr.Splice(i, 1) |> ignore\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        [<JavaScript>]\n        let add (item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then\n                data.[h] <- As [| item |]\n                count <- count + 1\n                true\n            else\n                if arrContains item arr then false else    \n                    arr.Push item |> ignore\n                    count <- count + 1\n                    true\n\n        do for x in init do add x |> ignore\n\n        [<JavaScript>]\n        new () = HashSetProxy<'T>(Seq.empty, (=), hash)\n\n        [<JavaScript>]\n        new (init: seq<'T>) = new HashSetProxy<'T>(init, (=), hash)\n\n        [<JavaScript>]\n        new (comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(Seq.empty, equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        new (init: seq<'T>, comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(init, equals comparer, getHashCode comparer)\n\n        [<JavaScript>]\n        member this.Add(item: 'T) = add item\n\n        [<JavaScript>]\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        [<JavaScript>]\n        member x.Contains(item: 'T) =\n            let arr = data.[hash item]\n            if arr ==. null then false else arrContains item arr\n\n        [<JavaScript>]\n        member x.CopyTo(arr: 'T[]) =\n            let mutable i = 0\n            let all = concat data \n            for i = 0 to all.Length - 1 do \n                arr.[i] <- all.[i]\n\n        [<JavaScript>]\n        member x.Count = count\n\n        [<JavaScript>]\n        member x.ExceptWith(xs: seq<'T>) =\n            for item in xs do\n                x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member this.GetEnumerator() =\n           (As<seq<'T>>(concat data)).GetEnumerator()\n\n        interface IEnumerable with\n            member this.GetEnumerator() = X<IEnumerator>\n        \n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = X<IEnumerator<'T>>\n\n        // TODO: optimize methods by checking if other collection\n        // is a HashSet with the same IEqualityComparer\n        \n        [<JavaScript>]\n        member x.IntersectWith(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash) \n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if other.Contains(item) |> not then\n                    x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member x.IsProperSubsetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count < other.Length && x.IsSubsetOf(other)\n\n        [<JavaScript>]\n        member x.IsProperSupersetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count > other.Length && x.IsSupersetOf(other)\n\n        [<JavaScript>]\n        member x.IsSubsetOf(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            As<_[]>(concat data) |> Array.forall other.Contains\n\n        [<JavaScript>]\n        member x.IsSupersetOf(xs: seq<'T>) =\n            xs |> Seq.forall x.Contains\n\n        [<JavaScript>]\n        member x.Overlaps(xs: seq<'T>) =\n            xs |> Seq.exists x.Contains\n\n        [<JavaScript>]\n        member x.Remove(item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then false else\n                if arrRemove item arr then\n                    count <- count - 1\n                    true\n                else false\n\n        [<JavaScript>]\n        member x.RemoveWhere(cond: 'T -> bool) =\n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if cond item then\n                    x.Remove(item) |> ignore\n\n        [<JavaScript>]\n        member x.SetEquals(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            x.Count = other.Count && x.IsSupersetOf(other)\n\n        [<JavaScript>]\n        member x.SymmetricExceptWith(xs: seq<'T>) =\n            for item in xs do\n                if x.Contains item then\n                    x.Remove(item) |> ignore\n                else\n                    x.Add(item) |> ignore\n\n        [<JavaScript>]\n        member x.UnionWith(xs: seq<'T>) =\n            for item in xs do\n                x.Add(item) |> ignore\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.LinkedList\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype LL<'T> = LinkedList<'T>\ntype LLN<'T> = LinkedListNode<'T>\ntype LLE<'T> = LinkedList<'T>.Enumerator\n\n[<Proxy(typeof<LLN<_>>)>]\n[<Name \"N\">]\ntype NodeProxy<'T> =\n    member this.Previous with [<Inline \"$this.p\">] get () = X<LLN<'T>>\n    member this.Next     with [<Inline \"$this.n\">] get () = X<LLN<'T>>\n    member this.Value    with [<Inline \"$this.v\">] get () = X<'T>\n\n[<Inline \"{p: $p, n: $n, v: $v}\">]\nlet newNode<'T> (p: LLN<'T>) (n: LLN<'T>) (v: 'T) = X<LLN<'T>>\n\n[<Inline \"$node.p = $p\" >]\nlet setPrev (node: LLN<'T>) (p: LLN<'T>) = ()\n\n[<Inline \"$node.n = $n\" >]\nlet setNext (node: LLN<'T>) (n: LLN<'T>) = ()\n\n[<Proxy(typeof<LLE<_>>)>]\n[<Name \"E\">]\ntype EnumeratorProxy<'T> [<JavaScript>] (l: LLN<'T>) =\n    let mutable c = l\n\n    [<JavaScript>]\n    member this.Current = c.Value\n\n    [<JavaScript>]\n    member this.MoveNext() =\n        c <- c.Next\n        c <> null\n\n    [<JavaScript>]\n    member this.Dispose() = ()\n\n[<Proxy(typeof<LL<_>>)>]\n[<Name \"T\">]\ntype ListProxy<'T> [<JavaScript>] (coll: 'T seq) =\n    let mutable c = 0\n    let mutable n = null\n    let mutable p = null\n\n    do  let ie = coll.GetEnumerator()\n        if ie.MoveNext() then\n            n <- newNode null null ie.Current\n            p <- n\n            c <- 1\n        while ie.MoveNext() do\n            let node = newNode p null ie.Current\n            setNext p node\n            p <- node\n            c <- c + 1\n            \n    [<JavaScript>]\n    new () = ListProxy(Seq.empty)          \n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Count = c\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.First = n\n\n    [<Inline>]\n    [<JavaScript>]\n    member this.Last = p\n\n    [<JavaScript>]\n    member this.AddAfter(after: LLN<'T>, value) =\n        let before = after.Next\n        let node = newNode after before value\n        if after.Next = null then p <- node\n        setNext after node\n        if before <> null then setPrev before node\n        c <- c + 1\n        node\n\n    [<JavaScript>]\n    member this.AddBefore(before: LLN<'T>, value) =\n        let after = before.Previous\n        let node = newNode after before value\n        if before.Previous = null then n <- node \n        setPrev before node\n        if after <> null then setNext after node\n        c <- c + 1\n        node\n\n    [<JavaScript>]\n    member this.AddFirst(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddBefore(n, value)\n\n    [<JavaScript>]\n    member this.AddLast(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddAfter(p, value)\n\n    [<JavaScript>]\n    member this.Clear() =\n        c <- 0\n        n <- null\n        p <- null\n\n    [<JavaScript>]\n    member this.Contains(value: 'T) =\n        let mutable found = false\n        let mutable node = n\n        while node <> null && not found do\n            if node.Value ==. value then found <- true \n            else node <- node.Next\n        found\n            \n    [<JavaScript>]\n    member this.Find(value: 'T) =\n        let mutable node = n\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Next\n        if notFound then null else node\n\n    [<JavaScript>]\n    member this.FindLast(value: 'T) = \n        let mutable node = p\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Previous\n        if notFound then null else node\n                \n    [<JavaScript>]\n    member this.GetEnumerator(): LinkedList<'T>.Enumerator =\n        As (EnumeratorProxy(As this))\n\n    [<JavaScript>]\n    member this.Remove(node: LLN<'T>) =\n        let before = node.Previous\n        let after = node.Next\n        if before = null then n <- after else setNext before after\n        if after = null then p <- before else setPrev after before\n        c <- c - 1\n        \n    [<JavaScript>]\n    member this.Remove(value) = \n        let node = this.Find(value)\n        if node = null then false\n        else\n            this.Remove(node)\n            true\n\n    [<JavaScript>]\n    member this.RemoveFirst() = this.Remove(n)\n\n    [<JavaScript>]\n    member this.RemoveLast() = this.Remove(p)\n               \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Map module.\n[<Proxy \"Microsoft.FSharp.Collections.MapModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule internal MapModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private ToTree (m: Map<'K,'V>) =\n        (As<FSharpMap<'K,'V>> m).Tree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private OfTree (t: T.Tree<_>) : Map<'K,'V> =\n        As (new FSharpMap<'K,'V>(t))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Add k v (m: Map<'K,'V>) : Map<'K,'V> = m.Add(k, v)\n\n    [<Inline>]\n    [<JavaScript>]\n    let ContainsKey k (m: Map<'K,'V>) : bool = m.ContainsKey k\n\n    [<Inline>]\n    [<JavaScript>]\n    let Empty<'K,'V when 'K : comparison> : Map<'K,'V> = new Map<_,_>([||])\n\n    [<JavaScript>]\n    let Exists (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : bool =\n        m |> Seq.exists (fun kv -> f kv.Key kv.Value)\n\n    [<JavaScript>]\n    let Filter (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> =\n        T.Ascend (ToTree m)\n        |> Seq.filter (fun kv -> f kv.Key kv.Value)\n        |> Seq.toArray\n        |> T.OfSorted\n        |> OfTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let Find (k: 'K) (m: Map<'K,'V>) : 'V = m.[k]\n\n    [<JavaScript>]\n    let FindKey (f: 'K -> 'T -> bool) (m: Map<'K,'T>) : 'K =\n        m \n        |> Seq.pick (fun kv -> \n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    [<JavaScript>]\n    let rec Fold<'K,'V,'S when 'K : comparison>\n        (f: 'S -> 'K -> 'V -> 'S) (s: 'S) (m: Map<'K,'V>) : 'S =\n            T.Ascend (ToTree m)\n            |> Seq.fold (fun s kv -> f s kv.Key kv.Value) s\n\n    [<JavaScript>]\n    let rec FoldBack (f: 'K -> 'V -> 'S -> 'S) (m: Map<'K,'V>) (s: 'S) : 'S =\n        T.Descend (ToTree m)\n        |> Seq.fold (fun s kv -> f kv.Key kv.Value s) s\n\n    [<JavaScript>]\n    let rec ForAll (f: 'K -> 'V -> bool) (m: Map<'K, 'V>) : bool =\n        m |> Seq.forall (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsEmpty (m: Map<'K, 'V>) : bool = m.IsEmpty\n\n    [<JavaScript>]\n    let rec Iterate (f: 'K -> 'V -> unit) (m: Map<'K, 'V>) : unit =\n        m |> Seq.iter (fun kv -> f kv.Key kv.Value)\n\n    [<JavaScript>]\n    let OfArray (a: ('K * 'V) []) : Map<'K,'V> =\n        a\n        |> Seq.map (fun (k, v) -> {Key = k; Value = v} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfList (kvs: list<'K * 'V>) : Map<'K,'V> = Map.ofSeq kvs\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfSeq (s: seq<'K * 'V>) : Map<'K, 'V> =\n        Map.ofArray (Seq.toArray s)\n\n    [<JavaScript>]\n    let Partition (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> * Map<'K,'V> =\n        let (x, y) =\n            Seq.toArray (T.Ascend (ToTree m))\n            |> Array.partition (fun kv -> f kv.Key kv.Value)\n        (OfTree (T.OfSorted x), OfTree (T.OfSorted y))\n\n    [<JavaScript>]\n    let Pick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : 'T =\n        m |> Seq.pick (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    [<JavaScript>]\n    let Remove (k: 'K) (m: Map<'K, 'V>) : Map<'K, 'V> = m.Remove k\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToArray (m: Map<'K, 'V>) : array<'K * 'V> = Seq.toArray (Map.toSeq m)\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToList (m: Map<'K, 'V>) : list<'K * 'V> = Seq.toList (Map.toSeq m)\n\n    [<JavaScript>]\n    let ToSeq (m: Map<'K, 'V>) : seq<'K * 'V> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> (kv.Key, kv.Value))\n\n    [<JavaScript>]\n    let TryFind (k: 'K) (m: Map<'K, 'V>) : option<'V> = m.TryFind k\n\n    [<JavaScript>]\n    let TryFindKey (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : option<'K> =\n        m |> Seq.tryPick (fun kv ->\n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    [<JavaScript>]\n    let rec TryPick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : option<'T> =\n        m |> Seq.tryPick (fun kv -> f kv.Key kv.Value)\n         \n    [<JavaScript>]\n    let rec Map (f: 'K -> 'V -> 'T) (m: Map<'K,'V>) : Map<'K,'T> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> \n            {Key = kv.Key; Value = f kv.Key kv.Value} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\n\n/// Represents a key-value pair with comparison and equality\n/// ignoring the value and using only the key.\n[<CustomComparison>]\n[<CustomEquality>]\ntype internal Pair<'K,'V when 'K : comparison> =\n    {\n        Key     : 'K\n        Value   : 'V\n    }\n\n    [<JavaScript>]\n    override this.GetHashCode() = hash this.Key\n\n    [<JavaScript>]\n    override this.Equals(other: obj) =\n        this.Key = (other :?> Pair<'K,'V>).Key\n\n    interface System.IComparable with\n        [<JavaScript>]\n        member this.CompareTo(other: obj) =\n            compare this.Key (other :?> Pair<'K,'V>).Key\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.ResizeArray\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.push($x)\">]\nlet push (arr: 'T []) (x: 'T) = ()\n\n[<Direct \"Array.prototype.splice.apply($arr, [$index, $howMany].concat($items))\">]\nlet splice (arr: 'T []) (index: int) (howMany: int) (items: 'T[]) : 'T [] = items\n\n[<WebSharper.Pervasives.ProxyAttribute(typeof<System.Collections.Generic.List<_>>)>]\ntype ResizeArrayProxy<'T> [<JavaScript>] (arr: 'T []) =\n\n    [<JavaScript>]\n    new () =\n        new ResizeArrayProxy<'T>([||])\n\n    [<JavaScript>]\n    new (size: int) =\n        new ResizeArrayProxy<'T>([||])\n\n    [<JavaScript>]\n    new (el: seq<'T>) =\n        new ResizeArrayProxy<'T>(Seq.toArray el)\n\n    [<JavaScript>]\n    member this.GetEnumerator() =\n        (As<seq<obj>> arr).GetEnumerator()\n\n    [<JavaScript>]\n    member this.Add(x: 'T) : unit =\n        push arr x\n\n    [<JavaScript>]\n    member this.AddRange(x: seq<'T>) : unit =\n        Seq.iter this.Add x\n\n    [<JavaScript>]\n    member this.Clear() : unit =\n        splice arr 0 arr.Length [||] |> ignore\n\n    [<JavaScript>]\n    member this.CopyTo(arr: 'T[]) : unit =\n        this.CopyTo(arr, 0)\n\n    [<JavaScript>]\n    member this.CopyTo(arr: 'T[], offset: int) : unit =\n        this.CopyTo(0, arr, offset, this.Count)\n\n    [<JavaScript>]\n    member this.CopyTo(index: int, target: 'T[], offset: int, count: int) : unit =\n        Array.blit arr index target offset count\n\n    [<JavaScript>]\n    member this.Count : int = arr.Length\n\n    [<JavaScript>]\n    member this.GetRange(index: int, count: int) : ResizeArray<'T> =\n        As (ResizeArrayProxy<'T>(Array.sub arr index count))\n\n    [<JavaScript>]\n    member this.Insert(index: int, items: 'T) : unit =\n        splice arr index 0 [| items |] |> ignore\n\n    [<JavaScript>]\n    member this.InsertRange(index: int, items: seq<'T>) : unit =\n        splice arr index 0 (Seq.toArray items) |> ignore\n\n    member this.Item\n        with [<JavaScript>] get (x: int) : 'T = arr.[x]\n        and [<JavaScript>] set (x: int) (v: 'T) = arr.[x] <- v\n\n    [<JavaScript>]\n    member this.RemoveAt(x: int) : unit =\n        splice arr x 1 [||] |> ignore\n\n    [<JavaScript>]\n    member this.RemoveRange(index: int, count: int) : unit =\n        splice arr index count [||] |> ignore\n\n    [<JavaScript>]\n    member this.Reverse() : unit =\n        System.Array.Reverse(arr)\n\n    [<JavaScript>]\n    member this.Reverse(index: int, count: int) : unit =\n        System.Array.Reverse(arr, index, count)\n\n    [<JavaScript>]\n    member this.ToArray() : 'T [] =\n        Array.copy arr\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2015 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Set module.\n[<Proxy \"Microsoft.FSharp.Collections.SetModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule internal SetModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private ToTree (s: Set<'T>) =\n        (As<FSharpSet<'T>> s).Tree\n\n    [<Inline>]\n    [<JavaScript>]\n    let private OfTree (t: T.Tree<'T>) =\n        As<Set<'T>> (new FSharpSet<'T>(t))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Add v (s: Set<_>) = s.Add v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Contains v (s: Set<_>) = s.Contains v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Count (s: Set<_>) = s.Count\n\n    [<Inline>]\n    [<JavaScript>]\n    let Difference (s1: Set<_>) (s2: Set<_>) =\n        Set.filter (fun x -> not (s2.Contains x)) s1\n\n    [<Inline>]\n    [<JavaScript>]\n    let Empty<'T when 'T : comparison> : Set<'T> = OfTree T.Empty\n\n    [<Inline>]\n    [<JavaScript>]\n    let Exists f (s: Set<'T>) = Seq.exists f s\n\n    [<JavaScript>]\n    let Filter f (s: Set<'T>) =\n        OfTree (T.OfSorted (Seq.toArray (Seq.filter f s)))\n\n    [<Inline>]\n    [<JavaScript>]\n    let Fold<'T,'S when 'T : comparison>\n        (f: 'S -> 'T -> 'S) (x: 'S) (a: Set<'T>) =\n            Seq.fold f x a\n\n    [<JavaScript>]\n    let FoldBack (f: 'T -> 'S -> 'S) (a: Set<'T>) (s: 'S) : 'S =\n        Seq.fold (fun s x -> f x s) s (T.Descend (ToTree a))\n\n    [<Inline>]\n    [<JavaScript>]\n    let ForAll f (a: Set<_>) = Seq.forall f a\n\n    [<Inline>]\n    [<JavaScript>]\n    let Intersect (s1: Set<'T>) (s2: Set<'T>) = Set.filter s2.Contains s1\n\n    [<Inline>]\n    [<JavaScript>]\n    let IntersectMany (s: seq<Set<_>>) = Seq.reduce Set.intersect s\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsEmpty (a: Set<_>) = a.IsEmpty\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsProperSubset (a: Set<_>) b = a.IsProperSubsetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsProperSuperset (a: Set<_>) b = a.IsProperSupersetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsSubset (a: Set<_>) b = a.IsSubsetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let IsSuperset (a: Set<_>) b = a.IsSupersetOf b\n\n    [<Inline>]\n    [<JavaScript>]\n    let Iterate f (s: Set<_>) = Seq.iter f s\n\n    [<Inline>]\n    [<JavaScript>]\n    let Map f (s: Set<_>) = Set.ofSeq (Seq.map f s)\n\n    [<Inline>]\n    [<JavaScript>]\n    let MaxElement (s: Set<_>) = s.MaximumElement\n\n    [<Inline>]\n    [<JavaScript>]\n    let MinElement (s: Set<_>) = s.MinimumElement\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfArray (a: 'T []) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfList (a: list<'T>) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    [<JavaScript>]\n    let OfSeq (a: seq<'T>) = OfTree (T.OfSeq a)\n\n    [<JavaScript>]\n    let Partition f (a: Set<_>) =\n        let (x, y) = Array.partition f (Seq.toArray a)\n        (Set.ofArray x, Set.ofArray y)\n\n    [<Inline>]\n    [<JavaScript>]\n    let Remove v (a: Set<_>) = a.Remove v\n\n    [<Inline>]\n    [<JavaScript>]\n    let Singleton x = Set.add x Set.empty\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToArray (a: Set<_>) = Seq.toArray a\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToList (a: Set<_>) = Seq.toList a\n\n    [<Inline>]\n    [<JavaScript>]\n    let ToSeq (a: Set<_>) : seq<_> = a :> _\n\n    [<Inline>]\n    [<JavaScript>]\n    let Union (s1: Set<_>) (s2: Set<_>) =\n        Set.ofSeq (Seq.append s1 s2)\n\n    [<Inline>]\n    [<JavaScript>]\n    let UnionMany (sets: seq<Set<_>>) =\n        Set.ofSeq (Seq.concat sets)\n\n\n\n\n\n"],
"names": ["BalancedTree", "x", "t", "node", "left", "right", "Operators", "max", "min", "sz", "data", "center", "Arrays", "v", "tupledArg", "spine", "other", "flip", "gen", "Seq", "loop", "k", "matchValue", "patternInput", "combine", "i", "h", "l", "m", "r", "src", "source", "JSModule", "Enumerator", "s", "DictionaryUtil", "Dictionary", "dictionary", "Unchecked", "y", "obj", "comparer", "hash", "init", "enumerator", "FSharpMap", "kv", "mapping", "Option", "option", "tree", "MapUtil", "FSharpSet", "e1", "e2", "arg00", "this", "SetModule", "SetUtil", "item", "Array", "arr", "HashSetUtil", "all", "xs", "HashSetProxy", "value", "predicate", "array", "cond", "c", "equals", "after", "before", "found", "notFound", "E", "T", "coll", "ie", "f", "chooser", "folder", "action", "a", "tuple", "ResizeArray", "offset", "index", "target", "count", "ResizeArrayProxy", "items", "el"],
"mappings": "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"
}
